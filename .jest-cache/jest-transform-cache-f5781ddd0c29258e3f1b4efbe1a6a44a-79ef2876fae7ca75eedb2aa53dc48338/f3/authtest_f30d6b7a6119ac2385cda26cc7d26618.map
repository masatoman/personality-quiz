{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/lib/__tests__/auth.test.ts"],"sourcesContent":["import { auth, isAdmin, canAccessUserData, getUserAuth } from '../auth';\nimport { createClient } from '@/utils/supabase/server';\n\n// モックの設定\njest.mock('@/utils/supabase/server');\njest.mock('next/headers', () => ({\n  cookies: jest.fn().mockReturnValue({\n    get: jest.fn(),\n    getAll: jest.fn(),\n  }),\n}));\n\ndescribe('Auth Utilities', () => {\n  const mockSession = {\n    user: {\n      id: 'user-123',\n      email: 'test@example.com',\n    }\n  };\n\n  const mockUser = {\n    id: 'user-123',\n    email: 'test@example.com',\n    role: 'user'\n  };\n\n  const mockAdminUser = {\n    id: 'admin-456',\n    email: 'admin@example.com',\n    role: 'admin'\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (createClient as jest.Mock).mockReturnValue({\n      auth: {\n        getSession: jest.fn().mockResolvedValue({\n          data: { session: mockSession },\n          error: null\n        }),\n      },\n      from: jest.fn().mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: { role: 'user' },\n              error: null\n            })\n          })\n        })\n      })\n    });\n  });\n\n  describe('auth', () => {\n    it('認証済みユーザーのセッション情報を取得できる', async () => {\n      const session = await auth();\n      \n      expect(session).toEqual({\n        ...mockSession,\n        user: {\n          ...mockSession.user,\n          role: 'user'\n        }\n      });\n      \n      // Supabase clientの生成と呼び出しを検証\n      expect(createClient).toHaveBeenCalled();\n    });\n\n    it('エラー時はnullを返す', async () => {\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: null },\n            error: { message: 'Session error' }\n          }),\n        }\n      });\n\n      const session = await auth();\n      expect(session).toBeNull();\n    });\n\n    it('ユーザーデータ取得エラー時は基本セッションを返す', async () => {\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: mockSession },\n            error: null\n          }),\n        },\n        from: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            eq: jest.fn().mockReturnValue({\n              single: jest.fn().mockResolvedValue({\n                data: null,\n                error: { message: 'User data error' }\n              })\n            })\n          })\n        })\n      });\n\n      const session = await auth();\n      expect(session).toEqual(mockSession);\n    });\n  });\n\n  describe('isAdmin', () => {\n    it('管理者ユーザーの場合はtrueを返す', async () => {\n      // ユーザーデータから管理者ロールを返すようモックを設定\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: mockSession },\n            error: null\n          }),\n        },\n        from: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            eq: jest.fn().mockReturnValue({\n              single: jest.fn().mockResolvedValue({\n                data: { role: 'admin' },\n                error: null\n              })\n            })\n          })\n        })\n      });\n\n      const result = await isAdmin();\n      expect(result).toBe(true);\n    });\n\n    it('一般ユーザーの場合はfalseを返す', async () => {\n      const result = await isAdmin();\n      expect(result).toBe(false);\n    });\n\n    it('認証されていない場合はfalseを返す', async () => {\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: null },\n            error: null\n          }),\n        }\n      });\n\n      const result = await isAdmin();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('canAccessUserData', () => {\n    it('自分自身のデータにアクセスできる', async () => {\n      const userId = 'user-123';\n      const result = await canAccessUserData(userId);\n      expect(result).toBe(true);\n    });\n\n    it('管理者は他のユーザーデータにアクセスできる', async () => {\n      // 管理者ロールを返すようモックを設定\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: mockSession },\n            error: null\n          }),\n        },\n        from: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            eq: jest.fn().mockReturnValue({\n              single: jest.fn().mockResolvedValue({\n                data: { role: 'admin' },\n                error: null\n              })\n            })\n          })\n        })\n      });\n\n      const userId = 'other-user-789';\n      const result = await canAccessUserData(userId);\n      expect(result).toBe(true);\n    });\n\n    it('一般ユーザーは他のユーザーデータにアクセスできない', async () => {\n      const userId = 'other-user-789';\n      const result = await canAccessUserData(userId);\n      expect(result).toBe(false);\n    });\n\n    it('認証されていない場合はfalseを返す', async () => {\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: null },\n            error: null\n          }),\n        }\n      });\n\n      const userId = 'user-123';\n      const result = await canAccessUserData(userId);\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getUserAuth', () => {\n    it('認証済みユーザーの情報を返す', async () => {\n      const user = await getUserAuth();\n      expect(user).toEqual({\n        ...mockSession.user,\n        role: 'user'\n      });\n    });\n\n    it('認証されていない場合はnullを返す', async () => {\n      (createClient as jest.Mock).mockReturnValue({\n        auth: {\n          getSession: jest.fn().mockResolvedValue({\n            data: { session: null },\n            error: null\n          }),\n        }\n      });\n\n      const user = await getUserAuth();\n      expect(user).toBeNull();\n    });\n  });\n}); "],"names":["jest","mock","cookies","fn","mockReturnValue","get","getAll","describe","mockSession","user","id","email","mockUser","role","mockAdminUser","beforeEach","clearAllMocks","createClient","auth","getSession","mockResolvedValue","data","session","error","from","select","eq","single","it","expect","toEqual","toHaveBeenCalled","message","toBeNull","result","isAdmin","toBe","userId","canAccessUserData","getUserAuth"],"mappings":"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"}