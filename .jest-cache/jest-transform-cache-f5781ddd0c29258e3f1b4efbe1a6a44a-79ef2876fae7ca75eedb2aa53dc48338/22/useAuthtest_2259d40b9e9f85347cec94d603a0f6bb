a9cb6c2d2319c45baee5d31f4e52b6e3
"use strict";
// モックの設定
jest.mock("@/lib/supabase", ()=>({
        auth: {
            getSession: jest.fn(),
            signUp: jest.fn(),
            signInWithPassword: jest.fn(),
            signOut: jest.fn(),
            resetPasswordForEmail: jest.fn(),
            onAuthStateChange: jest.fn(()=>({
                    data: {
                        subscription: {
                            unsubscribe: jest.fn()
                        }
                    }
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = require("@testing-library/react");
const _useAuth = require("../useAuth");
const _supabase = /*#__PURE__*/ _interop_require_default(require("../../lib/supabase"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("useAuth", ()=>{
    const mockUser = {
        id: "user-123",
        email: "test@example.com",
        role: "user"
    };
    const mockSession = {
        user: mockUser,
        access_token: "mock-access-token",
        refresh_token: "mock-refresh-token"
    };
    const mockAuthError = {
        message: "認証エラーが発生しました"
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // デフォルトのモック応答をセット
        _supabase.default.auth.getSession.mockResolvedValue({
            data: {
                session: mockSession
            },
            error: null
        });
    });
    it("初期状態はローディング中で情報はnullである", async ()=>{
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        expect(result.current.loading).toBe(true);
        expect(result.current.user).toBeNull();
        expect(result.current.session).toBeNull();
        expect(result.current.error).toBeNull();
    });
    it("セッションが取得できるとユーザー情報がセットされる", async ()=>{
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        // セッション取得をシミュレート
        await (0, _react.act)(async ()=>{
            await Promise.resolve();
            rerender();
        });
        expect(result.current.loading).toBe(false);
        expect(result.current.user).toEqual(mockUser);
        expect(result.current.session).toEqual(mockSession);
        expect(_supabase.default.auth.getSession).toHaveBeenCalled();
    });
    it("セッション取得エラーを適切に処理する", async ()=>{
        // エラーを返すようにモックを設定
        _supabase.default.auth.getSession.mockResolvedValueOnce({
            data: {
                session: null
            },
            error: mockAuthError
        });
        const { result, rerender } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        // セッション取得をシミュレート
        await (0, _react.act)(async ()=>{
            await Promise.resolve();
            rerender();
        });
        expect(result.current.loading).toBe(false);
        expect(result.current.error).toEqual(mockAuthError);
    });
    it("signUpメソッドが正しく動作する", async ()=>{
        // サインアップ成功のモック
        _supabase.default.auth.signUp.mockResolvedValueOnce({
            data: {
                user: mockUser
            },
            error: null
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let signUpResult;
        await (0, _react.act)(async ()=>{
            signUpResult = await result.current.signUp("test@example.com", "password123");
        });
        expect(signUpResult).toEqual({
            user: mockUser,
            error: null
        });
        expect(_supabase.default.auth.signUp).toHaveBeenCalledWith({
            email: "test@example.com",
            password: "password123"
        });
    });
    it("signUpエラーを適切に処理する", async ()=>{
        // サインアップエラーのモック
        _supabase.default.auth.signUp.mockResolvedValueOnce({
            data: {
                user: null
            },
            error: mockAuthError
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let signUpResult;
        await (0, _react.act)(async ()=>{
            signUpResult = await result.current.signUp("test@example.com", "password123");
        });
        expect(signUpResult).toEqual({
            user: null,
            error: mockAuthError
        });
    });
    it("signInメソッドが正しく動作する", async ()=>{
        // サインイン成功のモック
        _supabase.default.auth.signInWithPassword.mockResolvedValueOnce({
            data: {
                user: mockUser
            },
            error: null
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let signInResult;
        await (0, _react.act)(async ()=>{
            signInResult = await result.current.signIn("test@example.com", "password123");
        });
        expect(signInResult).toEqual({
            user: mockUser,
            error: null
        });
        expect(_supabase.default.auth.signInWithPassword).toHaveBeenCalledWith({
            email: "test@example.com",
            password: "password123"
        });
    });
    it("signInエラーを適切に処理する", async ()=>{
        // サインインエラーのモック
        _supabase.default.auth.signInWithPassword.mockResolvedValueOnce({
            data: {
                user: null
            },
            error: mockAuthError
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let signInResult;
        await (0, _react.act)(async ()=>{
            signInResult = await result.current.signIn("test@example.com", "password123");
        });
        expect(signInResult).toEqual({
            user: null,
            error: mockAuthError
        });
    });
    it("signOutメソッドが正しく動作する", async ()=>{
        // サインアウト成功のモック
        _supabase.default.auth.signOut.mockResolvedValueOnce({
            error: null
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react.act)(async ()=>{
            await result.current.signOut();
        });
        expect(_supabase.default.auth.signOut).toHaveBeenCalled();
    });
    it("resetPasswordメソッドが正しく動作する", async ()=>{
        // パスワードリセット成功のモック
        _supabase.default.auth.resetPasswordForEmail.mockResolvedValueOnce({
            data: {},
            error: null
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let resetResult;
        await (0, _react.act)(async ()=>{
            resetResult = await result.current.resetPassword("test@example.com");
        });
        expect(resetResult).toEqual({
            error: null
        });
        expect(_supabase.default.auth.resetPasswordForEmail).toHaveBeenCalledWith("test@example.com");
    });
    it("resetPasswordエラーを適切に処理する", async ()=>{
        // パスワードリセットエラーのモック
        _supabase.default.auth.resetPasswordForEmail.mockResolvedValueOnce({
            data: {},
            error: mockAuthError
        });
        const { result } = (0, _react.renderHook)(()=>(0, _useAuth.useAuth)());
        let resetResult;
        await (0, _react.act)(async ()=>{
            resetResult = await result.current.resetPassword("test@example.com");
        });
        expect(resetResult).toEqual({
            error: mockAuthError
        });
    });
});

//# sourceMappingURL=data:application/json;base64,