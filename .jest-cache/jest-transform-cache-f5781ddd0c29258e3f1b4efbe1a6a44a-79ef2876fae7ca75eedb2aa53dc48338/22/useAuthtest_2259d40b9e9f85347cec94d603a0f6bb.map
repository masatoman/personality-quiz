{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/hooks/__tests__/useAuth.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useAuth } from '../useAuth';\nimport supabase from '@/lib/supabase';\n\n// モックの設定\njest.mock('@/lib/supabase', () => ({\n  auth: {\n    getSession: jest.fn(),\n    signUp: jest.fn(),\n    signInWithPassword: jest.fn(),\n    signOut: jest.fn(),\n    resetPasswordForEmail: jest.fn(),\n    onAuthStateChange: jest.fn(() => ({ \n      data: { subscription: { unsubscribe: jest.fn() } } \n    })),\n  }\n}));\n\ndescribe('useAuth', () => {\n  const mockUser = {\n    id: 'user-123',\n    email: 'test@example.com',\n    role: 'user'\n  };\n  \n  const mockSession = {\n    user: mockUser,\n    access_token: 'mock-access-token',\n    refresh_token: 'mock-refresh-token'\n  };\n  \n  const mockAuthError = {\n    message: '認証エラーが発生しました'\n  };\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // デフォルトのモック応答をセット\n    (supabase.auth.getSession as jest.Mock).mockResolvedValue({\n      data: { session: mockSession },\n      error: null\n    });\n  });\n  \n  it('初期状態はローディング中で情報はnullである', async () => {\n    const { result } = renderHook(() => useAuth());\n    \n    expect(result.current.loading).toBe(true);\n    expect(result.current.user).toBeNull();\n    expect(result.current.session).toBeNull();\n    expect(result.current.error).toBeNull();\n  });\n  \n  it('セッションが取得できるとユーザー情報がセットされる', async () => {\n    const { result, rerender } = renderHook(() => useAuth());\n    \n    // セッション取得をシミュレート\n    await act(async () => {\n      await Promise.resolve();\n      rerender();\n    });\n    \n    expect(result.current.loading).toBe(false);\n    expect(result.current.user).toEqual(mockUser);\n    expect(result.current.session).toEqual(mockSession);\n    expect(supabase.auth.getSession).toHaveBeenCalled();\n  });\n  \n  it('セッション取得エラーを適切に処理する', async () => {\n    // エラーを返すようにモックを設定\n    (supabase.auth.getSession as jest.Mock).mockResolvedValueOnce({\n      data: { session: null },\n      error: mockAuthError\n    });\n    \n    const { result, rerender } = renderHook(() => useAuth());\n    \n    // セッション取得をシミュレート\n    await act(async () => {\n      await Promise.resolve();\n      rerender();\n    });\n    \n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toEqual(mockAuthError);\n  });\n  \n  it('signUpメソッドが正しく動作する', async () => {\n    // サインアップ成功のモック\n    (supabase.auth.signUp as jest.Mock).mockResolvedValueOnce({\n      data: { user: mockUser },\n      error: null\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let signUpResult;\n    await act(async () => {\n      signUpResult = await result.current.signUp('test@example.com', 'password123');\n    });\n    \n    expect(signUpResult).toEqual({ user: mockUser, error: null });\n    expect(supabase.auth.signUp).toHaveBeenCalledWith({\n      email: 'test@example.com',\n      password: 'password123'\n    });\n  });\n  \n  it('signUpエラーを適切に処理する', async () => {\n    // サインアップエラーのモック\n    (supabase.auth.signUp as jest.Mock).mockResolvedValueOnce({\n      data: { user: null },\n      error: mockAuthError\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let signUpResult;\n    await act(async () => {\n      signUpResult = await result.current.signUp('test@example.com', 'password123');\n    });\n    \n    expect(signUpResult).toEqual({ user: null, error: mockAuthError });\n  });\n  \n  it('signInメソッドが正しく動作する', async () => {\n    // サインイン成功のモック\n    (supabase.auth.signInWithPassword as jest.Mock).mockResolvedValueOnce({\n      data: { user: mockUser },\n      error: null\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let signInResult;\n    await act(async () => {\n      signInResult = await result.current.signIn('test@example.com', 'password123');\n    });\n    \n    expect(signInResult).toEqual({ user: mockUser, error: null });\n    expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({\n      email: 'test@example.com',\n      password: 'password123'\n    });\n  });\n  \n  it('signInエラーを適切に処理する', async () => {\n    // サインインエラーのモック\n    (supabase.auth.signInWithPassword as jest.Mock).mockResolvedValueOnce({\n      data: { user: null },\n      error: mockAuthError\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let signInResult;\n    await act(async () => {\n      signInResult = await result.current.signIn('test@example.com', 'password123');\n    });\n    \n    expect(signInResult).toEqual({ user: null, error: mockAuthError });\n  });\n  \n  it('signOutメソッドが正しく動作する', async () => {\n    // サインアウト成功のモック\n    (supabase.auth.signOut as jest.Mock).mockResolvedValueOnce({\n      error: null\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    await act(async () => {\n      await result.current.signOut();\n    });\n    \n    expect(supabase.auth.signOut).toHaveBeenCalled();\n  });\n  \n  it('resetPasswordメソッドが正しく動作する', async () => {\n    // パスワードリセット成功のモック\n    (supabase.auth.resetPasswordForEmail as jest.Mock).mockResolvedValueOnce({\n      data: {},\n      error: null\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let resetResult;\n    await act(async () => {\n      resetResult = await result.current.resetPassword('test@example.com');\n    });\n    \n    expect(resetResult).toEqual({ error: null });\n    expect(supabase.auth.resetPasswordForEmail).toHaveBeenCalledWith('test@example.com');\n  });\n  \n  it('resetPasswordエラーを適切に処理する', async () => {\n    // パスワードリセットエラーのモック\n    (supabase.auth.resetPasswordForEmail as jest.Mock).mockResolvedValueOnce({\n      data: {},\n      error: mockAuthError\n    });\n    \n    const { result } = renderHook(() => useAuth());\n    \n    let resetResult;\n    await act(async () => {\n      resetResult = await result.current.resetPassword('test@example.com');\n    });\n    \n    expect(resetResult).toEqual({ error: mockAuthError });\n  });\n}); "],"names":["jest","mock","auth","getSession","fn","signUp","signInWithPassword","signOut","resetPasswordForEmail","onAuthStateChange","data","subscription","unsubscribe","describe","mockUser","id","email","role","mockSession","user","access_token","refresh_token","mockAuthError","message","beforeEach","clearAllMocks","supabase","mockResolvedValue","session","error","it","result","renderHook","useAuth","expect","current","loading","toBe","toBeNull","rerender","act","Promise","resolve","toEqual","toHaveBeenCalled","mockResolvedValueOnce","signUpResult","toHaveBeenCalledWith","password","signInResult","signIn","resetResult","resetPassword"],"mappings":"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"}