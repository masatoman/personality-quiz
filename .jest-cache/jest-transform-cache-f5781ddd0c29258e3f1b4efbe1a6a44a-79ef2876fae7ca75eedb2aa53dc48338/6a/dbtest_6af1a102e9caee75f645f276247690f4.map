{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/lib/__tests__/db.test.ts"],"sourcesContent":["import { saveResult, getStats, initDatabase, query } from '../db';\nimport fs from 'fs';\nimport { Pool } from 'pg';\n\n// fsをモック\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  mkdirSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  readFileSync: jest.fn()\n}));\n\n// pgをモック\njest.mock('pg', () => {\n  const mockClient = {\n    query: jest.fn(),\n    release: jest.fn()\n  };\n  \n  const mockPool = {\n    connect: jest.fn().mockResolvedValue(mockClient),\n    on: jest.fn()\n  };\n  \n  return {\n    Pool: jest.fn(() => mockPool)\n  };\n});\n\ndescribe('Database Utilities', () => {\n  beforeEach(() => {\n    // 各テストの前にモックをリセット\n    jest.clearAllMocks();\n  });\n  \n  describe('initDatabase', () => {\n    it('データディレクトリが存在しない場合に作成する', () => {\n      // データディレクトリが存在しないと設定\n      (fs.existsSync as jest.Mock).mockReturnValueOnce(false);\n      \n      // 関数を実行\n      const result = initDatabase();\n      \n      // ディレクトリが作成されたことを確認\n      expect(fs.mkdirSync).toHaveBeenCalledWith(expect.any(String), { recursive: true });\n      expect(result).toBe(true);\n    });\n    \n    it('結果ファイルが存在しない場合に作成する', () => {\n      // データディレクトリは存在するが結果ファイルは存在しないと設定\n      (fs.existsSync as jest.Mock)\n        .mockReturnValueOnce(true)    // データディレクトリ\n        .mockReturnValueOnce(false);  // 結果ファイル\n      \n      // 関数を実行\n      initDatabase();\n      \n      // 結果ファイルが作成されたことを確認\n      expect(fs.writeFileSync).toHaveBeenCalledWith(\n        expect.any(String),  // ファイルパス\n        '[]',                // 初期データ（空配列）\n        expect.any(Object)   // オプション\n      );\n    });\n    \n    it('統計ファイルが存在しない場合に作成する', () => {\n      // すべてのディレクトリとファイルが存在するが統計ファイルは存在しないと設定\n      (fs.existsSync as jest.Mock)\n        .mockReturnValueOnce(true)   // データディレクトリ\n        .mockReturnValueOnce(true)   // 結果ファイル\n        .mockReturnValueOnce(false); // 統計ファイル\n      \n      // 関数を実行\n      initDatabase();\n      \n      // 統計ファイルが作成されたことを確認（3回目の呼び出し）\n      expect(fs.writeFileSync).toHaveBeenCalledTimes(1);\n      expect(fs.writeFileSync).toHaveBeenCalledWith(\n        expect.any(String),  // ファイルパス\n        expect.stringContaining('\"total\":0'),  // 初期統計データ\n        expect.any(Object)   // オプション\n      );\n    });\n  });\n  \n  describe('saveResult', () => {\n    it('新しい結果を保存し統計を更新する', () => {\n      // ファイルの存在チェック\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      \n      // ファイル読み込みの戻り値を設定\n      (fs.readFileSync as jest.Mock)\n        .mockReturnValueOnce('[]')  // 結果ファイル（空配列）\n        .mockReturnValueOnce(JSON.stringify({  // 統計ファイル\n          giver: { count: 10, percentage: 34 },\n          matcher: { count: 7, percentage: 25 },\n          taker: { count: 12, percentage: 41 },\n          total: 29\n        }));\n      \n      // 関数を実行\n      const result = saveResult('giver');\n      \n      // 結果の確認\n      expect(result).toBe(true);\n      \n      // ファイルへの書き込みが行われたことを確認\n      expect(fs.writeFileSync).toHaveBeenCalledTimes(2);\n      \n      // 結果ファイルへの書き込み（1回目の呼び出し）\n      expect(fs.writeFileSync).toHaveBeenNthCalledWith(\n        1,\n        expect.any(String),  // ファイルパス\n        expect.stringContaining('\"type\":\"giver\"'),  // ギバータイプの結果\n        expect.any(Object)   // オプション\n      );\n      \n      // 統計ファイルへの書き込み（2回目の呼び出し）\n      expect(fs.writeFileSync).toHaveBeenNthCalledWith(\n        2,\n        expect.any(String),  // ファイルパス\n        expect.stringContaining('\"count\":11'),  // ギバーのカウントが1増加\n        expect.any(Object)   // オプション\n      );\n    });\n    \n    it('メモリ内モックデータにフォールバックする', () => {\n      // ファイル読み込みでエラーを発生させる\n      (fs.readFileSync as jest.Mock).mockImplementation(() => {\n        throw new Error('ファイル読み込みエラー');\n      });\n      \n      // 関数を実行\n      const result = saveResult('taker');\n      \n      // 結果の確認\n      expect(result).toBe(true);\n      \n      // 何度かリトライしてファイル書き込みを試みることを確認\n      expect(fs.writeFileSync).toHaveBeenCalled();\n    });\n  });\n  \n  describe('getStats', () => {\n    it('統計データを取得する', () => {\n      // 統計ファイルが存在し、データを含むと設定\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      \n      const mockStats = {\n        giver: { count: 10, percentage: 34 },\n        matcher: { count: 7, percentage: 25 },\n        taker: { count: 12, percentage: 41 },\n        total: 29\n      };\n      \n      // ファイル読み込みの戻り値を設定\n      (fs.readFileSync as jest.Mock).mockReturnValue(JSON.stringify(mockStats));\n      \n      // 関数を実行\n      const stats = getStats();\n      \n      // 結果の確認\n      expect(stats).toEqual(mockStats);\n      expect(stats.giver.count).toBe(10);\n      expect(stats.matcher.count).toBe(7);\n      expect(stats.taker.count).toBe(12);\n      expect(stats.total).toBe(29);\n    });\n    \n    it('ファイル読み込みに失敗した場合デフォルト値を返す', () => {\n      // ファイル読み込みでエラーを発生させる\n      (fs.readFileSync as jest.Mock).mockImplementation(() => {\n        throw new Error('ファイル読み込みエラー');\n      });\n      \n      // 関数を実行\n      const stats = getStats();\n      \n      // デフォルト値を返すことを確認\n      expect(stats).toBeDefined();\n      expect(stats.total).toBeGreaterThanOrEqual(0);\n    });\n  });\n  \n  describe('query', () => {\n    it('PostgreSQLクエリを実行する', async () => {\n      // モッククライアントのクエリ関数に戻り値を設定\n      const mockResult = { rows: [{ id: 1, name: 'Test' }] };\n      const mockClient = (new Pool() as any).connect();\n      mockClient.query.mockResolvedValue(mockResult);\n      \n      // テストクエリとパラメータ\n      const testQuery = 'SELECT * FROM users WHERE id = $1';\n      const testParams = [1];\n      \n      // 関数を実行\n      const result = await query(testQuery, testParams);\n      \n      // 結果の確認\n      expect(result).toEqual(mockResult);\n      \n      // クエリが呼ばれたことを確認\n      expect(mockClient.query).toHaveBeenCalledWith(testQuery, testParams);\n      \n      // クライアントがリリースされたことを確認\n      expect(mockClient.release).toHaveBeenCalled();\n    });\n    \n    it('クエリ実行中にエラーが発生した場合例外を投げる', async () => {\n      // モッククライアントのクエリ関数にエラーを設定\n      const mockClient = (new Pool() as any).connect();\n      mockClient.query.mockRejectedValue(new Error('データベースエラー'));\n      \n      // 関数を実行して例外を確認\n      await expect(query('SELECT * FROM users')).rejects.toThrow('データベースエラー');\n      \n      // クライアントがリリースされたことを確認\n      expect(mockClient.release).toHaveBeenCalled();\n    });\n  });\n}); "],"names":["jest","mock","existsSync","fn","mkdirSync","writeFileSync","readFileSync","mockClient","query","release","mockPool","connect","mockResolvedValue","on","Pool","describe","beforeEach","clearAllMocks","it","fs","mockReturnValueOnce","result","initDatabase","expect","toHaveBeenCalledWith","any","String","recursive","toBe","Object","toHaveBeenCalledTimes","stringContaining","mockReturnValue","JSON","stringify","giver","count","percentage","matcher","taker","total","saveResult","toHaveBeenNthCalledWith","mockImplementation","Error","toHaveBeenCalled","mockStats","stats","getStats","toEqual","toBeDefined","toBeGreaterThanOrEqual","mockResult","rows","id","name","testQuery","testParams","mockRejectedValue","rejects","toThrow"],"mappings":"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"}