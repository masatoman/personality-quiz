bb82a7abded05b647adb40b5c1243428
"use strict";
// fsをモック
jest.mock("fs", ()=>({
        existsSync: jest.fn(),
        mkdirSync: jest.fn(),
        writeFileSync: jest.fn(),
        readFileSync: jest.fn()
    }));
// pgをモック
jest.mock("pg", ()=>{
    const mockClient = {
        query: jest.fn(),
        release: jest.fn()
    };
    const mockPool = {
        connect: jest.fn().mockResolvedValue(mockClient),
        on: jest.fn()
    };
    return {
        Pool: jest.fn(()=>mockPool)
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _db = require("../db");
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _pg = require("pg");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("Database Utilities", ()=>{
    beforeEach(()=>{
        // 各テストの前にモックをリセット
        jest.clearAllMocks();
    });
    describe("initDatabase", ()=>{
        it("データディレクトリが存在しない場合に作成する", ()=>{
            // データディレクトリが存在しないと設定
            _fs.default.existsSync.mockReturnValueOnce(false);
            // 関数を実行
            const result = (0, _db.initDatabase)();
            // ディレクトリが作成されたことを確認
            expect(_fs.default.mkdirSync).toHaveBeenCalledWith(expect.any(String), {
                recursive: true
            });
            expect(result).toBe(true);
        });
        it("結果ファイルが存在しない場合に作成する", ()=>{
            // データディレクトリは存在するが結果ファイルは存在しないと設定
            _fs.default.existsSync.mockReturnValueOnce(true) // データディレクトリ
            .mockReturnValueOnce(false); // 結果ファイル
            // 関数を実行
            (0, _db.initDatabase)();
            // 結果ファイルが作成されたことを確認
            expect(_fs.default.writeFileSync).toHaveBeenCalledWith(expect.any(String), "[]", expect.any(Object) // オプション
            );
        });
        it("統計ファイルが存在しない場合に作成する", ()=>{
            // すべてのディレクトリとファイルが存在するが統計ファイルは存在しないと設定
            _fs.default.existsSync.mockReturnValueOnce(true) // データディレクトリ
            .mockReturnValueOnce(true) // 結果ファイル
            .mockReturnValueOnce(false); // 統計ファイル
            // 関数を実行
            (0, _db.initDatabase)();
            // 統計ファイルが作成されたことを確認（3回目の呼び出し）
            expect(_fs.default.writeFileSync).toHaveBeenCalledTimes(1);
            expect(_fs.default.writeFileSync).toHaveBeenCalledWith(expect.any(String), expect.stringContaining('"total":0'), expect.any(Object) // オプション
            );
        });
    });
    describe("saveResult", ()=>{
        it("新しい結果を保存し統計を更新する", ()=>{
            // ファイルの存在チェック
            _fs.default.existsSync.mockReturnValue(true);
            // ファイル読み込みの戻り値を設定
            _fs.default.readFileSync.mockReturnValueOnce("[]") // 結果ファイル（空配列）
            .mockReturnValueOnce(JSON.stringify({
                giver: {
                    count: 10,
                    percentage: 34
                },
                matcher: {
                    count: 7,
                    percentage: 25
                },
                taker: {
                    count: 12,
                    percentage: 41
                },
                total: 29
            }));
            // 関数を実行
            const result = (0, _db.saveResult)("giver");
            // 結果の確認
            expect(result).toBe(true);
            // ファイルへの書き込みが行われたことを確認
            expect(_fs.default.writeFileSync).toHaveBeenCalledTimes(2);
            // 結果ファイルへの書き込み（1回目の呼び出し）
            expect(_fs.default.writeFileSync).toHaveBeenNthCalledWith(1, expect.any(String), expect.stringContaining('"type":"giver"'), expect.any(Object) // オプション
            );
            // 統計ファイルへの書き込み（2回目の呼び出し）
            expect(_fs.default.writeFileSync).toHaveBeenNthCalledWith(2, expect.any(String), expect.stringContaining('"count":11'), expect.any(Object) // オプション
            );
        });
        it("メモリ内モックデータにフォールバックする", ()=>{
            // ファイル読み込みでエラーを発生させる
            _fs.default.readFileSync.mockImplementation(()=>{
                throw new Error("ファイル読み込みエラー");
            });
            // 関数を実行
            const result = (0, _db.saveResult)("taker");
            // 結果の確認
            expect(result).toBe(true);
            // 何度かリトライしてファイル書き込みを試みることを確認
            expect(_fs.default.writeFileSync).toHaveBeenCalled();
        });
    });
    describe("getStats", ()=>{
        it("統計データを取得する", ()=>{
            // 統計ファイルが存在し、データを含むと設定
            _fs.default.existsSync.mockReturnValue(true);
            const mockStats = {
                giver: {
                    count: 10,
                    percentage: 34
                },
                matcher: {
                    count: 7,
                    percentage: 25
                },
                taker: {
                    count: 12,
                    percentage: 41
                },
                total: 29
            };
            // ファイル読み込みの戻り値を設定
            _fs.default.readFileSync.mockReturnValue(JSON.stringify(mockStats));
            // 関数を実行
            const stats = (0, _db.getStats)();
            // 結果の確認
            expect(stats).toEqual(mockStats);
            expect(stats.giver.count).toBe(10);
            expect(stats.matcher.count).toBe(7);
            expect(stats.taker.count).toBe(12);
            expect(stats.total).toBe(29);
        });
        it("ファイル読み込みに失敗した場合デフォルト値を返す", ()=>{
            // ファイル読み込みでエラーを発生させる
            _fs.default.readFileSync.mockImplementation(()=>{
                throw new Error("ファイル読み込みエラー");
            });
            // 関数を実行
            const stats = (0, _db.getStats)();
            // デフォルト値を返すことを確認
            expect(stats).toBeDefined();
            expect(stats.total).toBeGreaterThanOrEqual(0);
        });
    });
    describe("query", ()=>{
        it("PostgreSQLクエリを実行する", async ()=>{
            // モッククライアントのクエリ関数に戻り値を設定
            const mockResult = {
                rows: [
                    {
                        id: 1,
                        name: "Test"
                    }
                ]
            };
            const mockClient = new _pg.Pool().connect();
            mockClient.query.mockResolvedValue(mockResult);
            // テストクエリとパラメータ
            const testQuery = "SELECT * FROM users WHERE id = $1";
            const testParams = [
                1
            ];
            // 関数を実行
            const result = await (0, _db.query)(testQuery, testParams);
            // 結果の確認
            expect(result).toEqual(mockResult);
            // クエリが呼ばれたことを確認
            expect(mockClient.query).toHaveBeenCalledWith(testQuery, testParams);
            // クライアントがリリースされたことを確認
            expect(mockClient.release).toHaveBeenCalled();
        });
        it("クエリ実行中にエラーが発生した場合例外を投げる", async ()=>{
            // モッククライアントのクエリ関数にエラーを設定
            const mockClient = new _pg.Pool().connect();
            mockClient.query.mockRejectedValue(new Error("データベースエラー"));
            // 関数を実行して例外を確認
            await expect((0, _db.query)("SELECT * FROM users")).rejects.toThrow("データベースエラー");
            // クライアントがリリースされたことを確認
            expect(mockClient.release).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,