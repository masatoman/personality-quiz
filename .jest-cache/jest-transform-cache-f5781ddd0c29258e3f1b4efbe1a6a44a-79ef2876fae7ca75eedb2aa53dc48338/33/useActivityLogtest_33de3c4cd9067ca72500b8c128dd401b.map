{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/hooks/__tests__/useActivityLog.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useActivityLog } from '../useActivityLog';\nimport { ActivityType } from '@/types/quiz';\nimport { calculateScoreChange } from '@/utils/score';\n\n// calculateScoreChangeをモック\njest.mock('@/utils/score', () => ({\n  calculateScoreChange: jest.fn()\n}));\n\n// グローバルfetchのモック\nglobal.fetch = jest.fn();\n\n// モック関数のタイプキャスト\nconst mockedFetch = global.fetch as jest.Mock;\nconst mockedCalculateScoreChange = calculateScoreChange as jest.Mock;\n\ndescribe('useActivityLog', () => {\n  beforeEach(() => {\n    // 各テスト前にモックをリセット\n    jest.clearAllMocks();\n    \n    // デフォルトのスコア変更をモック\n    mockedCalculateScoreChange.mockReturnValue({\n      giver: 5,\n      taker: 0,\n      matcher: 2\n    });\n    \n    // fetchのレスポンスをモック\n    mockedFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({ success: true })\n    });\n  });\n\n  it('新しい活動をログに記録する', async () => {\n    const userId = 123;\n    const { result } = renderHook(() => useActivityLog(userId));\n    \n    expect(result.current.activityLogs).toEqual([]);\n    expect(result.current.currentScores).toEqual({\n      giver: 0,\n      taker: 0,\n      matcher: 0\n    });\n    \n    // 新しい活動を記録\n    await act(async () => {\n      await result.current.logActivity('CREATE_CONTENT');\n    });\n    \n    // 活動ログにエントリが追加されたことを確認\n    expect(result.current.activityLogs.length).toBe(1);\n    expect(result.current.activityLogs[0]).toEqual(expect.objectContaining({\n      userId,\n      activityType: 'CREATE_CONTENT'\n    }));\n    \n    // スコアが更新されたことを確認\n    expect(result.current.currentScores).toEqual({\n      giver: 5,\n      taker: 0,\n      matcher: 2\n    });\n    \n    // APIが呼ばれたことを確認\n    expect(mockedFetch).toHaveBeenCalledWith(\n      expect.stringContaining('/log_activity.php'),\n      expect.objectContaining({\n        method: 'POST',\n        headers: expect.objectContaining({\n          'Content-Type': 'application/json'\n        })\n      })\n    );\n  });\n\n  it('複数の活動による累積スコアを計算する', async () => {\n    const userId = 123;\n    const { result } = renderHook(() => useActivityLog(userId));\n    \n    // コンテンツ作成活動のスコア変化\n    mockedCalculateScoreChange.mockReturnValueOnce({\n      giver: 5,\n      taker: 0,\n      matcher: 2\n    });\n    \n    // 最初の活動を記録\n    await act(async () => {\n      await result.current.logActivity('CREATE_CONTENT');\n    });\n    \n    // フィードバック提供活動のスコア変化\n    mockedCalculateScoreChange.mockReturnValueOnce({\n      giver: 3,\n      taker: 0,\n      matcher: 1\n    });\n    \n    // 2つ目の活動を記録\n    await act(async () => {\n      await result.current.logActivity('PROVIDE_FEEDBACK');\n    });\n    \n    // 累積スコアを確認\n    expect(result.current.currentScores).toEqual({\n      giver: 8,  // 5 + 3\n      taker: 0,  // 0 + 0\n      matcher: 3 // 2 + 1\n    });\n    \n    // 活動ログに2つのエントリがあることを確認\n    expect(result.current.activityLogs.length).toBe(2);\n  });\n\n  it('最近の活動履歴を取得する', async () => {\n    const userId = 123;\n    const mockActivities = [\n      {\n        id: 1,\n        userId,\n        activityType: 'CREATE_CONTENT',\n        scoreChange: { giver: 5, taker: 0, matcher: 2 },\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 2,\n        userId,\n        activityType: 'PROVIDE_FEEDBACK',\n        scoreChange: { giver: 3, taker: 0, matcher: 1 },\n        createdAt: new Date().toISOString()\n      }\n    ];\n    \n    // 活動履歴取得のレスポンスをモック\n    mockedFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ activities: mockActivities })\n    });\n    \n    const { result } = renderHook(() => useActivityLog(userId));\n    \n    // 活動履歴を取得\n    await act(async () => {\n      await result.current.getRecentActivities(5);\n    });\n    \n    // 返されたデータを確認\n    expect(result.current.activityLogs).toEqual(mockActivities);\n    \n    // APIが正しく呼ばれたことを確認\n    expect(mockedFetch).toHaveBeenCalledWith(\n      expect.stringContaining(`/get_activities.php?userId=${userId}&limit=5`)\n    );\n  });\n\n  it('API呼び出しが失敗した場合にエラーを投げる', async () => {\n    const userId = 123;\n    \n    // 失敗レスポンスをモック\n    mockedFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error'\n    });\n    \n    const { result } = renderHook(() => useActivityLog(userId));\n    \n    // logActivityが例外を投げることを確認\n    await expect(result.current.logActivity('CREATE_CONTENT')).rejects.toThrow();\n  });\n}); "],"names":["jest","mock","calculateScoreChange","fn","global","fetch","mockedFetch","mockedCalculateScoreChange","describe","beforeEach","clearAllMocks","mockReturnValue","giver","taker","matcher","mockResolvedValue","ok","json","success","it","userId","result","renderHook","useActivityLog","expect","current","activityLogs","toEqual","currentScores","act","logActivity","length","toBe","objectContaining","activityType","toHaveBeenCalledWith","stringContaining","method","headers","mockReturnValueOnce","mockActivities","id","scoreChange","createdAt","Date","toISOString","mockResolvedValueOnce","activities","getRecentActivities","status","statusText","rejects","toThrow"],"mappings":"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"}