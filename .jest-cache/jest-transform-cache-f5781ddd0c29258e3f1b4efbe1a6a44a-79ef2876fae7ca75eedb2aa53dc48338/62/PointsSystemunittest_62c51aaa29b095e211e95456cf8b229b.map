{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/__tests__/PointsSystem.unit.test.ts"],"sourcesContent":["import { consumePoints, fetchPointsBalance } from '../../utils/points';\n\n// モック関数をセットアップ\nglobal.fetch = jest.fn();\n\ndescribe('ポイントシステム', () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('ポイント消費関数', () => {\n    it('ポイント消費に成功した場合、成功レスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          success: true,\n          consumedPoints: 100,\n          remainingPoints: 400\n        })\n      });\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item', {\n        referenceId: 'item_1',\n        referenceType: 'item',\n        description: 'アイテム購入'\n      });\n      \n      // 正しいエンドポイントとパラメータでAPIが呼び出されているか検証\n      expect(global.fetch).toHaveBeenCalledWith('/api/points/consume', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          points: 100,\n          actionType: 'purchase_item',\n          referenceId: 'item_1',\n          referenceType: 'item',\n          description: 'アイテム購入'\n        }),\n      });\n      \n      // 成功レスポンスが正しく返されているか検証\n      expect(result).toEqual({\n        success: true,\n        consumedPoints: 100,\n        remainingPoints: 400\n      });\n    });\n\n    it('ポイント不足の場合、エラーレスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          success: false,\n          error: 'ポイント不足です',\n          currentPoints: 50,\n          requiredPoints: 100\n        })\n      });\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item');\n      \n      // エラーレスポンスが正しく返されているか検証\n      expect(result).toEqual({\n        success: false,\n        error: 'ポイント不足です',\n        currentPoints: 50,\n        requiredPoints: 100\n      });\n    });\n\n    it('通信エラーの場合、エラーレスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item');\n      \n      // エラーレスポンスが正しく返されているか検証\n      expect(result).toEqual({\n        success: false,\n        error: '通信エラーが発生しました'\n      });\n    });\n  });\n\n  describe('ポイント残高取得関数', () => {\n    it('ポイント残高取得に成功した場合、成功レスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          points: 500\n        })\n      });\n      \n      // ポイント残高取得関数を実行\n      const result = await fetchPointsBalance();\n      \n      // 正しいエンドポイントでAPIが呼び出されているか検証\n      expect(global.fetch).toHaveBeenCalledWith('/api/points/balance');\n      \n      // 成功レスポンスが正しく返されているか検証\n      expect(result).toEqual({\n        success: true,\n        points: 500\n      });\n    });\n\n    it('認証エラーの場合、エラーレスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          error: '認証が必要です'\n        })\n      });\n      \n      // ポイント残高取得関数を実行\n      const result = await fetchPointsBalance();\n      \n      // エラーレスポンスが正しく返されているか検証\n      expect(result).toEqual({\n        success: false,\n        error: '認証が必要です'\n      });\n    });\n  });\n}); "],"names":["global","fetch","jest","fn","describe","beforeEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","success","consumedPoints","remainingPoints","result","consumePoints","referenceId","referenceType","description","expect","toHaveBeenCalledWith","method","headers","body","JSON","stringify","points","actionType","toEqual","error","currentPoints","requiredPoints","mockRejectedValueOnce","Error","fetchPointsBalance"],"mappings":";;;;wBAAkD;AAElD,eAAe;AACfA,OAAOC,KAAK,GAAGC,KAAKC,EAAE;AAEtBC,SAAS,YAAY;IACnBC,WAAW;QACTH,KAAKI,aAAa;IACpB;IAEAF,SAAS,YAAY;QACnBG,GAAG,4BAA4B;YAC7B,cAAc;YACbP,OAAOC,KAAK,CAAeO,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTC,gBAAgB;wBAChBC,iBAAiB;oBACnB,CAAA;YACF;YAEA,cAAc;YACd,MAAMC,SAAS,MAAMC,IAAAA,qBAAa,EAAC,KAAK,iBAAiB;gBACvDC,aAAa;gBACbC,eAAe;gBACfC,aAAa;YACf;YAEA,mCAAmC;YACnCC,OAAOnB,OAAOC,KAAK,EAAEmB,oBAAoB,CAAC,uBAAuB;gBAC/DC,QAAQ;gBACRC,SAAS;oBACP,gBAAgB;gBAClB;gBACAC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,QAAQ;oBACRC,YAAY;oBACZX,aAAa;oBACbC,eAAe;oBACfC,aAAa;gBACf;YACF;YAEA,uBAAuB;YACvBC,OAAOL,QAAQc,OAAO,CAAC;gBACrBjB,SAAS;gBACTC,gBAAgB;gBAChBC,iBAAiB;YACnB;QACF;QAEAN,GAAG,yBAAyB;YAC1B,cAAc;YACbP,OAAOC,KAAK,CAAeO,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBACjBC,SAAS;wBACTkB,OAAO;wBACPC,eAAe;wBACfC,gBAAgB;oBAClB,CAAA;YACF;YAEA,cAAc;YACd,MAAMjB,SAAS,MAAMC,IAAAA,qBAAa,EAAC,KAAK;YAExC,wBAAwB;YACxBI,OAAOL,QAAQc,OAAO,CAAC;gBACrBjB,SAAS;gBACTkB,OAAO;gBACPC,eAAe;gBACfC,gBAAgB;YAClB;QACF;QAEAxB,GAAG,wBAAwB;YACzB,cAAc;YACbP,OAAOC,KAAK,CAAe+B,qBAAqB,CAAC,IAAIC,MAAM;YAE5D,cAAc;YACd,MAAMnB,SAAS,MAAMC,IAAAA,qBAAa,EAAC,KAAK;YAExC,wBAAwB;YACxBI,OAAOL,QAAQc,OAAO,CAAC;gBACrBjB,SAAS;gBACTkB,OAAO;YACT;QACF;IACF;IAEAzB,SAAS,cAAc;QACrBG,GAAG,8BAA8B;YAC/B,cAAc;YACbP,OAAOC,KAAK,CAAeO,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBACjBgB,QAAQ;oBACV,CAAA;YACF;YAEA,gBAAgB;YAChB,MAAMZ,SAAS,MAAMoB,IAAAA,0BAAkB;YAEvC,6BAA6B;YAC7Bf,OAAOnB,OAAOC,KAAK,EAAEmB,oBAAoB,CAAC;YAE1C,uBAAuB;YACvBD,OAAOL,QAAQc,OAAO,CAAC;gBACrBjB,SAAS;gBACTe,QAAQ;YACV;QACF;QAEAnB,GAAG,wBAAwB;YACzB,cAAc;YACbP,OAAOC,KAAK,CAAeO,qBAAqB,CAAC;gBAChDC,IAAI;gBACJC,MAAM,UAAa,CAAA;wBACjBmB,OAAO;oBACT,CAAA;YACF;YAEA,gBAAgB;YAChB,MAAMf,SAAS,MAAMoB,IAAAA,0BAAkB;YAEvC,wBAAwB;YACxBf,OAAOL,QAAQc,OAAO,CAAC;gBACrBjB,SAAS;gBACTkB,OAAO;YACT;QACF;IACF;AACF"}