{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/todo/TodoList.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { FaCheckCircle, FaRegCircle, FaPlus, FaTasks } from 'react-icons/fa';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  completed: boolean;\n  points: number;\n  type: 'daily' | 'weekly' | 'suggested' | 'custom';\n  dueDate?: Date;\n  createdAt: Date;\n}\n\ninterface TodoListProps {\n  giverScore?: number;\n  giverType?: 'giver' | 'matcher' | 'taker';\n  className?: string;\n  activityCounts?: {\n    CREATE_CONTENT: number;\n    PROVIDE_FEEDBACK: number;\n    CONSUME_CONTENT: number;\n    COMPLETE_QUIZ: number;\n  };\n}\n\nconst TodoList: React.FC<TodoListProps> = ({\n  giverScore = 0,\n  giverType = 'matcher',\n  className = '',\n  activityCounts = {\n    CREATE_CONTENT: 0,\n    PROVIDE_FEEDBACK: 0,\n    CONSUME_CONTENT: 0,\n    COMPLETE_QUIZ: 0\n  }\n}) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [showAddForm, setShowAddForm] = useState(false);\n\n  // ギバータイプと活動履歴に基づいて推奨タスクを生成\n  const generateSuggestedTasks = useCallback(() => {\n    const suggestedTasks: Task[] = [];\n    \n    // デイリータスク: 毎日のコンテンツ閲覧\n    suggestedTasks.push({\n      id: uuidv4(),\n      title: '教材を1つ閲覧する',\n      description: '毎日の学習習慣を維持しましょう',\n      completed: false,\n      points: 3,\n      type: 'daily',\n      createdAt: new Date()\n    });\n\n    // ギバータイプに応じたタスク\n    if (giverType === 'giver') {\n      // ギバータイプの場合は教材作成を推奨\n      if (activityCounts.CREATE_CONTENT < 1) {\n        suggestedTasks.push({\n          id: uuidv4(),\n          title: '教材を作成してみよう',\n          description: 'あなたの知識を共有することで学びが深まります',\n          completed: false,\n          points: 50,\n          type: 'suggested',\n          createdAt: new Date()\n        });\n      }\n    } else if (giverType === 'matcher') {\n      // マッチャータイプの場合はフィードバック提供を推奨\n      suggestedTasks.push({\n        id: uuidv4(),\n        title: '教材にフィードバックを提供する',\n        description: '他のユーザーの教材にコメントすることでポイントを獲得できます',\n        completed: false,\n        points: 10,\n        type: 'suggested',\n        createdAt: new Date()\n      });\n    } else {\n      // テイカータイプの場合はクイズ完了を推奨\n      suggestedTasks.push({\n        id: uuidv4(),\n        title: 'クイズに挑戦する',\n        description: 'クイズを完了してギバースコアを上げましょう',\n        completed: false,\n        points: 5,\n        type: 'suggested',\n        createdAt: new Date()\n      });\n    }\n\n    // ギバースコアに応じたタスク\n    if (giverScore < 10) {\n      suggestedTasks.push({\n        id: uuidv4(),\n        title: 'ギバー診断を完了する',\n        description: 'あなたのギバータイプを知りましょう',\n        completed: false,\n        points: 20,\n        type: 'suggested',\n        createdAt: new Date()\n      });\n    } else if (giverScore < 30) {\n      // 中級者向けタスク\n      suggestedTasks.push({\n        id: uuidv4(),\n        title: '週間学習目標を設定する',\n        description: '目標設定でモチベーションを維持しましょう',\n        completed: false,\n        points: 5,\n        type: 'weekly',\n        createdAt: new Date()\n      });\n    }\n\n    setTasks(suggestedTasks);\n  }, [giverType, giverScore, activityCounts]);\n\n  // ローカルストレージからタスクを読み込み\n  useEffect(() => {\n    const storedTasks = localStorage.getItem('shiftWithTasks');\n    if (storedTasks) {\n      try {\n        const parsedTasks = JSON.parse(storedTasks);\n        // 日付文字列をDateオブジェクトに変換\n        const tasksWithDates = parsedTasks.map((task: any) => ({\n          ...task,\n          createdAt: new Date(task.createdAt),\n          dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n        }));\n        setTasks(tasksWithDates);\n      } catch (error) {\n        console.error('Failed to parse stored tasks:', error);\n        setTasks([]);\n      }\n    } else {\n      // 初回表示時は推奨タスクを生成\n      generateSuggestedTasks();\n    }\n  }, [generateSuggestedTasks]);\n\n  // タスクが変更されたらローカルストレージに保存\n  useEffect(() => {\n    if (tasks.length > 0) {\n      localStorage.setItem('shiftWithTasks', JSON.stringify(tasks));\n    }\n  }, [tasks]);\n\n  // タスク完了状態を切り替え\n  const toggleTaskCompletion = (taskId: string) => {\n    setTasks(prevTasks => \n      prevTasks.map(task => \n        task.id === taskId \n          ? { ...task, completed: !task.completed } \n          : task\n      )\n    );\n  };\n\n  // 新しいタスクを追加\n  const addNewTask = () => {\n    if (!newTaskTitle.trim()) return;\n    \n    const newTask: Task = {\n      id: uuidv4(),\n      title: newTaskTitle.trim(),\n      completed: false,\n      points: 0,\n      type: 'custom',\n      createdAt: new Date()\n    };\n    \n    setTasks(prevTasks => [...prevTasks, newTask]);\n    setNewTaskTitle('');\n    setShowAddForm(false);\n  };\n\n  // タスクを削除\n  const deleteTask = (taskId: string) => {\n    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n  };\n\n  return (\n    <div className={`todo-list bg-white rounded-lg shadow-md p-5 ${className}`}>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"font-bold text-lg flex items-center\">\n          <FaTasks className=\"mr-2 text-blue-500\" />\n          今日のタスク\n        </h3>\n        <button\n          onClick={() => setShowAddForm(!showAddForm)}\n          className=\"text-sm text-blue-500 hover:text-blue-700 flex items-center\"\n        >\n          <FaPlus className=\"mr-1\" />\n          {showAddForm ? 'キャンセル' : 'タスク追加'}\n        </button>\n      </div>\n\n      {showAddForm && (\n        <div className=\"mb-4 flex\">\n          <input\n            type=\"text\"\n            value={newTaskTitle}\n            onChange={(e) => setNewTaskTitle(e.target.value)}\n            placeholder=\"新しいタスクを入力...\"\n            className=\"flex-1 p-2 border rounded-l focus:outline-none focus:ring-2 focus:ring-blue-300\"\n            onKeyDown={(e) => e.key === 'Enter' && addNewTask()}\n          />\n          <button\n            onClick={addNewTask}\n            className=\"bg-blue-500 text-white px-3 py-2 rounded-r hover:bg-blue-600\"\n          >\n            追加\n          </button>\n        </div>\n      )}\n\n      {tasks.length === 0 ? (\n        <div className=\"text-center py-6 text-gray-500\">\n          <p>タスクがありません</p>\n          <p className=\"text-sm mt-1\">「タスク追加」ボタンから新しいタスクを作成できます</p>\n        </div>\n      ) : (\n        <ul className=\"space-y-2\">\n          {tasks.map(task => (\n            <li \n              key={task.id} \n              className={`flex items-start p-3 rounded border ${\n                task.completed \n                  ? 'bg-gray-50 border-gray-200 text-gray-500' \n                  : 'bg-blue-50 border-blue-100'\n              }`}\n            >\n              <button \n                onClick={() => toggleTaskCompletion(task.id)}\n                className={`mt-1 mr-3 flex-shrink-0 ${\n                  task.completed ? 'text-green-500' : 'text-gray-400 hover:text-blue-500'\n                }`}\n              >\n                {task.completed ? <FaCheckCircle size={18} /> : <FaRegCircle size={18} />}\n              </button>\n              <div className=\"flex-1\">\n                <p className={`font-medium ${task.completed ? 'line-through' : ''}`}>\n                  {task.title}\n                  {task.points > 0 && (\n                    <span className=\"ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                      +{task.points}ポイント\n                    </span>\n                  )}\n                </p>\n                {task.description && (\n                  <p className=\"text-xs text-gray-600 mt-1\">{task.description}</p>\n                )}\n              </div>\n              {task.type === 'custom' && (\n                <button\n                  onClick={() => deleteTask(task.id)}\n                  className=\"text-gray-400 hover:text-red-500 ml-2\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M3 6h18\"></path>\n                    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n                  </svg>\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default TodoList; "],"names":["TodoList","giverScore","giverType","className","activityCounts","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","COMPLETE_QUIZ","tasks","setTasks","useState","newTaskTitle","setNewTaskTitle","showAddForm","setShowAddForm","generateSuggestedTasks","useCallback","suggestedTasks","push","id","uuidv4","title","description","completed","points","type","createdAt","Date","useEffect","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","tasksWithDates","map","task","dueDate","undefined","error","console","length","setItem","stringify","toggleTaskCompletion","taskId","prevTasks","addNewTask","trim","newTask","deleteTask","filter","div","h3","FaTasks","button","onClick","FaPlus","input","value","onChange","e","target","placeholder","onKeyDown","key","p","ul","li","FaCheckCircle","size","FaRegCircle","span","svg","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","path","d"],"mappings":"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"}