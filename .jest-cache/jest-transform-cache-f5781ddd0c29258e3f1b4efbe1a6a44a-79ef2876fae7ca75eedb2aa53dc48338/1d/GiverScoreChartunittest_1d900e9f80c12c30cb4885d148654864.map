{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/dashboard/__tests__/GiverScoreChart.unit.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport GiverScoreChart from '../GiverScoreChart';\n\n// recharts はテスト環境ではエラーになるため、モック化する\njest.mock('recharts', () => ({\n  LineChart: ({ children }: { children: React.ReactNode }) => (\n    <div data-testid=\"line-chart\">{children}</div>\n  ),\n  Line: () => <div data-testid=\"chart-line\" />,\n  XAxis: () => <div data-testid=\"x-axis\" />,\n  YAxis: () => <div data-testid=\"y-axis\" />,\n  CartesianGrid: () => <div data-testid=\"cartesian-grid\" />,\n  Tooltip: () => <div data-testid=\"tooltip\" />,\n  Legend: () => <div data-testid=\"legend\" />,\n  ResponsiveContainer: ({ children }: { children: React.ReactNode }) => (\n    <div data-testid=\"responsive-container\">{children}</div>\n  ),\n}));\n\ndescribe('GiverScoreChart', () => {\n  const mockData = [\n    { date: '2023-04-01', score: 0 },\n    { date: '2023-04-08', score: 10 },\n    { date: '2023-04-15', score: 20 },\n  ];\n\n  it('renders the chart with title', () => {\n    render(<GiverScoreChart data={mockData} />);\n    \n    expect(screen.getByText('ギバースコア推移')).toBeInTheDocument();\n    expect(screen.getByTestId('responsive-container')).toBeInTheDocument();\n    expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n  });\n\n  it('renders with default height', () => {\n    render(<GiverScoreChart data={mockData} />);\n    \n    const container = screen.getByTestId('responsive-container');\n    expect(container).toHaveAttribute('height', '300');\n  });\n\n  it('renders with custom height', () => {\n    render(<GiverScoreChart data={mockData} height={400} />);\n    \n    const container = screen.getByTestId('responsive-container');\n    expect(container).toHaveAttribute('height', '400');\n  });\n\n  it('uses sample data when no data is provided', () => {\n    render(<GiverScoreChart />);\n    \n    // サンプルデータが使用されていることを間接的に確認\n    expect(screen.getByTestId('responsive-container')).toBeInTheDocument();\n    expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n  });\n}); "],"names":["jest","mock","LineChart","children","div","data-testid","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","describe","mockData","date","score","it","render","GiverScoreChart","data","expect","screen","getByText","toBeInTheDocument","getByTestId","container","toHaveAttribute","height"],"mappings":";AAIA,mCAAmC;AACnCA,KAAKC,IAAI,CAAC,YAAY,IAAO,CAAA;QAC3BC,WAAW,CAAC,EAAEC,QAAQ,EAAiC,iBACrD,qBAACC;gBAAIC,eAAY;0BAAcF;;QAEjCG,MAAM,kBAAM,qBAACF;gBAAIC,eAAY;;QAC7BE,OAAO,kBAAM,qBAACH;gBAAIC,eAAY;;QAC9BG,OAAO,kBAAM,qBAACJ;gBAAIC,eAAY;;QAC9BI,eAAe,kBAAM,qBAACL;gBAAIC,eAAY;;QACtCK,SAAS,kBAAM,qBAACN;gBAAIC,eAAY;;QAChCM,QAAQ,kBAAM,qBAACP;gBAAIC,eAAY;;QAC/BO,qBAAqB,CAAC,EAAET,QAAQ,EAAiC,iBAC/D,qBAACC;gBAAIC,eAAY;0BAAwBF;;IAE7C,CAAA;;;;;8DAlBkB;wBACa;wEACH;;;;;;AAkB5BU,SAAS,mBAAmB;IAC1B,MAAMC,WAAW;QACf;YAAEC,MAAM;YAAcC,OAAO;QAAE;QAC/B;YAAED,MAAM;YAAcC,OAAO;QAAG;QAChC;YAAED,MAAM;YAAcC,OAAO;QAAG;KACjC;IAEDC,GAAG,gCAAgC;QACjCC,IAAAA,cAAM,gBAAC,qBAACC,wBAAe;YAACC,MAAMN;;QAE9BO,OAAOC,cAAM,CAACC,SAAS,CAAC,aAAaC,iBAAiB;QACtDH,OAAOC,cAAM,CAACG,WAAW,CAAC,yBAAyBD,iBAAiB;QACpEH,OAAOC,cAAM,CAACG,WAAW,CAAC,eAAeD,iBAAiB;IAC5D;IAEAP,GAAG,+BAA+B;QAChCC,IAAAA,cAAM,gBAAC,qBAACC,wBAAe;YAACC,MAAMN;;QAE9B,MAAMY,YAAYJ,cAAM,CAACG,WAAW,CAAC;QACrCJ,OAAOK,WAAWC,eAAe,CAAC,UAAU;IAC9C;IAEAV,GAAG,8BAA8B;QAC/BC,IAAAA,cAAM,gBAAC,qBAACC,wBAAe;YAACC,MAAMN;YAAUc,QAAQ;;QAEhD,MAAMF,YAAYJ,cAAM,CAACG,WAAW,CAAC;QACrCJ,OAAOK,WAAWC,eAAe,CAAC,UAAU;IAC9C;IAEAV,GAAG,6CAA6C;QAC9CC,IAAAA,cAAM,gBAAC,qBAACC,wBAAe;QAEvB,2BAA2B;QAC3BE,OAAOC,cAAM,CAACG,WAAW,CAAC,yBAAyBD,iBAAiB;QACpEH,OAAOC,cAAM,CAACG,WAAW,CAAC,eAAeD,iBAAiB;IAC5D;AACF"}