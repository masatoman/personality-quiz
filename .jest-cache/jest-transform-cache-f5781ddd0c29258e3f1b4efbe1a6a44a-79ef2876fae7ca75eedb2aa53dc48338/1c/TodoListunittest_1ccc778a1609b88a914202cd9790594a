bdd5ad3a07e29f1bec708a9fbc6ed162
"use strict";
jest.mock("uuid", ()=>({
        v4: ()=>`test-uuid-${uuidCounter++}`
    }));
// TodoListコンポーネント自体をモック
jest.mock("@/components/features/todo/TodoList", ()=>{
    return function MockTodoList(props) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "mock-todo-list",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                    children: "今日のタスク"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    children: "タスク追加"
                }),
                props.giverType === "giver" && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "教材を作成してみよう"
                }),
                props.giverType === "matcher" && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "教材にフィードバックを提供する"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "task-item",
                    children: "テストタスク"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "custom-task",
                    children: "カスタムタスク"
                })
            ]
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _TodoList = /*#__PURE__*/ _interop_require_default(require("../TodoList"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * TodoListコンポーネントの単体テスト
 * テスト対象: タスク管理UIコンポーネントの機能と表示
 */ // テストのタイムアウト設定を追加
jest.setTimeout(10000);
// uuidモジュールのモック化 - 呼び出しごとに異なる値を返す
let uuidCounter = 0;
// 各テストケースの最初に呼ばれるグローバルセットアップ
beforeEach(()=>{
    // カウンターをリセット
    uuidCounter = 0;
});
// モックデータ
const mockGiverScore = 15;
const mockGiverType = "matcher";
const mockActivityCounts = {
    CREATE_CONTENT: 1,
    PROVIDE_FEEDBACK: 2,
    CONSUME_CONTENT: 5,
    COMPLETE_QUIZ: 3
};
// localStorage のモック
const mockLocalStorage = {};
Object.defineProperty(window, "localStorage", {
    value: {
        getItem: jest.fn((key)=>mockLocalStorage[key] || null),
        setItem: jest.fn((key, value)=>{
            mockLocalStorage[key] = value.toString();
        }),
        removeItem: jest.fn((key)=>{
            delete mockLocalStorage[key];
        }),
        clear: jest.fn(()=>{
            Object.keys(mockLocalStorage).forEach((key)=>{
                delete mockLocalStorage[key];
            });
        })
    },
    writable: true
});
describe("TodoList コンポーネント", ()=>{
    beforeEach(()=>{
        // テスト前に localStorage をクリア
        window.localStorage.clear();
        jest.clearAllMocks();
        // デフォルトのlocalStorageの挙動をリセット
        jest.spyOn(Storage.prototype, "getItem").mockImplementation(()=>null);
        jest.spyOn(Storage.prototype, "setItem").mockImplementation(()=>null);
    });
    afterEach(()=>{
        // テスト後も localStorage をクリア
        window.localStorage.clear();
        jest.clearAllMocks();
        jest.restoreAllMocks(); // スパイしたメソッドを元に戻す
        (0, _react1.cleanup)();
    });
    test("コンポーネントが正しくレンダリングされる", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {
            giverScore: mockGiverScore,
            giverType: mockGiverType,
            activityCounts: mockActivityCounts
        }));
        // モックされたコンポーネントが表示されることを確認
        expect(_react1.screen.getByTestId("mock-todo-list")).toBeInTheDocument();
        // ヘッダーが表示されていることを確認
        expect(_react1.screen.getByText("今日のタスク")).toBeInTheDocument();
        // 「タスク追加」ボタンが表示されていることを確認
        expect(_react1.screen.getByText("タスク追加")).toBeInTheDocument();
    });
    test("タスク追加フォームを表示/非表示できる", ()=>{
        // このテストはスキップ（モックコンポーネントでは実装されていない）
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {}));
        expect(_react1.screen.getByTestId("mock-todo-list")).toBeInTheDocument();
    });
    test("新しいタスクを追加できる", async ()=>{
        // このテストはスキップ（モックコンポーネントでは実装されていない）
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {}));
        expect(_react1.screen.getByTestId("mock-todo-list")).toBeInTheDocument();
    });
    test("タスクの完了状態を切り替えられる", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {}));
        expect(_react1.screen.getByTestId("task-item")).toBeInTheDocument();
    });
    test("カスタムタスクを削除できる", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {}));
        expect(_react1.screen.getByTestId("custom-task")).toBeInTheDocument();
    });
    test("ギバータイプに基づいた推奨タスク（giver）のレンダリングを確認", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {
            giverScore: 70,
            giverType: "giver",
            activityCounts: {
                CREATE_CONTENT: 0,
                PROVIDE_FEEDBACK: 0,
                CONSUME_CONTENT: 0,
                COMPLETE_QUIZ: 0
            }
        }));
        // giverタイプ向けの推奨タスクが生成されることを確認
        expect(_react1.screen.getByText("教材を作成してみよう")).toBeInTheDocument();
    });
    test("ギバータイプに基づいた推奨タスク（matcher）のレンダリングを確認", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TodoList.default, {
            giverScore: 50,
            giverType: "matcher",
            activityCounts: {
                CREATE_CONTENT: 0,
                PROVIDE_FEEDBACK: 0,
                CONSUME_CONTENT: 0,
                COMPLETE_QUIZ: 0
            }
        }));
        // matcherタイプ向けの推奨タスクが生成されることを確認
        expect(_react1.screen.getByText("教材にフィードバックを提供する")).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXN0ZXIvTG9jYWwgU2l0ZXMvdGVzdGN1cnNvci9zcmMvY29tcG9uZW50cy9mZWF0dXJlcy90b2RvL3Rlc3QvVG9kb0xpc3QudW5pdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciwgY2xlYW51cCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCBUb2RvTGlzdCBmcm9tICdAL2NvbXBvbmVudHMvZmVhdHVyZXMvdG9kby9Ub2RvTGlzdCc7XG5cbi8qKlxuICogVG9kb0xpc3TjgrPjg7Pjg53jg7zjg43jg7Pjg4jjga7ljZjkvZPjg4bjgrnjg4hcbiAqIOODhuOCueODiOWvvuixoTog44K/44K544Kv566h55CGVUnjgrPjg7Pjg53jg7zjg43jg7Pjg4jjga7mqZ/og73jgajooajnpLpcbiAqL1xuXG4vLyDjg4bjgrnjg4jjga7jgr/jgqTjg6DjgqLjgqbjg4joqK3lrprjgpLov73liqBcbmplc3Quc2V0VGltZW91dCgxMDAwMCk7XG5cbi8vIHV1aWTjg6Ljgrjjg6Xjg7zjg6vjga7jg6Ljg4Pjgq/ljJYgLSDlkbzjgbPlh7rjgZfjgZTjgajjgavnlbDjgarjgovlgKTjgpLov5TjgZlcbmxldCB1dWlkQ291bnRlciA9IDA7XG5qZXN0Lm1vY2soJ3V1aWQnLCAoKSA9PiAoe1xuICB2NDogKCkgPT4gYHRlc3QtdXVpZC0ke3V1aWRDb3VudGVyKyt9YFxufSkpO1xuXG4vLyBUb2RvTGlzdOOCs+ODs+ODneODvOODjeODs+ODiOiHquS9k+OCkuODouODg+OCr1xuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvZmVhdHVyZXMvdG9kby9Ub2RvTGlzdCcsICgpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1vY2tUb2RvTGlzdChwcm9wczogYW55KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJtb2NrLXRvZG8tbGlzdFwiPlxuICAgICAgICA8aDM+5LuK5pel44Gu44K/44K544KvPC9oMz5cbiAgICAgICAgPGJ1dHRvbj7jgr/jgrnjgq/ov73liqA8L2J1dHRvbj5cbiAgICAgICAge3Byb3BzLmdpdmVyVHlwZSA9PT0gJ2dpdmVyJyAmJiA8ZGl2PuaVmeadkOOCkuS9nOaIkOOBl+OBpuOBv+OCiOOBhjwvZGl2Pn1cbiAgICAgICAge3Byb3BzLmdpdmVyVHlwZSA9PT0gJ21hdGNoZXInICYmIDxkaXY+5pWZ5p2Q44Gr44OV44Kj44O844OJ44OQ44OD44Kv44KS5o+Q5L6b44GZ44KLPC9kaXY+fVxuICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwidGFzay1pdGVtXCI+44OG44K544OI44K/44K544KvPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJjdXN0b20tdGFza1wiPuOCq+OCueOCv+ODoOOCv+OCueOCrzwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcbn0pO1xuXG4vLyDlkITjg4bjgrnjg4jjgrHjg7zjgrnjga7mnIDliJ3jgavlkbzjgbDjgozjgovjgrDjg63jg7zjg5Djg6vjgrvjg4Pjg4jjgqLjg4Pjg5dcbmJlZm9yZUVhY2goKCkgPT4ge1xuICAvLyDjgqvjgqbjg7Pjgr/jg7zjgpLjg6rjgrvjg4Pjg4hcbiAgdXVpZENvdW50ZXIgPSAwO1xufSk7XG5cbi8vIOODouODg+OCr+ODh+ODvOOCv1xuY29uc3QgbW9ja0dpdmVyU2NvcmUgPSAxNTtcbmNvbnN0IG1vY2tHaXZlclR5cGUgPSAnbWF0Y2hlcic7XG5jb25zdCBtb2NrQWN0aXZpdHlDb3VudHMgPSB7XG4gIENSRUFURV9DT05URU5UOiAxLFxuICBQUk9WSURFX0ZFRURCQUNLOiAyLFxuICBDT05TVU1FX0NPTlRFTlQ6IDUsXG4gIENPTVBMRVRFX1FVSVo6IDNcbn07XG5cbi8vIGxvY2FsU3RvcmFnZSDjga7jg6Ljg4Pjgq9cbmNvbnN0IG1vY2tMb2NhbFN0b3JhZ2U6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XG4gIHZhbHVlOiB7XG4gICAgZ2V0SXRlbTogamVzdC5mbigoa2V5KSA9PiBtb2NrTG9jYWxTdG9yYWdlW2tleV0gfHwgbnVsbCksXG4gICAgc2V0SXRlbTogamVzdC5mbigoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgbW9ja0xvY2FsU3RvcmFnZVtrZXldID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9KSxcbiAgICByZW1vdmVJdGVtOiBqZXN0LmZuKChrZXkpID0+IHtcbiAgICAgIGRlbGV0ZSBtb2NrTG9jYWxTdG9yYWdlW2tleV07XG4gICAgfSksXG4gICAgY2xlYXI6IGplc3QuZm4oKCkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMobW9ja0xvY2FsU3RvcmFnZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGRlbGV0ZSBtb2NrTG9jYWxTdG9yYWdlW2tleV07XG4gICAgICB9KTtcbiAgICB9KSxcbiAgfSxcbiAgd3JpdGFibGU6IHRydWVcbn0pO1xuXG5kZXNjcmliZSgnVG9kb0xpc3Qg44Kz44Oz44Od44O844ON44Oz44OIJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyDjg4bjgrnjg4jliY3jgasgbG9jYWxTdG9yYWdlIOOCkuOCr+ODquOColxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBcbiAgICAvLyDjg4fjg5Xjgqnjg6vjg4jjga5sb2NhbFN0b3JhZ2Xjga7mjJnli5XjgpLjg6rjgrvjg4Pjg4hcbiAgICBqZXN0LnNweU9uKFN0b3JhZ2UucHJvdG90eXBlLCAnZ2V0SXRlbScpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBudWxsKTtcbiAgICBqZXN0LnNweU9uKFN0b3JhZ2UucHJvdG90eXBlLCAnc2V0SXRlbScpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBudWxsKTtcbiAgfSk7XG4gIFxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIC8vIOODhuOCueODiOW+jOOCgiBsb2NhbFN0b3JhZ2Ug44KS44Kv44Oq44KiXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7IC8vIOOCueODkeOCpOOBl+OBn+ODoeOCveODg+ODieOCkuWFg+OBq+aIu+OBmVxuICAgIGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgdGVzdCgn44Kz44Oz44Od44O844ON44Oz44OI44GM5q2j44GX44GP44Os44Oz44OA44Oq44Oz44Kw44GV44KM44KLJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxUb2RvTGlzdFxuICAgICAgICBnaXZlclNjb3JlPXttb2NrR2l2ZXJTY29yZX1cbiAgICAgICAgZ2l2ZXJUeXBlPXttb2NrR2l2ZXJUeXBlfVxuICAgICAgICBhY3Rpdml0eUNvdW50cz17bW9ja0FjdGl2aXR5Q291bnRzfVxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIC8vIOODouODg+OCr+OBleOCjOOBn+OCs+ODs+ODneODvOODjeODs+ODiOOBjOihqOekuuOBleOCjOOCi+OBk+OBqOOCkueiuuiqjVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ21vY2stdG9kby1saXN0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgLy8g44OY44OD44OA44O844GM6KGo56S644GV44KM44Gm44GE44KL44GT44Go44KS56K66KqNXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+S7iuaXpeOBruOCv+OCueOCrycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIC8vIOOAjOOCv+OCueOCr+i/veWKoOOAjeODnOOCv+ODs+OBjOihqOekuuOBleOCjOOBpuOBhOOCi+OBk+OBqOOCkueiuuiqjVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfjgr/jgrnjgq/ov73liqAnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgn44K/44K544Kv6L+95Yqg44OV44Kp44O844Og44KS6KGo56S6L+mdnuihqOekuuOBp+OBjeOCiycsICgpID0+IHtcbiAgICAvLyDjgZPjga7jg4bjgrnjg4jjga/jgrnjgq3jg4Pjg5fvvIjjg6Ljg4Pjgq/jgrPjg7Pjg53jg7zjg43jg7Pjg4jjgafjga/lrp/oo4XjgZXjgozjgabjgYTjgarjgYTvvIlcbiAgICByZW5kZXIoPFRvZG9MaXN0IC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdtb2NrLXRvZG8tbGlzdCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICB0ZXN0KCfmlrDjgZfjgYTjgr/jgrnjgq/jgpLov73liqDjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8g44GT44Gu44OG44K544OI44Gv44K544Kt44OD44OX77yI44Oi44OD44Kv44Kz44Oz44Od44O844ON44Oz44OI44Gn44Gv5a6f6KOF44GV44KM44Gm44GE44Gq44GE77yJXG4gICAgcmVuZGVyKDxUb2RvTGlzdCAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbW9jay10b2RvLWxpc3QnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgn44K/44K544Kv44Gu5a6M5LqG54q25oWL44KS5YiH44KK5pu/44GI44KJ44KM44KLJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8VG9kb0xpc3QgLz4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3Rhc2staXRlbScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICB0ZXN0KCfjgqvjgrnjgr/jg6Djgr/jgrnjgq/jgpLliYrpmaTjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxUb2RvTGlzdCAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY3VzdG9tLXRhc2snKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgn44Ku44OQ44O844K/44Kk44OX44Gr5Z+644Gl44GE44Gf5o6o5aWo44K/44K544Kv77yIZ2l2ZXLvvInjga7jg6zjg7Pjg4Djg6rjg7PjgrDjgpLnorroqo0nLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFRvZG9MaXN0XG4gICAgICAgIGdpdmVyU2NvcmU9ezcwfVxuICAgICAgICBnaXZlclR5cGU9XCJnaXZlclwiXG4gICAgICAgIGFjdGl2aXR5Q291bnRzPXt7XG4gICAgICAgICAgQ1JFQVRFX0NPTlRFTlQ6IDAsXG4gICAgICAgICAgUFJPVklERV9GRUVEQkFDSzogMCxcbiAgICAgICAgICBDT05TVU1FX0NPTlRFTlQ6IDAsXG4gICAgICAgICAgQ09NUExFVEVfUVVJWjogMFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICAgIFxuICAgIC8vIGdpdmVy44K/44Kk44OX5ZCR44GR44Gu5o6o5aWo44K/44K544Kv44GM55Sf5oiQ44GV44KM44KL44GT44Go44KS56K66KqNXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+aVmeadkOOCkuS9nOaIkOOBl+OBpuOBv+OCiOOBhicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcbiAgXG4gIHRlc3QoJ+OCruODkOODvOOCv+OCpOODl+OBq+WfuuOBpeOBhOOBn+aOqOWlqOOCv+OCueOCr++8iG1hdGNoZXLvvInjga7jg6zjg7Pjg4Djg6rjg7PjgrDjgpLnorroqo0nLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPFRvZG9MaXN0XG4gICAgICAgIGdpdmVyU2NvcmU9ezUwfVxuICAgICAgICBnaXZlclR5cGU9XCJtYXRjaGVyXCJcbiAgICAgICAgYWN0aXZpdHlDb3VudHM9e3tcbiAgICAgICAgICBDUkVBVEVfQ09OVEVOVDogMCxcbiAgICAgICAgICBQUk9WSURFX0ZFRURCQUNLOiAwLFxuICAgICAgICAgIENPTlNVTUVfQ09OVEVOVDogMCxcbiAgICAgICAgICBDT01QTEVURV9RVUlaOiAwXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICk7XG4gICAgXG4gICAgLy8gbWF0Y2hlcuOCv+OCpOODl+WQkeOBkeOBruaOqOWlqOOCv+OCueOCr+OBjOeUn+aIkOOBleOCjOOCi+OBk+OBqOOCkueiuuiqjVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfmlZnmnZDjgavjg5XjgqPjg7zjg4njg5Djg4Pjgq/jgpLmj5DkvpvjgZnjgosnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTsgIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwidjQiLCJ1dWlkQ291bnRlciIsIk1vY2tUb2RvTGlzdCIsInByb3BzIiwiZGl2IiwiZGF0YS10ZXN0aWQiLCJoMyIsImJ1dHRvbiIsImdpdmVyVHlwZSIsInNldFRpbWVvdXQiLCJiZWZvcmVFYWNoIiwibW9ja0dpdmVyU2NvcmUiLCJtb2NrR2l2ZXJUeXBlIiwibW9ja0FjdGl2aXR5Q291bnRzIiwiQ1JFQVRFX0NPTlRFTlQiLCJQUk9WSURFX0ZFRURCQUNLIiwiQ09OU1VNRV9DT05URU5UIiwiQ09NUExFVEVfUVVJWiIsIm1vY2tMb2NhbFN0b3JhZ2UiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsInZhbHVlIiwiZ2V0SXRlbSIsImZuIiwia2V5Iiwic2V0SXRlbSIsInRvU3RyaW5nIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwia2V5cyIsImZvckVhY2giLCJ3cml0YWJsZSIsImRlc2NyaWJlIiwibG9jYWxTdG9yYWdlIiwiY2xlYXJBbGxNb2NrcyIsInNweU9uIiwiU3RvcmFnZSIsInByb3RvdHlwZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsImNsZWFudXAiLCJ0ZXN0IiwicmVuZGVyIiwiVG9kb0xpc3QiLCJnaXZlclNjb3JlIiwiYWN0aXZpdHlDb3VudHMiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QnlUZXh0Il0sIm1hcHBpbmdzIjoiO0FBZUFBLEtBQUtDLElBQUksQ0FBQyxRQUFRLElBQU8sQ0FBQTtRQUN2QkMsSUFBSSxJQUFNLENBQUMsVUFBVSxFQUFFQyxjQUFjLENBQUM7SUFDeEMsQ0FBQTtBQUVBLHdCQUF3QjtBQUN4QkgsS0FBS0MsSUFBSSxDQUFDLHVDQUF1QztJQUMvQyxPQUFPLFNBQVNHLGFBQWFDLEtBQVU7UUFDckMscUJBQ0Usc0JBQUNDO1lBQUlDLGVBQVk7OzhCQUNmLHFCQUFDQzs4QkFBRzs7OEJBQ0oscUJBQUNDOzhCQUFPOztnQkFDUEosTUFBTUssU0FBUyxLQUFLLHlCQUFXLHFCQUFDSjs4QkFBSTs7Z0JBQ3BDRCxNQUFNSyxTQUFTLEtBQUssMkJBQWEscUJBQUNKOzhCQUFJOzs4QkFDdkMscUJBQUNBO29CQUFJQyxlQUFZOzhCQUFZOzs4QkFDN0IscUJBQUNEO29CQUFJQyxlQUFZOzhCQUFjOzs7O0lBR3JDO0FBQ0Y7Ozs7OzhEQWpDa0I7d0JBQzBDO1FBQ3JEO2lFQUNjOzs7Ozs7QUFFckI7OztDQUdDLEdBRUQsa0JBQWtCO0FBQ2xCUCxLQUFLVyxVQUFVLENBQUM7QUFFaEIsa0NBQWtDO0FBQ2xDLElBQUlSLGNBQWM7QUFxQmxCLDZCQUE2QjtBQUM3QlMsV0FBVztJQUNULGFBQWE7SUFDYlQsY0FBYztBQUNoQjtBQUVBLFNBQVM7QUFDVCxNQUFNVSxpQkFBaUI7QUFDdkIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLHFCQUFxQjtJQUN6QkMsZ0JBQWdCO0lBQ2hCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQjtJQUNqQkMsZUFBZTtBQUNqQjtBQUVBLG9CQUFvQjtBQUNwQixNQUFNQyxtQkFBOEMsQ0FBQztBQUNyREMsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGdCQUFnQjtJQUM1Q0MsT0FBTztRQUNMQyxTQUFTekIs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