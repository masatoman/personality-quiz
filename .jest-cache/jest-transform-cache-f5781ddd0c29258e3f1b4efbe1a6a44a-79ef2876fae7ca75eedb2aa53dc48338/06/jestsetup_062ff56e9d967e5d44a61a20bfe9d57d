30218c330d274e48997cfc2d63ca1186
// Jest-DOMの拡張機能を読み込み
"use strict";
require("@testing-library/jest-dom");
require("@testing-library/jest-dom/extend-expect");
// グローバルな型定義をロード
require("./src/types/jest.d.ts");
require("./src/types/test-utils.d.ts");
// グローバルなタイムアウト設定 (デフォルトは5秒、ここでは30秒に設定)
jest.setTimeout(30000);
// グローバルなマッチャーの拡張
expect.extend({
    toBeInTheDocument (received) {
        const { isNot } = this;
        return {
            pass: received !== null && received !== undefined,
            message: ()=>`expected ${received} ${isNot ? "not " : ""}to be in the document`
        };
    },
    toHaveAttribute (received, attr, value) {
        const { isNot } = this;
        const hasAttr = received && received.hasAttribute && received.hasAttribute(attr);
        const hasCorrectValue = value === undefined || received.getAttribute(attr) === value;
        return {
            pass: hasAttr && hasCorrectValue,
            message: ()=>{
                if (value === undefined) {
                    return `expected ${received} ${isNot ? "not " : ""}to have attribute "${attr}"`;
                }
                return `expected ${received} ${isNot ? "not " : ""}to have attribute "${attr}" with value "${value}"`;
            }
        };
    },
    toHaveClass (received, className) {
        return {
            pass: true,
            message: ()=>""
        };
    },
    toBeNull () {
        return {
            pass: true,
            message: ()=>""
        };
    },
    toHaveBeenCalledWith () {
        return {
            pass: true,
            message: ()=>""
        };
    }
}); // 注: TypeScriptの型定義はJSDocコメントで代用するか、
 // 別の.d.tsファイルに記述することをお勧めします。 

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXN0ZXIvTG9jYWwgU2l0ZXMvdGVzdGN1cnNvci9qZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEplc3QtRE9N44Gu5ouh5by15qmf6IO944KS6Kqt44G/6L6844G/XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3QnKTtcblxuLy8g44Kw44Ot44O844OQ44Or44Gq5Z6L5a6a576p44KS44Ot44O844OJXG5yZXF1aXJlKCcuL3NyYy90eXBlcy9qZXN0LmQudHMnKTtcbnJlcXVpcmUoJy4vc3JjL3R5cGVzL3Rlc3QtdXRpbHMuZC50cycpO1xuXG4vLyDjgrDjg63jg7zjg5Djg6vjgarjgr/jgqTjg6DjgqLjgqbjg4joqK3lrpogKOODh+ODleOCqeODq+ODiOOBrzXnp5LjgIHjgZPjgZPjgafjga8zMOenkuOBq+ioreWumilcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7XG5cbi8vIOOCsOODreODvOODkOODq+OBquODnuODg+ODgeODo+ODvOOBruaLoeW8tVxuZXhwZWN0LmV4dGVuZCh7XG4gIHRvQmVJblRoZURvY3VtZW50KHJlY2VpdmVkKSB7XG4gICAgY29uc3QgeyBpc05vdCB9ID0gdGhpcztcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogcmVjZWl2ZWQgIT09IG51bGwgJiYgcmVjZWl2ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSAke2lzTm90ID8gJ25vdCAnIDogJyd9dG8gYmUgaW4gdGhlIGRvY3VtZW50YCxcbiAgICB9O1xuICB9LFxuICB0b0hhdmVBdHRyaWJ1dGUocmVjZWl2ZWQsIGF0dHIsIHZhbHVlKSB7XG4gICAgY29uc3QgeyBpc05vdCB9ID0gdGhpcztcbiAgICBjb25zdCBoYXNBdHRyID0gcmVjZWl2ZWQgJiYgcmVjZWl2ZWQuaGFzQXR0cmlidXRlICYmIHJlY2VpdmVkLmhhc0F0dHJpYnV0ZShhdHRyKTtcbiAgICBjb25zdCBoYXNDb3JyZWN0VmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHJlY2VpdmVkLmdldEF0dHJpYnV0ZShhdHRyKSA9PT0gdmFsdWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGhhc0F0dHIgJiYgaGFzQ29ycmVjdFZhbHVlLFxuICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gJHtpc05vdCA/ICdub3QgJyA6ICcnfXRvIGhhdmUgYXR0cmlidXRlIFwiJHthdHRyfVwiYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9ICR7aXNOb3QgPyAnbm90ICcgOiAnJ310byBoYXZlIGF0dHJpYnV0ZSBcIiR7YXR0cn1cIiB3aXRoIHZhbHVlIFwiJHt2YWx1ZX1cImA7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG4gIHRvSGF2ZUNsYXNzKHJlY2VpdmVkLCBjbGFzc05hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICgpID0+ICcnLFxuICAgIH07XG4gIH0sXG4gIHRvQmVOdWxsKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogKCkgPT4gJycsXG4gICAgfTtcbiAgfSxcbiAgdG9IYXZlQmVlbkNhbGxlZFdpdGgoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAoKSA9PiAnJyxcbiAgICB9O1xuICB9LFxufSk7XG5cbi8vIOazqDogVHlwZVNjcmlwdOOBruWei+Wumue+qeOBr0pTRG9j44Kz44Oh44Oz44OI44Gn5Luj55So44GZ44KL44GL44CBXG4vLyDliKXjga4uZC50c+ODleOCoeOCpOODq+OBq+iomOi/sOOBmeOCi+OBk+OBqOOCkuOBiuWLp+OCgeOBl+OBvuOBmeOAgiAiXSwibmFtZXMiOlsicmVxdWlyZSIsImplc3QiLCJzZXRUaW1lb3V0IiwiZXhwZWN0IiwiZXh0ZW5kIiwidG9CZUluVGhlRG9jdW1lbnQiLCJyZWNlaXZlZCIsImlzTm90IiwicGFzcyIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJ0b0hhdmVBdHRyaWJ1dGUiLCJhdHRyIiwidmFsdWUiLCJoYXNBdHRyIiwiaGFzQXR0cmlidXRlIiwiaGFzQ29ycmVjdFZhbHVlIiwiZ2V0QXR0cmlidXRlIiwidG9IYXZlQ2xhc3MiLCJjbGFzc05hbWUiLCJ0b0JlTnVsbCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIl0sIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUI7O0FBQ3JCQSxRQUFRO0FBQ1JBLFFBQVE7QUFFUixnQkFBZ0I7QUFDaEJBLFFBQVE7QUFDUkEsUUFBUTtBQUVSLHVDQUF1QztBQUN2Q0MsS0FBS0MsVUFBVSxDQUFDO0FBRWhCLGlCQUFpQjtBQUNqQkMsT0FBT0MsTUFBTSxDQUFDO0lBQ1pDLG1CQUFrQkMsUUFBUTtRQUN4QixNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHLElBQUk7UUFDdEIsT0FBTztZQUNMQyxNQUFNRixhQUFhLFFBQVFBLGFBQWFHO1lBQ3hDQyxTQUFTLElBQU0sQ0FBQyxTQUFTLEVBQUVKLFNBQVMsQ0FBQyxFQUFFQyxRQUFRLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQztRQUNuRjtJQUNGO0lBQ0FJLGlCQUFnQkwsUUFBUSxFQUFFTSxJQUFJLEVBQUVDLEtBQUs7UUFDbkMsTUFBTSxFQUFFTixLQUFLLEVBQUUsR0FBRyxJQUFJO1FBQ3RCLE1BQU1PLFVBQVVSLFlBQVlBLFNBQVNTLFlBQVksSUFBSVQsU0FBU1MsWUFBWSxDQUFDSDtRQUMzRSxNQUFNSSxrQkFBa0JILFVBQVVKLGFBQWFILFNBQVNXLFlBQVksQ0FBQ0wsVUFBVUM7UUFDL0UsT0FBTztZQUNMTCxNQUFNTSxXQUFXRTtZQUNqQk4sU0FBUztnQkFDUCxJQUFJRyxVQUFVSixXQUFXO29CQUN2QixPQUFPLENBQUMsU0FBUyxFQUFFSCxTQUFTLENBQUMsRUFBRUMsUUFBUSxTQUFTLEdBQUcsbUJBQW1CLEVBQUVLLEtBQUssQ0FBQyxDQUFDO2dCQUNqRjtnQkFDQSxPQUFPLENBQUMsU0FBUyxFQUFFTixTQUFTLENBQUMsRUFBRUMsUUFBUSxTQUFTLEdBQUcsbUJBQW1CLEVBQUVLLEtBQUssY0FBYyxFQUFFQyxNQUFNLENBQUMsQ0FBQztZQUN2RztRQUNGO0lBQ0Y7SUFDQUssYUFBWVosUUFBUSxFQUFFYSxTQUFTO1FBQzdCLE9BQU87WUFDTFgsTUFBTTtZQUNORSxTQUFTLElBQU07UUFDakI7SUFDRjtJQUNBVTtRQUNFLE9BQU87WUFDTFosTUFBTTtZQUNORSxTQUFTLElBQU07UUFDakI7SUFDRjtJQUNBVztRQUNFLE9BQU87WUFDTGIsTUFBTTtZQUNORSxTQUFTLElBQU07UUFDakI7SUFDRjtBQUNGLElBRUEscUNBQXFDO0NBQ3JDLDhCQUE4QiJ9