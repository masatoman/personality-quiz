f255617d3a748b02f6cab7c5cc6ad2b0
"use strict";
// ActivitySummaryコンポーネントのAPIをモック
jest.mock("next/navigation", ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                prefetch: jest.fn()
            };
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _ActivitySummary = /*#__PURE__*/ _interop_require_default(require("../dashboard/ActivitySummary"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// フェッチのモック化
// @ts-ignore - fetch型の不一致を無視
global.fetch = jest.fn();
describe("ActivitySummary Component", ()=>{
    const mockUserId = "test-user-123";
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("ローディング状態が正しく表示されること", async ()=>{
        // フェッチがすぐには解決しないようにモック
        // @ts-ignore
        global.fetch.mockImplementation(()=>new Promise(()=>{}));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitySummary.default, {
            userId: mockUserId
        }));
        // ローディングインジケータ要素（animate-pulse）が表示されることを確認
        const loadingElements = document.querySelectorAll(".animate-pulse");
        expect(loadingElements.length).toBeGreaterThan(0);
    });
    it("エラー状態が正しく表示されること", async ()=>{
        // 失敗するフェッチをモック
        // @ts-ignore
        global.fetch.mockRejectedValueOnce(new Error("API error"));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitySummary.default, {
            userId: mockUserId
        }));
        // エラーメッセージが表示されるまで待機
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/エラーが発生しました/i)).toBeInTheDocument();
        });
    });
    it("データが正しく表示されること", async ()=>{
        // 成功するフェッチレスポンスをモック
        const mockData = {
            createdMaterials: 12,
            totalPoints: 1250,
            viewedMaterials: 48,
            createdMaterialsChange: 2,
            totalPointsChange: 150,
            viewedMaterialsChange: -3
        };
        // @ts-ignore
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>mockData
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitySummary.default, {
            userId: mockUserId
        }));
        // データが表示されるまで待機
        await (0, _react1.waitFor)(()=>{
            // 各データ項目が表示されていることを確認
            expect(_react1.screen.getByText("12")).toBeInTheDocument();
            expect(_react1.screen.getByText("1250")).toBeInTheDocument();
            expect(_react1.screen.getByText("48")).toBeInTheDocument();
        });
        // タイトルが正しく表示されていることを確認
        expect(_react1.screen.getByText("作成した教材")).toBeInTheDocument();
        expect(_react1.screen.getByText("獲得ポイント")).toBeInTheDocument();
        expect(_react1.screen.getByText("閲覧した教材")).toBeInTheDocument();
        // 前週比の変化が表示されていることを確認
        await (0, _react1.waitFor)(()=>{
            // 正の変化
            const positiveChanges = _react1.screen.getAllByText(/2/);
            expect(positiveChanges.length).toBeGreaterThan(0);
            // 正の変化
            const positivePointChanges = _react1.screen.getAllByText(/150/);
            expect(positivePointChanges.length).toBeGreaterThan(0);
            // 負の変化
            const negativeChanges = _react1.screen.getAllByText(/3/);
            expect(negativeChanges.length).toBeGreaterThan(0);
        });
    });
    it("APIが正しいURLで呼び出されること", async ()=>{
        // 成功するフェッチレスポンスをモック
        // @ts-ignore
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({})
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitySummary.default, {
            userId: mockUserId
        }));
        // APIが正しいURLとパラメータで呼び出されたか確認
        expect(global.fetch).toHaveBeenCalledWith(`/api/user/activity-summary?userId=${mockUserId}`);
    });
    it("データが存在しない場合は代替コンテンツが表示されること", async ()=>{
        // 空のレスポンスをモック
        // @ts-ignore
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>null
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ActivitySummary.default, {
            userId: mockUserId
        }));
        // ローディングが終了するまで待機
        await (0, _react1.waitFor)(()=>{
            // ローディング要素が消えることを確認
            const loadingElements = document.querySelectorAll(".animate-pulse");
            expect(loadingElements.length).toBe(0);
        });
        // 実際のコンポーネントの実装に合わせてテストを修正
        // ActivitySummaryがnullを返す代わりに何も表示しない場合
        // もしくはスケルトンローダーを表示し続ける場合は、
        // その実装に合わせたアサーションに変更する
        expect(document.body.textContent).not.toContain("作成した教材");
        expect(document.body.textContent).not.toContain("獲得ポイント");
        expect(document.body.textContent).not.toContain("閲覧した教材");
    });
});

//# sourceMappingURL=data:application/json;base64,