{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/__tests__/PointsSystem.playwright.test.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\n\ntest.describe('ポイントシステム', () => {\n  // テスト前に毎回ログインする\n  test.beforeEach(async ({ page }) => {\n    // アプリケーションにアクセス\n    await page.goto('http://localhost:3000/');\n    \n    // ログインページに移動（実際のパスに合わせて変更してください）\n    await page.goto('http://localhost:3000/login');\n    \n    // テスト用アカウントでログイン\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'testpassword');\n    await page.click('button[type=\"submit\"]');\n    \n    // ダッシュボードが表示されるまで待機\n    await page.waitForURL('**/dashboard');\n  });\n\n  test('ポイント残高が表示される', async ({ page }) => {\n    // ユーザーダッシュボードに移動\n    await page.goto('http://localhost:3000/dashboard');\n    \n    // ポイント残高の表示を待機\n    const pointsBalance = page.locator('.points-balance');\n    await expect(pointsBalance).toBeVisible();\n    \n    // 数値形式のポイントが表示されていることを確認\n    const pointsText = await pointsBalance.textContent();\n    expect(pointsText).toMatch(/\\d+/);\n  });\n\n  test('ポイント履歴が表示される', async ({ page }) => {\n    // ポイント履歴ページに移動\n    await page.goto('http://localhost:3000/points/history');\n    \n    // ポイント履歴リストの表示を待機\n    const historyList = page.locator('.points-history-list');\n    await expect(historyList).toBeVisible();\n    \n    // 少なくとも1つの履歴項目があることを確認\n    const historyItems = page.locator('.points-history-item');\n    await expect(historyItems).toHaveCount({ min: 1 });\n    \n    // 履歴項目に必要な情報が含まれていることを確認\n    const firstItem = historyItems.first();\n    await expect(firstItem.locator('.points-amount')).toBeVisible();\n    await expect(firstItem.locator('.action-type')).toBeVisible();\n    await expect(firstItem.locator('.timestamp')).toBeVisible();\n  });\n\n  test('教材完了でポイントが付与される', async ({ page }) => {\n    // 現在のポイント残高を取得\n    await page.goto('http://localhost:3000/dashboard');\n    const initialPointsElement = page.locator('.points-balance');\n    await expect(initialPointsElement).toBeVisible();\n    const initialPointsText = await initialPointsElement.textContent();\n    const initialPoints = parseInt(initialPointsText.replace(/[^0-9]/g, ''));\n    \n    // 教材ページに移動\n    await page.goto('http://localhost:3000/resources');\n    \n    // 最初の未完了教材を見つけてクリック\n    const resourceItems = page.locator('.resource-item:not(.completed)');\n    await expect(resourceItems).toHaveCount({ min: 1 });\n    await resourceItems.first().click();\n    \n    // 教材を完了としてマーク\n    await page.click('button.complete-resource');\n    \n    // 「完了しました」のような確認メッセージが表示されることを確認\n    await expect(page.locator('.completion-message')).toBeVisible();\n    \n    // ダッシュボードに戻る\n    await page.goto('http://localhost:3000/dashboard');\n    \n    // 更新されたポイント残高を取得\n    const updatedPointsElement = page.locator('.points-balance');\n    await expect(updatedPointsElement).toBeVisible();\n    const updatedPointsText = await updatedPointsElement.textContent();\n    const updatedPoints = parseInt(updatedPointsText.replace(/[^0-9]/g, ''));\n    \n    // ポイントが増えていることを確認\n    expect(updatedPoints).toBeGreaterThan(initialPoints);\n  });\n\n  test('ポイント不足でアイテム購入に失敗する', async ({ page }) => {\n    // 報酬ページに移動\n    await page.goto('http://localhost:3000/rewards');\n    \n    // 高価な報酬アイテムを見つけてクリック\n    const expensiveItems = page.locator('.reward-item:has(.price:text-matches(\"1000\"))');\n    await expect(expensiveItems).toHaveCount({ min: 1 });\n    await expensiveItems.first().click();\n    \n    // 購入ボタンをクリック\n    await page.click('button.purchase-reward');\n    \n    // ポイント不足のエラーメッセージが表示されることを確認\n    await expect(page.locator('.error-message')).toBeVisible();\n    const errorMessage = await page.locator('.error-message').textContent();\n    expect(errorMessage).toContain('ポイント不足');\n  });\n}); "],"names":["test","describe","beforeEach","page","goto","fill","click","waitForURL","pointsBalance","locator","expect","toBeVisible","pointsText","textContent","toMatch","historyList","historyItems","toHaveCount","min","firstItem","first","initialPointsElement","initialPointsText","initialPoints","parseInt","replace","resourceItems","updatedPointsElement","updatedPointsText","updatedPoints","toBeGreaterThan","expensiveItems","errorMessage","toContain"],"mappings":"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"}