{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/__tests__/UserProfile.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport UserProfile from '../UserProfile';\n\n// モックデータ\nconst mockUser = {\n  id: 'user123',\n  name: 'テストユーザー',\n  email: 'test@example.com',\n  profile: {\n    bio: '自己紹介文です',\n    giverScore: 350,\n    takerScore: 150,\n    matcherScore: 200,\n    level: 4,\n    joinedDate: '2022-06-01',\n    avatarUrl: '/avatars/default.png',\n    preferences: {\n      notifications: {\n        email: true,\n        push: false\n      },\n      privacy: {\n        showProfile: true,\n        showActivity: true\n      }\n    }\n  }\n};\n\n// モック関数\nconst mockUpdateProfile = jest.fn();\nconst mockUploadAvatar = jest.fn();\nconst mockFetchUserProfile = jest.fn().mockResolvedValue(mockUser);\n\n// コンテキストのモック\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: () => ({\n    user: { uid: 'user123', email: 'test@example.com' },\n    isAuthenticated: true,\n    checkPermission: (permission: string) => permission === 'editOwnProfile'\n  })\n}));\n\ndescribe('UserProfile コンポーネント', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('ユーザープロフィールを正しく表示する', async () => {\n    render(<UserProfile userId=\"user123\" />);\n    \n    // ユーザープロフィールデータがロードされるのを待機\n    await waitFor(() => {\n      expect(screen.getByText('テストユーザー')).toBeInTheDocument();\n    });\n    \n    // 基本情報が表示されていることを確認\n    expect(screen.getByText('test@example.com')).toBeInTheDocument();\n    expect(screen.getByText('自己紹介文です')).toBeInTheDocument();\n    expect(screen.getByText('レベル: 4')).toBeInTheDocument();\n    \n    // ギバースコアが表示されていることを確認\n    expect(screen.getByText('350')).toBeInTheDocument();\n    \n    // プロフィール画像が表示されていることを確認\n    const avatar = screen.getByAltText('ユーザーアバター');\n    expect(avatar).toBeInTheDocument();\n    expect(avatar).toHaveAttribute('src', '/avatars/default.png');\n  });\n\n  it('自分のプロフィールを編集できる', async () => {\n    render(<UserProfile userId=\"user123\" onUpdateProfile={mockUpdateProfile} />);\n    \n    // 編集ボタンをクリック\n    await waitFor(() => {\n      const editButton = screen.getByText('編集');\n      expect(editButton).toBeInTheDocument();\n      fireEvent.click(editButton);\n    });\n    \n    // 編集モードになることを確認\n    const bioInput = screen.getByLabelText('自己紹介');\n    expect(bioInput).toBeInTheDocument();\n    \n    // 自己紹介を編集\n    fireEvent.change(bioInput, { target: { value: '新しい自己紹介文です' } });\n    \n    // 保存ボタンをクリック\n    const saveButton = screen.getByText('保存');\n    fireEvent.click(saveButton);\n    \n    // 保存処理が呼び出されることを確認\n    await waitFor(() => {\n      expect(mockUpdateProfile).toHaveBeenCalledWith({\n        ...mockUser.profile,\n        bio: '新しい自己紹介文です'\n      });\n    });\n  });\n\n  it('他のユーザーのプロフィールは編集ボタンが表示されない', async () => {\n    // AuthContextのモックを上書き\n    jest.mock('@/contexts/AuthContext', () => ({\n      useAuth: () => ({\n        user: { uid: 'otherUser', email: 'other@example.com' },\n        isAuthenticated: true,\n        checkPermission: () => false\n      })\n    }), { virtual: true });\n    \n    render(<UserProfile userId=\"user123\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('テストユーザー')).toBeInTheDocument();\n    });\n    \n    // 編集ボタンが表示されないことを確認\n    expect(screen.queryByText('編集')).not.toBeInTheDocument();\n  });\n\n  it('プライバシー設定を変更できる', async () => {\n    render(<UserProfile userId=\"user123\" onUpdateProfile={mockUpdateProfile} />);\n    \n    // 設定タブをクリック\n    await waitFor(() => {\n      const settingsTab = screen.getByText('設定');\n      fireEvent.click(settingsTab);\n    });\n    \n    // プライバシー設定が表示されることを確認\n    const profileVisibilityToggle = screen.getByLabelText('プロフィール公開');\n    expect(profileVisibilityToggle).toBeInTheDocument();\n    \n    // 設定を変更\n    fireEvent.click(profileVisibilityToggle);\n    \n    // 保存ボタンをクリック\n    const saveButton = screen.getByText('設定を保存');\n    fireEvent.click(saveButton);\n    \n    // 保存処理が呼び出されることを確認\n    await waitFor(() => {\n      expect(mockUpdateProfile).toHaveBeenCalledWith({\n        ...mockUser.profile,\n        preferences: {\n          ...mockUser.profile.preferences,\n          privacy: {\n            ...mockUser.profile.preferences.privacy,\n            showProfile: false // トグルで反転\n          }\n        }\n      });\n    });\n  });\n\n  it('認証されていない場合はリダイレクトされる', async () => {\n    // AuthContextのモックを上書き\n    jest.mock('@/contexts/AuthContext', () => ({\n      useAuth: () => ({\n        user: null,\n        isAuthenticated: false,\n        checkPermission: () => false\n      })\n    }), { virtual: true });\n    \n    const mockNavigate = jest.fn();\n    jest.mock('next/navigation', () => ({\n      useRouter: () => ({\n        push: mockNavigate\n      })\n    }), { virtual: true });\n    \n    render(<UserProfile userId=\"user123\" />);\n    \n    // リダイレクトが呼び出されることを確認\n    await waitFor(() => {\n      expect(mockNavigate).toHaveBeenCalledWith('/auth/login?redirect=/profile/user123');\n    });\n  });\n}); "],"names":["jest","mock","useAuth","user","uid","email","isAuthenticated","checkPermission","permission","mockUser","id","name","profile","bio","giverScore","takerScore","matcherScore","level","joinedDate","avatarUrl","preferences","notifications","push","privacy","showProfile","showActivity","mockUpdateProfile","fn","mockUploadAvatar","mockFetchUserProfile","mockResolvedValue","describe","beforeEach","clearAllMocks","it","render","UserProfile","userId","waitFor","expect","screen","getByText","toBeInTheDocument","avatar","getByAltText","toHaveAttribute","onUpdateProfile","editButton","fireEvent","click","bioInput","getByLabelText","change","target","value","saveButton","toHaveBeenCalledWith","virtual","queryByText","not","settingsTab","profileVisibilityToggle","useRouter","mockNavigate"],"mappings":"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"}