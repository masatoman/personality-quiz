4294805a5c500551ebb46e2d02084278
"use strict";
// コンテキストのモック
jest.mock("@/contexts/AuthContext", ()=>({
        useAuth: ()=>({
                user: {
                    uid: "user123",
                    email: "test@example.com"
                },
                isAuthenticated: true,
                checkPermission: (permission)=>permission === "editOwnProfile"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _UserProfile = /*#__PURE__*/ _interop_require_default(require("../UserProfile"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// モックデータ
const mockUser = {
    id: "user123",
    name: "テストユーザー",
    email: "test@example.com",
    profile: {
        bio: "自己紹介文です",
        giverScore: 350,
        takerScore: 150,
        matcherScore: 200,
        level: 4,
        joinedDate: "2022-06-01",
        avatarUrl: "/avatars/default.png",
        preferences: {
            notifications: {
                email: true,
                push: false
            },
            privacy: {
                showProfile: true,
                showActivity: true
            }
        }
    }
};
// モック関数
const mockUpdateProfile = jest.fn();
const mockUploadAvatar = jest.fn();
const mockFetchUserProfile = jest.fn().mockResolvedValue(mockUser);
describe("UserProfile コンポーネント", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("ユーザープロフィールを正しく表示する", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProfile.default, {
            userId: "user123"
        }));
        // ユーザープロフィールデータがロードされるのを待機
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("テストユーザー")).toBeInTheDocument();
        });
        // 基本情報が表示されていることを確認
        expect(_react1.screen.getByText("test@example.com")).toBeInTheDocument();
        expect(_react1.screen.getByText("自己紹介文です")).toBeInTheDocument();
        expect(_react1.screen.getByText("レベル: 4")).toBeInTheDocument();
        // ギバースコアが表示されていることを確認
        expect(_react1.screen.getByText("350")).toBeInTheDocument();
        // プロフィール画像が表示されていることを確認
        const avatar = _react1.screen.getByAltText("ユーザーアバター");
        expect(avatar).toBeInTheDocument();
        expect(avatar).toHaveAttribute("src", "/avatars/default.png");
    });
    it("自分のプロフィールを編集できる", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProfile.default, {
            userId: "user123",
            onUpdateProfile: mockUpdateProfile
        }));
        // 編集ボタンをクリック
        await (0, _react1.waitFor)(()=>{
            const editButton = _react1.screen.getByText("編集");
            expect(editButton).toBeInTheDocument();
            _react1.fireEvent.click(editButton);
        });
        // 編集モードになることを確認
        const bioInput = _react1.screen.getByLabelText("自己紹介");
        expect(bioInput).toBeInTheDocument();
        // 自己紹介を編集
        _react1.fireEvent.change(bioInput, {
            target: {
                value: "新しい自己紹介文です"
            }
        });
        // 保存ボタンをクリック
        const saveButton = _react1.screen.getByText("保存");
        _react1.fireEvent.click(saveButton);
        // 保存処理が呼び出されることを確認
        await (0, _react1.waitFor)(()=>{
            expect(mockUpdateProfile).toHaveBeenCalledWith({
                ...mockUser.profile,
                bio: "新しい自己紹介文です"
            });
        });
    });
    it("他のユーザーのプロフィールは編集ボタンが表示されない", async ()=>{
        // AuthContextのモックを上書き
        jest.mock("@/contexts/AuthContext", ()=>({
                useAuth: ()=>({
                        user: {
                            uid: "otherUser",
                            email: "other@example.com"
                        },
                        isAuthenticated: true,
                        checkPermission: ()=>false
                    })
            }), {
            virtual: true
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProfile.default, {
            userId: "user123"
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText("テストユーザー")).toBeInTheDocument();
        });
        // 編集ボタンが表示されないことを確認
        expect(_react1.screen.queryByText("編集")).not.toBeInTheDocument();
    });
    it("プライバシー設定を変更できる", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProfile.default, {
            userId: "user123",
            onUpdateProfile: mockUpdateProfile
        }));
        // 設定タブをクリック
        await (0, _react1.waitFor)(()=>{
            const settingsTab = _react1.screen.getByText("設定");
            _react1.fireEvent.click(settingsTab);
        });
        // プライバシー設定が表示されることを確認
        const profileVisibilityToggle = _react1.screen.getByLabelText("プロフィール公開");
        expect(profileVisibilityToggle).toBeInTheDocument();
        // 設定を変更
        _react1.fireEvent.click(profileVisibilityToggle);
        // 保存ボタンをクリック
        const saveButton = _react1.screen.getByText("設定を保存");
        _react1.fireEvent.click(saveButton);
        // 保存処理が呼び出されることを確認
        await (0, _react1.waitFor)(()=>{
            expect(mockUpdateProfile).toHaveBeenCalledWith({
                ...mockUser.profile,
                preferences: {
                    ...mockUser.profile.preferences,
                    privacy: {
                        ...mockUser.profile.preferences.privacy,
                        showProfile: false // トグルで反転
                    }
                }
            });
        });
    });
    it("認証されていない場合はリダイレクトされる", async ()=>{
        // AuthContextのモックを上書き
        jest.mock("@/contexts/AuthContext", ()=>({
                useAuth: ()=>({
                        user: null,
                        isAuthenticated: false,
                        checkPermission: ()=>false
                    })
            }), {
            virtual: true
        });
        jest.mock("next/navigation", ()=>({
                useRouter: ()=>({
                        push: mockNavigate
                    })
            }), {
            virtual: true
        });
        const mockNavigate = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_UserProfile.default, {
            userId: "user123"
        }));
        // リダイレクトが呼び出されることを確認
        await (0, _react1.waitFor)(()=>{
            expect(mockNavigate).toHaveBeenCalledWith("/auth/login?redirect=/profile/user123");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,