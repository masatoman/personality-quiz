{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/api/rankings/weekly/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { pool, initPool } from '@/lib/db';\nimport { QueryResult } from 'pg';\nimport { unstable_cache } from 'next/cache';\n\ntype RankingUser = {\n  id: string;\n  username: string;\n  score: number;\n  rank: number;\n};\n\ntype RankingRow = {\n  user_id: string;\n  username: string;\n  total_score: number;\n};\n\n// ランキングデータ取得関数をキャッシュ化\nconst getWeeklyRankings = unstable_cache(\n  async () => {\n    try {\n      await initPool();\n      \n      // データベース接続テスト\n      const testResult = await pool.query('SELECT NOW()');\n      console.log('データベース接続テスト結果:', testResult.rows[0]);\n\n      // テーブル存在確認\n      const tableCheck = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.tables \n          WHERE table_schema = 'public' \n          AND table_name = 'quiz_results'\n        )\n      `);\n      \n      if (!tableCheck.rows[0].exists) {\n        throw new Error('quiz_resultsテーブルが存在しません');\n      }\n\n      console.log('quiz_resultsテーブルの存在を確認しました');\n\n      // インデックス確認と作成\n      const indexCheck = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM pg_indexes\n          WHERE schemaname = 'public'\n          AND tablename = 'quiz_results'\n          AND indexname = 'idx_quiz_results_created_at'\n        )\n      `);\n\n      if (!indexCheck.rows[0].exists) {\n        console.log('created_atのインデックスを作成します');\n        await pool.query(`\n          CREATE INDEX idx_quiz_results_created_at\n          ON quiz_results (created_at)\n        `);\n      }\n\n      // 最適化されたクエリ\n      const result = await pool.query(`\n        WITH WeeklyScores AS (\n          SELECT \n            user_id,\n            SUM(score) as total_score\n          FROM quiz_results\n          WHERE created_at >= NOW() - INTERVAL '7 days'\n          GROUP BY user_id\n        ),\n        RankedUsers AS (\n          SELECT \n            u.id as user_id,\n            u.username,\n            COALESCE(ws.total_score, 0) as total_score\n          FROM users u\n          LEFT JOIN WeeklyScores ws ON u.id = ws.user_id\n          WHERE ws.total_score > 0\n          ORDER BY ws.total_score DESC\n        )\n        SELECT *\n        FROM RankedUsers\n      `);\n\n      console.log('ランキングクエリ実行結果:', {\n        rowCount: result.rowCount ?? 0,\n        firstRow: result.rows[0],\n        lastRow: result.rows[result.rows.length - 1]\n      });\n\n      // データ変換\n      return result.rows.map((row: RankingRow, index: number) => ({\n        id: row.user_id,\n        username: row.username,\n        score: row.total_score,\n        rank: index + 1\n      }));\n    } catch (error) {\n      console.error('ランキングデータ取得中にエラーが発生しました:', error);\n      throw error;\n    }\n  },\n  ['weekly-rankings'],\n  { \n    revalidate: 300, // 5分\n    tags: ['rankings']\n  }\n);\n\nexport async function GET() {\n  try {\n    const rankings = await getWeeklyRankings();\n    \n    // 空のデータの場合の処理\n    if (!rankings || rankings.length === 0) {\n      return NextResponse.json(\n        { \n          data: [],\n          message: 'ランキングデータが存在しません',\n          timestamp: new Date().toISOString()\n        },\n        { status: 204 }\n      );\n    }\n\n    // 正常なレスポンス\n    return NextResponse.json({\n      data: rankings,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('ランキングの取得中にエラーが発生しました:', error);\n    if (error instanceof Error) {\n      console.error('エラーの詳細:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n    }\n\n    return NextResponse.json(\n      { \n        error: 'ランキングの取得に失敗しました',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n} "],"names":["GET","getWeeklyRankings","unstable_cache","initPool","testResult","pool","query","console","log","rows","tableCheck","exists","Error","indexCheck","result","rowCount","firstRow","lastRow","length","map","row","index","id","user_id","username","score","total_score","rank","error","revalidate","tags","rankings","NextResponse","json","data","message","timestamp","Date","toISOString","status","stack","name","details"],"mappings":";;;;+BA8GsBA;;;eAAAA;;;;oBA7GS;uBAEA;;;;;;AAe/B,sBAAsB;AACtB,MAAMC,oBAAoBC,IAAAA,qBAAc,EACtC;IACE,IAAI;QACF,MAAMC,IAAAA,YAAQ;QAEd,cAAc;QACd,MAAMC,aAAa,MAAMC,QAAI,CAACC,KAAK,CAAC;QACpCC,QAAQC,GAAG,CAAC,kBAAkBJ,WAAWK,IAAI,CAAC,EAAE;QAEhD,WAAW;QACX,MAAMC,aAAa,MAAML,QAAI,CAACC,KAAK,CAAC,CAAC;;;;;;MAMrC,CAAC;QAED,IAAI,CAACI,WAAWD,IAAI,CAAC,EAAE,CAACE,MAAM,EAAE;YAC9B,MAAM,IAAIC,MAAM;QAClB;QAEAL,QAAQC,GAAG,CAAC;QAEZ,cAAc;QACd,MAAMK,aAAa,MAAMR,QAAI,CAACC,KAAK,CAAC,CAAC;;;;;;;MAOrC,CAAC;QAED,IAAI,CAACO,WAAWJ,IAAI,CAAC,EAAE,CAACE,MAAM,EAAE;YAC9BJ,QAAQC,GAAG,CAAC;YACZ,MAAMH,QAAI,CAACC,KAAK,CAAC,CAAC;;;QAGlB,CAAC;QACH;QAEA,YAAY;QACZ,MAAMQ,SAAS,MAAMT,QAAI,CAACC,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;MAqBjC,CAAC;QAEDC,QAAQC,GAAG,CAAC,iBAAiB;YAC3BO,UAAUD,OAAOC,QAAQ,IAAI;YAC7BC,UAAUF,OAAOL,IAAI,CAAC,EAAE;YACxBQ,SAASH,OAAOL,IAAI,CAACK,OAAOL,IAAI,CAACS,MAAM,GAAG,EAAE;QAC9C;QAEA,QAAQ;QACR,OAAOJ,OAAOL,IAAI,CAACU,GAAG,CAAC,CAACC,KAAiBC,QAAmB,CAAA;gBAC1DC,IAAIF,IAAIG,OAAO;gBACfC,UAAUJ,IAAII,QAAQ;gBACtBC,OAAOL,IAAIM,WAAW;gBACtBC,MAAMN,QAAQ;YAChB,CAAA;IACF,EAAE,OAAOO,OAAO;QACdrB,QAAQqB,KAAK,CAAC,2BAA2BA;QACzC,MAAMA;IACR;AACF,GACA;IAAC;CAAkB,EACnB;IACEC,YAAY;IACZC,MAAM;QAAC;KAAW;AACpB;AAGK,eAAe9B;IACpB,IAAI;QACF,MAAM+B,WAAW,MAAM9B;QAEvB,cAAc;QACd,IAAI,CAAC8B,YAAYA,SAASb,MAAM,KAAK,GAAG;YACtC,OAAOc,qBAAY,CAACC,IAAI,CACtB;gBACEC,MAAM,EAAE;gBACRC,SAAS;gBACTC,WAAW,IAAIC,OAAOC,WAAW;YACnC,GACA;gBAAEC,QAAQ;YAAI;QAElB;QAEA,WAAW;QACX,OAAOP,qBAAY,CAACC,IAAI,CAAC;YACvBC,MAAMH;YACNK,WAAW,IAAIC,OAAOC,WAAW;QACnC;IACF,EAAE,OAAOV,OAAO;QACdrB,QAAQqB,KAAK,CAAC,yBAAyBA;QACvC,IAAIA,iBAAiBhB,OAAO;YAC1BL,QAAQqB,KAAK,CAAC,WAAW;gBACvBO,SAASP,MAAMO,OAAO;gBACtBK,OAAOZ,MAAMY,KAAK;gBAClBC,MAAMb,MAAMa,IAAI;YAClB;QACF;QAEA,OAAOT,qBAAY,CAACC,IAAI,CACtB;YACEL,OAAO;YACPc,SAASd,iBAAiBhB,QAAQgB,MAAMO,OAAO,GAAG;YAClDC,WAAW,IAAIC,OAAOC,WAAW;QACnC,GACA;YAAEC,QAAQ;QAAI;IAElB;AACF"}