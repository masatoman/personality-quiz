{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/utils/activity/UserActivityTracker.ts"],"sourcesContent":["import { ActivityType } from '@/types/learning';\nimport supabase from '@/lib/supabase';\n\n/**\n * ユーザー活動を表すインターフェイス\n */\nexport interface UserActivity {\n  userId: string;\n  activityType: ActivityType;\n  timestamp: Date;\n  details?: Record<string, any>;\n}\n\n/**\n * ユーザー活動追跡ユーティリティクラス\n * ユーザーの行動を追跡し、そのデータを保存・分析するための機能を提供\n */\nexport class UserActivityTracker {\n  /**\n   * 新しい活動を記録する\n   * @param userId ユーザーID\n   * @param activityType 活動タイプ\n   * @param details 活動の詳細情報（任意）\n   * @returns 記録された活動オブジェクト\n   */\n  static async trackActivity(\n    userId: string, \n    activityType: ActivityType, \n    details?: Record<string, any>\n  ): Promise<UserActivity> {\n    try {\n      const timestamp = new Date();\n      const activity: UserActivity = {\n        userId,\n        activityType,\n        timestamp,\n        details\n      };\n      \n      // 活動をデータベースに保存\n      const { data, error } = await supabase\n        .from('user_activities')\n        .insert({\n          user_id: userId,\n          activity_type: activityType,\n          timestamp: timestamp.toISOString(),\n          details: details || {}\n        });\n      \n      if (error) {\n        console.error('活動追跡エラー:', error);\n        throw new Error(`活動の記録に失敗しました: ${error.message}`);\n      }\n      \n      return activity;\n    } catch (error) {\n      console.error('活動追跡中に例外が発生しました:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * ユーザーの活動履歴を取得する\n   * @param userId ユーザーID\n   * @param fromDate 開始日（任意）\n   * @param toDate 終了日（任意）\n   * @returns 活動のリスト\n   */\n  static async getUserActivities(\n    userId: string, \n    fromDate?: Date, \n    toDate?: Date\n  ): Promise<UserActivity[]> {\n    try {\n      // 基本クエリを構築\n      let query = supabase\n        .from('user_activities')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false });\n      \n      // 日付範囲フィルターを追加（指定されている場合）\n      if (fromDate) {\n        query = query.gte('timestamp', fromDate.toISOString());\n      }\n      \n      if (toDate) {\n        query = query.lte('timestamp', toDate.toISOString());\n      }\n      \n      // クエリを実行\n      const { data, error } = await query;\n      \n      if (error) {\n        console.error('活動取得エラー:', error);\n        throw new Error(`活動履歴の取得に失敗しました: ${error.message}`);\n      }\n      \n      // データベースの結果をUserActivity形式に変換\n      return (data || []).map(item => ({\n        userId: item.user_id,\n        activityType: item.activity_type as ActivityType,\n        timestamp: new Date(item.timestamp),\n        details: item.details\n      }));\n    } catch (error) {\n      console.error('活動履歴取得中に例外が発生しました:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * ユーザーの最新活動を取得する\n   * @param userId ユーザーID\n   * @param activityType 特定の活動タイプ（任意）\n   * @returns 最新の活動、または見つからない場合はnull\n   */\n  static async getLatestActivity(\n    userId: string, \n    activityType?: ActivityType\n  ): Promise<UserActivity | null> {\n    try {\n      // 基本クエリを構築\n      let query = supabase\n        .from('user_activities')\n        .select('*')\n        .eq('user_id', userId)\n        .order('timestamp', { ascending: false })\n        .limit(1);\n      \n      // アクティビティタイプのフィルターを追加（指定されている場合）\n      if (activityType) {\n        query = query.eq('activity_type', activityType);\n      }\n      \n      // クエリを実行\n      const { data, error } = await query;\n      \n      if (error) {\n        console.error('最新活動取得エラー:', error);\n        throw new Error(`最新活動の取得に失敗しました: ${error.message}`);\n      }\n      \n      if (!data || data.length === 0) {\n        return null;\n      }\n      \n      // データベースの結果をUserActivity形式に変換\n      const item = data[0];\n      return {\n        userId: item.user_id,\n        activityType: item.activity_type as ActivityType,\n        timestamp: new Date(item.timestamp),\n        details: item.details\n      };\n    } catch (error) {\n      console.error('最新活動取得中に例外が発生しました:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 特定タイプの活動の回数をカウントする\n   * @param userId ユーザーID\n   * @param activityType 活動タイプ\n   * @param fromDate 開始日（任意）\n   * @param toDate 終了日（任意）\n   * @returns 活動回数\n   */\n  static async getActivityCount(\n    userId: string, \n    activityType: ActivityType,\n    fromDate?: Date,\n    toDate?: Date\n  ): Promise<number> {\n    try {\n      // 基本クエリを構築\n      let query = supabase\n        .from('user_activities')\n        .select('id', { count: 'exact' })\n        .eq('user_id', userId)\n        .eq('activity_type', activityType);\n      \n      // 日付範囲フィルターを追加（指定されている場合）\n      if (fromDate) {\n        query = query.gte('timestamp', fromDate.toISOString());\n      }\n      \n      if (toDate) {\n        query = query.lte('timestamp', toDate.toISOString());\n      }\n      \n      // クエリを実行\n      const { count, error } = await query;\n      \n      if (error) {\n        console.error('活動カウントエラー:', error);\n        throw new Error(`活動回数の取得に失敗しました: ${error.message}`);\n      }\n      \n      return count || 0;\n    } catch (error) {\n      console.error('活動カウント取得中に例外が発生しました:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * ユーザーの総活動量を集計する\n   * @param userId ユーザーID\n   * @returns 活動タイプ別の集計結果\n   */\n  static async getActivitySummary(userId: string): Promise<Record<string, any>> {\n    try {\n      // 各アクティビティタイプの集計を取得\n      const activityTypes: ActivityType[] = [\n        'complete_resource',\n        'start_resource',\n        'create_material',\n        'provide_feedback',\n        'daily_login',\n        'share_resource',\n        'quiz_complete'\n      ];\n      \n      const summary: Record<string, any> = {};\n      \n      // 各アクティビティタイプのカウントを取得\n      for (const type of activityTypes) {\n        const count = await this.getActivityCount(userId, type);\n        summary[`${type}_count`] = count;\n      }\n      \n      // ストリーク（連続ログイン）の計算\n      const { data, error } = await supabase\n        .from('user_streaks')\n        .select('current_streak, max_streak')\n        .eq('user_id', userId)\n        .single();\n      \n      if (!error && data) {\n        summary.current_streak = data.current_streak;\n        summary.max_streak = data.max_streak;\n      } else {\n        summary.current_streak = 0;\n        summary.max_streak = 0;\n      }\n      \n      // その他の統計情報を追加\n      // ユニークカテゴリ数\n      const { data: resourceData, error: resourceError } = await supabase\n        .from('user_resources')\n        .select('category')\n        .eq('user_id', userId)\n        .eq('completed', true);\n      \n      if (!resourceError && resourceData) {\n        const uniqueCategories = new Set(resourceData.map(item => item.category));\n        summary.unique_categories_count = uniqueCategories.size;\n      } else {\n        summary.unique_categories_count = 0;\n      }\n      \n      // 最後のクイズスコア\n      const { data: quizData, error: quizError } = await supabase\n        .from('quiz_results')\n        .select('score')\n        .eq('user_id', userId)\n        .order('completed_at', { ascending: false })\n        .limit(1);\n      \n      if (!quizError && quizData && quizData.length > 0) {\n        summary.last_score = quizData[0].score;\n      }\n      \n      return summary;\n    } catch (error) {\n      console.error('活動サマリー取得中に例外が発生しました:', error);\n      throw error;\n    }\n  }\n}\n"],"names":["UserActivityTracker","trackActivity","userId","activityType","details","timestamp","Date","activity","data","error","supabase","from","insert","user_id","activity_type","toISOString","console","Error","message","getUserActivities","fromDate","toDate","query","select","eq","order","ascending","gte","lte","map","item","getLatestActivity","limit","length","getActivityCount","count","getActivitySummary","activityTypes","summary","type","single","current_streak","max_streak","resourceData","resourceError","uniqueCategories","Set","category","unique_categories_count","size","quizData","quizError","last_score","score"],"mappings":"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"}