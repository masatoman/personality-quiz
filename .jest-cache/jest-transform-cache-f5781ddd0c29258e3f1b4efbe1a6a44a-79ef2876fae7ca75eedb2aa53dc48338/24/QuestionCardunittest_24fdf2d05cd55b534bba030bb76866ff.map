{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/quiz/test/QuestionCard.unit.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { QuestionCard } from '../QuestionCard';\nimport { QuizQuestion } from '@/types/quiz';\n\n// モックデータ\nconst mockQuestion: QuizQuestion = {\n  id: 1,\n  text: '学習スタイルに関する質問',\n  description: '以下の選択肢から最も当てはまるものを選んでください',\n  options: [\n    { \n      text: '選択肢1', \n      score: { giver: 2, taker: 0, matcher: 1 }, \n      description: '説明1' \n    },\n    { \n      text: '選択肢2', \n      score: { giver: 0, taker: 2, matcher: 1 }, \n      description: '説明2' \n    },\n  ],\n  category: 'visual'\n};\n\ndescribe('QuestionCard', () => {\n  // 基本的なレンダリングのテスト\n  test('コンポーネントが正しくレンダリングされる', () => {\n    const mockHandlers = {\n      onAnswer: jest.fn() as any\n    };\n\n    render(\n      <QuestionCard \n        question={mockQuestion}\n        currentQuestion={0}\n        totalQuestions={5}\n        onAnswer={mockHandlers.onAnswer}\n      />\n    );\n    \n    // 質問のテキストが表示されていることを確認\n    expect(screen.getByText(/学習スタイルに関する質問/)).toBeInTheDocument();\n    expect(screen.getByText(/以下の選択肢から最も当てはまるものを選んでください/)).toBeInTheDocument();\n    \n    // 質問番号が表示されていることを確認\n    expect(screen.getByText(/質問 1:/)).toBeInTheDocument();\n    \n    // 選択肢が表示されていることを確認\n    expect(screen.getByText('選択肢1')).toBeInTheDocument();\n    expect(screen.getByText('選択肢2')).toBeInTheDocument();\n    \n    // 選択肢の説明が表示されていることを確認\n    expect(screen.getByText('説明1')).toBeInTheDocument();\n    expect(screen.getByText('説明2')).toBeInTheDocument();\n  });\n\n  // 選択肢をクリックしたときのテスト\n  test('選択肢をクリックするとonAnswerが呼ばれる', () => {\n    const mockHandlers = {\n      onAnswer: jest.fn() as any\n    };\n\n    render(\n      <QuestionCard \n        question={mockQuestion}\n        currentQuestion={0}\n        totalQuestions={5}\n        onAnswer={mockHandlers.onAnswer}\n      />\n    );\n    \n    // 最初の選択肢をクリック\n    fireEvent.click(screen.getByText('選択肢1'));\n    \n    // onAnswerが適切な引数で呼ばれることを確認\n    expect(mockHandlers.onAnswer).toHaveBeenCalledWith(0);\n    \n    // 2番目の選択肢をクリック\n    fireEvent.click(screen.getByText('選択肢2'));\n    \n    // onAnswerが2回目も適切な引数で呼ばれることを確認\n    expect(mockHandlers.onAnswer).toHaveBeenCalledWith(1);\n  });\n\n  // 選択された選択肢のスタイルのテスト\n  test('選択された選択肢が強調表示される', () => {\n    const mockHandlers = {\n      onAnswer: jest.fn() as any\n    };\n\n    const { rerender } = render(\n      <QuestionCard \n        question={mockQuestion}\n        currentQuestion={0}\n        totalQuestions={5}\n        onAnswer={mockHandlers.onAnswer}\n      />\n    );\n    \n    // 最初はどの選択肢も選択されていない\n    // FaRegCheckCircleアイコンはsvgとして描画されるため、テキストコンテンツでは検出できない\n    // 代わりに選択された状態のクラスを持つ要素がないことを確認\n    const selectedOptions = document.querySelectorAll('.border-blue-500');\n    expect(selectedOptions.length).toBe(0);\n    \n    // selectedOptionを指定して再レンダリング\n    rerender(\n      <QuestionCard \n        question={mockQuestion}\n        currentQuestion={0}\n        totalQuestions={5}\n        onAnswer={mockHandlers.onAnswer}\n        selectedOption={0}\n      />\n    );\n    \n    // 選択された選択肢には特定のスタイルクラスが適用されていることを確認\n    const selectedOptionsAfter = document.querySelectorAll('.border-blue-500');\n    expect(selectedOptionsAfter.length).toBe(1);\n    \n    // 選択された選択肢のテキストが正しいことを確認\n    expect(selectedOptionsAfter[0].textContent).toContain('選択肢1');\n  });\n\n  // 説明のないオプションのテスト\n  test('説明のないオプションも正しく表示される', () => {\n    const questionWithoutDescription: QuizQuestion = {\n      id: 2,\n      text: '別の質問',\n      options: [\n        { \n          text: 'シンプルな選択肢', \n          score: { giver: 1, taker: 1, matcher: 1 } \n        },\n      ],\n      category: 'auditory'\n    };\n\n    const mockHandlers = {\n      onAnswer: jest.fn() as any\n    };\n\n    render(\n      <QuestionCard \n        question={questionWithoutDescription}\n        currentQuestion={1}\n        totalQuestions={5}\n        onAnswer={mockHandlers.onAnswer}\n      />\n    );\n    \n    // 質問が表示されていることを確認\n    expect(screen.getByText(/別の質問/)).toBeInTheDocument();\n    \n    // 選択肢が表示されていることを確認\n    expect(screen.getByText('シンプルな選択肢')).toBeInTheDocument();\n  });\n}); "],"names":["mockQuestion","id","text","description","options","score","giver","taker","matcher","category","describe","test","mockHandlers","onAnswer","jest","fn","render","QuestionCard","question","currentQuestion","totalQuestions","expect","screen","getByText","toBeInTheDocument","fireEvent","click","toHaveBeenCalledWith","rerender","selectedOptions","document","querySelectorAll","length","toBe","selectedOption","selectedOptionsAfter","textContent","toContain","questionWithoutDescription"],"mappings":"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"}