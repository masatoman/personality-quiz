{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/__tests__/PointsSystem.e2e.test.ts"],"sourcesContent":["import { test, expect, Page } from '@playwright/test';\nimport { PURCHASABLE_ITEMS } from '../../utils/points';\n\n// テスト用のモックAPIレスポンス\nconst MOCK_API_RESPONSES = {\n  login: {\n    success: true,\n    user: {\n      id: 'test-user-id',\n      name: 'テストユーザー',\n      email: 'test@example.com',\n      points: 500\n    }\n  },\n  pointsBalance: {\n    points: 500\n  },\n  pointsHistory: {\n    points: [\n      {\n        id: 'ph1',\n        userId: 'test-user-id',\n        points: 100,\n        actionType: 'complete_resource',\n        description: '教材「テスト教材1」を完了しました',\n        createdAt: new Date().toISOString(),\n        referenceId: 'resource-1',\n        referenceType: 'resource'\n      },\n      {\n        id: 'ph2',\n        userId: 'test-user-id',\n        points: 50,\n        actionType: 'complete_quiz',\n        description: 'クイズ「テストクイズ1」を完了しました',\n        createdAt: new Date(Date.now() - 86400000).toISOString(),\n        referenceId: 'quiz-1',\n        referenceType: 'quiz'\n      }\n    ],\n    totalPoints: 500,\n    count: 2\n  },\n  resources: [\n    {\n      id: 'resource-1',\n      title: 'テスト教材1',\n      description: 'テスト用の教材説明',\n      completed: false,\n      pointsReward: 100,\n      type: 'article'\n    },\n    {\n      id: 'resource-2',\n      title: 'テスト教材2',\n      description: 'テスト用の教材説明2',\n      completed: true,\n      pointsReward: 150,\n      type: 'video'\n    }\n  ],\n  completeResource: {\n    success: true,\n    points: 100,\n    totalPoints: 600,\n    message: '教材を完了し、100ポイントを獲得しました！'\n  },\n  rewards: [\n    {\n      id: 'reward-1',\n      title: 'テスト報酬1',\n      description: 'テスト用の安い報酬',\n      price: 100,\n      imageUrl: '/images/rewards/test1.png'\n    },\n    {\n      id: 'reward-2',\n      title: 'テスト報酬2',\n      description: 'テスト用の高価な報酬',\n      price: 1000,\n      imageUrl: '/images/rewards/test2.png'\n    }\n  ],\n  purchaseSuccess: {\n    success: true,\n    consumedPoints: 100,\n    remainingPoints: 400,\n    message: '報酬を購入しました！'\n  },\n  purchaseFailed: {\n    success: false,\n    error: 'ポイントが不足しています',\n    currentPoints: 500,\n    requiredPoints: 1000\n  }\n};\n\n/**\n * モックAPIレスポンスをセットアップ\n */\nasync function setupMockApi(page: Page) {\n  // APIリクエストをインターセプト\n  await page.route('**/api/auth/login', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.login)\n    });\n  });\n\n  await page.route('**/api/points/balance', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.pointsBalance)\n    });\n  });\n\n  await page.route('**/api/points/history*', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.pointsHistory)\n    });\n  });\n\n  await page.route('**/api/resources', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.resources)\n    });\n  });\n\n  await page.route('**/api/resources/*/complete', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.completeResource)\n    });\n  });\n\n  await page.route('**/api/rewards', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify(MOCK_API_RESPONSES.rewards)\n    });\n  });\n\n  // 報酬購入のAPIレスポンスをリクエストに応じて変更\n  await page.route('**/api/points/consume', async route => {\n    const request = route.request();\n    const postData = JSON.parse(await request.postData() || '{}');\n    \n    // 購入しようとしているポイント額に応じてレスポンスを変更\n    if (postData.points <= 500) {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(MOCK_API_RESPONSES.purchaseSuccess)\n      });\n    } else {\n      route.fulfill({\n        status: 400,\n        contentType: 'application/json',\n        body: JSON.stringify(MOCK_API_RESPONSES.purchaseFailed)\n      });\n    }\n  });\n}\n\n/**\n * テスト用にログイン処理を行う\n */\nasync function login(page: Page) {\n  await page.goto('/login');\n  await page.getByLabel('メールアドレス').fill('test@example.com');\n  await page.getByLabel('パスワード').fill('password');\n  await page.getByRole('button', { name: 'ログイン' }).click();\n  \n  // ダッシュボードにリダイレクトされるまで待機\n  await page.waitForURL('**/dashboard');\n}\n\ntest.describe('ポイントシステム E2Eテスト', () => {\n  test.beforeEach(async ({ page }) => {\n    // モックAPIのセットアップ\n    await setupMockApi(page);\n    \n    // ログイン\n    await login(page);\n  });\n\n  test('ダッシュボードでポイント残高が表示される', async ({ page }) => {\n    await page.goto('/dashboard');\n    \n    // ポイント残高の表示を確認\n    const pointsBalance = page.getByTestId('points-balance');\n    await expect(pointsBalance).toBeVisible();\n    await expect(pointsBalance).toContainText('500');\n  });\n\n  test('ポイント履歴が表示される', async ({ page }) => {\n    await page.goto('/points/history');\n    \n    // ポイント履歴の表示を確認\n    const historyList = page.getByTestId('points-history-list');\n    await expect(historyList).toBeVisible();\n    \n    // 履歴項目が正しく表示されているか確認\n    const historyItems = page.getByTestId('points-history-item');\n    await expect(historyItems).toHaveCount(2);\n    \n    // 最初の履歴項目を確認\n    const firstItem = historyItems.first();\n    await expect(firstItem).toContainText('教材「テスト教材1」を完了しました');\n    await expect(firstItem).toContainText('100');\n  });\n\n  test('教材を完了するとポイントが獲得できる', async ({ page }) => {\n    // 教材一覧ページに移動\n    await page.goto('/resources');\n    \n    // 未完了の教材をクリック\n    await page.getByText('テスト教材1').click();\n    \n    // 教材を完了としてマーク\n    await page.getByRole('button', { name: '完了' }).click();\n    \n    // 成功メッセージの表示を確認\n    const successMessage = page.getByText('教材を完了し、100ポイントを獲得しました！');\n    await expect(successMessage).toBeVisible();\n    \n    // ダッシュボードに戻ってポイントが増えているか確認\n    await page.goto('/dashboard');\n    const pointsBalance = page.getByTestId('points-balance');\n    await expect(pointsBalance).toContainText('600');\n  });\n\n  test('報酬を購入できる（ポイント足りる場合）', async ({ page }) => {\n    // 報酬ページに移動\n    await page.goto('/rewards');\n    \n    // 安価な報酬をクリック\n    await page.getByText('テスト報酬1').click();\n    \n    // 購入ボタンをクリック\n    await page.getByRole('button', { name: '購入する' }).click();\n    \n    // 確認ダイアログで確定\n    await page.getByRole('button', { name: '確定' }).click();\n    \n    // 成功メッセージの表示を確認\n    const successMessage = page.getByText('報酬を購入しました！');\n    await expect(successMessage).toBeVisible();\n    \n    // ポイントが減っているか確認\n    const pointsBalance = page.getByTestId('points-balance');\n    await expect(pointsBalance).toContainText('400');\n  });\n\n  test('ポイント不足で報酬購入に失敗する', async ({ page }) => {\n    // 報酬ページに移動\n    await page.goto('/rewards');\n    \n    // 高価な報酬をクリック\n    await page.getByText('テスト報酬2').click();\n    \n    // 購入ボタンをクリック\n    await page.getByRole('button', { name: '購入する' }).click();\n    \n    // 確認ダイアログで確定\n    await page.getByRole('button', { name: '確定' }).click();\n    \n    // エラーメッセージの表示を確認\n    const errorMessage = page.getByText('ポイントが不足しています');\n    await expect(errorMessage).toBeVisible();\n    \n    // 必要なポイント数が表示されているか確認\n    const requiredPoints = page.getByText('必要ポイント: 1000');\n    await expect(requiredPoints).toBeVisible();\n  });\n\n  test('購入可能なアイテム一覧が表示される', async ({ page }) => {\n    // 報酬ページに移動\n    await page.goto('/rewards');\n    \n    // 報酬アイテムが表示されているか確認\n    const rewardItems = page.getByTestId('reward-item');\n    await expect(rewardItems).toHaveCount(2);\n    \n    // ポイント価格が表示されているか確認\n    await expect(page.getByText('100 ポイント')).toBeVisible();\n    await expect(page.getByText('1000 ポイント')).toBeVisible();\n  });\n}); "],"names":["MOCK_API_RESPONSES","login","success","user","id","name","email","points","pointsBalance","pointsHistory","userId","actionType","description","createdAt","Date","toISOString","referenceId","referenceType","now","totalPoints","count","resources","title","completed","pointsReward","type","completeResource","message","rewards","price","imageUrl","purchaseSuccess","consumedPoints","remainingPoints","purchaseFailed","error","currentPoints","requiredPoints","setupMockApi","page","route","fulfill","status","contentType","body","JSON","stringify","request","postData","parse","goto","getByLabel","fill","getByRole","click","waitForURL","test","describe","beforeEach","getByTestId","expect","toBeVisible","toContainText","historyList","historyItems","toHaveCount","firstItem","first","getByText","successMessage","errorMessage","rewardItems"],"mappings":"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"}