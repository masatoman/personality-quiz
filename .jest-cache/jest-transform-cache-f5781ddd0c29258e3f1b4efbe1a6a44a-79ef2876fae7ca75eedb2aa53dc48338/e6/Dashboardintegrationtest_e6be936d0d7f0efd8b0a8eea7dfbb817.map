{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/dashboard/test/Dashboard.integration.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport DashboardPage from '../DashboardPage';\nimport { useAuth } from '@/hooks/useAuth';\n\n// 依存関係のモック\njest.mock('@/hooks/useAuth', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: jest.fn(),\n      prefetch: jest.fn(),\n    };\n  },\n}));\n\n// コンポーネントのモック\njest.mock('../ActivitySummary', () => {\n  return jest.fn(({ userId }) => (\n    <div data-testid=\"activity-summary\" data-user-id={userId}>\n      ActivitySummary コンポーネント\n    </div>\n  ));\n});\n\njest.mock('../GiverScoreChart', () => {\n  return jest.fn(({ userId }) => (\n    <div data-testid=\"giver-score-chart\" data-user-id={userId}>\n      GiverScoreChart コンポーネント\n    </div>\n  ));\n});\n\njest.mock('../ActivityTypeChart', () => {\n  return jest.fn(({ userId }) => (\n    <div data-testid=\"activity-type-chart\" data-user-id={userId}>\n      ActivityTypeChart コンポーネント\n    </div>\n  ));\n});\n\n// フェッチのモック化\n// @ts-ignore - fetch型の不一致を無視\nglobal.fetch = jest.fn();\n\ndescribe('Dashboard Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // デフォルトのAuthモック\n    (useAuth as jest.Mock).mockReturnValue({\n      user: { id: 'test-user-123', email: 'test@example.com' },\n      loading: false,\n    });\n    \n    // @ts-ignore\n    global.fetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({}),\n    });\n  });\n\n  it('認証済みユーザーがダッシュボードを閲覧できること', async () => {\n    render(<DashboardPage />);\n    \n    // ダッシュボードの見出しが表示されていることを確認\n    expect(screen.getByText('ダッシュボード')).toBeInTheDocument();\n    \n    // サブコンポーネントが適切にレンダリングされていることを確認\n    await waitFor(() => {\n      expect(screen.getByTestId('activity-summary')).toBeInTheDocument();\n      expect(screen.getByTestId('giver-score-chart')).toBeInTheDocument();\n      expect(screen.getByTestId('activity-type-chart')).toBeInTheDocument();\n    });\n    \n    // ユーザーIDが正しくサブコンポーネントに渡されていることを確認\n    expect(screen.getByTestId('activity-summary').getAttribute('data-user-id')).toBe('test-user-123');\n    expect(screen.getByTestId('giver-score-chart').getAttribute('data-user-id')).toBe('test-user-123');\n    expect(screen.getByTestId('activity-type-chart').getAttribute('data-user-id')).toBe('test-user-123');\n    \n    // ナビゲーションタブが表示されていることを確認\n    expect(screen.getByText('すべて')).toBeInTheDocument();\n    expect(screen.getByText('未完了')).toBeInTheDocument();\n    expect(screen.getByText('完了済み')).toBeInTheDocument();\n  });\n  \n  it('認証中のローディング状態が表示されること', async () => {\n    // 認証ローディング中\n    (useAuth as jest.Mock).mockReturnValue({\n      user: null,\n      loading: true,\n    });\n    \n    render(<DashboardPage />);\n    \n    // ローディングインジケータが表示されていることを確認\n    const loadingElement = document.querySelector('.animate-spin');\n    expect(loadingElement).toBeInTheDocument();\n    \n    // サブコンポーネントが表示されていないことを確認\n    expect(screen.queryByTestId('activity-summary')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('giver-score-chart')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('activity-type-chart')).not.toBeInTheDocument();\n  });\n  \n  it('未認証ユーザーにはログインメッセージが表示されること', async () => {\n    // 未認証状態\n    (useAuth as jest.Mock).mockReturnValue({\n      user: null,\n      loading: false,\n    });\n    \n    render(<DashboardPage />);\n    \n    // ログインが必要なメッセージが表示されていることを確認\n    expect(screen.getByText('ログインが必要です')).toBeInTheDocument();\n    \n    // サブコンポーネントが表示されていないことを確認\n    expect(screen.queryByTestId('activity-summary')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('giver-score-chart')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('activity-type-chart')).not.toBeInTheDocument();\n  });\n  \n  it('ユーザー名が正しく表示されること', async () => {\n    // Emailからユーザー名を抽出するテスト\n    (useAuth as jest.Mock).mockReturnValue({\n      user: { id: 'test-user-123', email: 'testuser@example.com' },\n      loading: false,\n    });\n    \n    render(<DashboardPage />);\n    \n    // メールアドレスから抽出したユーザー名が表示されていることを確認\n    await waitFor(() => {\n      expect(screen.getByText('testuser')).toBeInTheDocument();\n    });\n  });\n  \n  it('レコメンドセクションが表示されること', async () => {\n    render(<DashboardPage />);\n    \n    // レコメンドセクションが表示されていることを確認\n    expect(screen.getByText('今日のレコメンド')).toBeInTheDocument();\n    \n    // レコメンドアイテムが表示されていることを確認\n    expect(screen.getByText('英語学習の基本ガイド')).toBeInTheDocument();\n    expect(screen.getByText('文法マスターへの道')).toBeInTheDocument();\n    expect(screen.getByText('効果的な単語学習法')).toBeInTheDocument();\n  });\n  \n  it('最近の活動が表示されること', async () => {\n    render(<DashboardPage />);\n    \n    // 最近の活動セクションが表示されていることを確認\n    expect(screen.getByText('最近の活動')).toBeInTheDocument();\n    \n    // 活動アイテムが表示されていることを確認\n    expect(screen.getByText(/教材「英語リスニング上達のコツ」を作成しました/)).toBeInTheDocument();\n  });\n}); "],"names":["jest","mock","useAuth","fn","useRouter","push","prefetch","userId","div","data-testid","data-user-id","global","fetch","describe","beforeEach","clearAllMocks","mockReturnValue","user","id","email","loading","mockResolvedValue","ok","json","it","render","DashboardPage","expect","screen","getByText","toBeInTheDocument","waitFor","getByTestId","getAttribute","toBe","loadingElement","document","querySelector","queryByTestId","not"],"mappings":"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"}