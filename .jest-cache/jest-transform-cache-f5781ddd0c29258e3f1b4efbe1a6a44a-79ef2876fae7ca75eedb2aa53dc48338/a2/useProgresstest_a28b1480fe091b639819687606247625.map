{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/hooks/__tests__/useProgress.test.tsx"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useProgress } from '../useProgress';\nimport { ActivityType } from '@/types/quiz';\n\n// グローバルfetchのモック\nglobal.fetch = jest.fn();\n\n// モック関数のタイプキャスト\nconst mockedFetch = global.fetch as jest.Mock;\n\n// レスポンスヘルパー関数\nfunction mockFetchResponse(data: any) {\n  mockedFetch.mockResolvedValueOnce({\n    ok: true,\n    json: async () => data\n  });\n}\n\ndescribe('useProgress', () => {\n  beforeEach(() => {\n    // 各テスト前にモックをリセット\n    jest.clearAllMocks();\n    \n    // デフォルトの進捗データ\n    const defaultProgress = {\n      userId: 123,\n      level: 1,\n      totalScore: 0,\n      badges: [],\n      streakDays: 0,\n      lastActivityDate: new Date().toISOString()\n    };\n    \n    // 初期データ取得のモック\n    mockFetchResponse(defaultProgress);\n  });\n\n  it('初期進捗データを正しく取得する', async () => {\n    const userId = 123;\n    \n    const { result, waitForNextUpdate } = renderHook(() => useProgress(userId));\n    \n    // 初期状態では空のプログレスオブジェクト\n    expect(result.current.progress).toEqual({\n      userId,\n      level: 1,\n      totalScore: 0,\n      badges: [],\n      streakDays: 0,\n      lastActivityDate: expect.any(Date)\n    });\n    \n    // APIが呼ばれたか確認\n    expect(mockedFetch).toHaveBeenCalledWith(\n      expect.stringContaining(`/get_progress.php?userId=${userId}`)\n    );\n  });\n\n  it('進捗を正しく更新する', async () => {\n    const userId = 123;\n    \n    // 進捗更新のモック\n    mockFetchResponse({\n      userId: 123,\n      level: 1,\n      totalScore: 50,\n      badges: [],\n      streakDays: 1,\n      lastActivityDate: new Date().toISOString()\n    });\n    \n    const { result } = renderHook(() => useProgress(userId));\n    \n    // 進捗更新のレスポンスをモック\n    mockFetchResponse({\n      success: true\n    });\n    \n    // 進捗を更新\n    await act(async () => {\n      await result.current.updateProgress('CREATE_CONTENT', 50);\n    });\n    \n    // 更新後の進捗を検証\n    expect(result.current.progress.totalScore).toBe(50);\n    \n    // APIが正しく呼ばれたか確認\n    expect(mockedFetch).toHaveBeenCalledWith(\n      expect.stringContaining('/update_progress.php'),\n      expect.objectContaining({\n        method: 'POST',\n        headers: expect.objectContaining({\n          'Content-Type': 'application/json'\n        }),\n        body: expect.any(String)\n      })\n    );\n  });\n\n  it('スコア閾値に達するとレベルアップする', async () => {\n    const userId = 123;\n    \n    // 初期進捗データをモック\n    mockFetchResponse({\n      userId: 123,\n      level: 2,\n      totalScore: 200,\n      badges: [],\n      streakDays: 0,\n      lastActivityDate: new Date().toISOString()\n    });\n    \n    const { result } = renderHook(() => useProgress(userId));\n    \n    // 進捗更新のレスポンスをモック\n    mockFetchResponse({\n      success: true\n    });\n    \n    // 大量のスコアで進捗を更新\n    await act(async () => {\n      await result.current.updateProgress('CREATE_CONTENT', 300);\n    });\n    \n    // レベルが上がっているか検証\n    expect(result.current.progress.level).toBeGreaterThan(2);\n  });\n\n  it('活動タイプに応じてバッジを獲得する', async () => {\n    const userId = 123;\n    \n    // バッジなしの初期進捗データをモック\n    mockFetchResponse({\n      userId: 123,\n      level: 1,\n      totalScore: 0,\n      badges: [],\n      streakDays: 0,\n      lastActivityDate: new Date().toISOString()\n    });\n    \n    const { result } = renderHook(() => useProgress(userId));\n    \n    // 進捗更新のレスポンスをモック\n    mockFetchResponse({\n      success: true\n    });\n    \n    // バッジを獲得できる活動を実行\n    let updateResult;\n    await act(async () => {\n      updateResult = await result.current.updateProgress('CREATE_CONTENT', 100);\n    });\n    \n    // 新しいバッジが追加されたことを検証\n    if (updateResult && updateResult.newBadges.length > 0) {\n      expect(result.current.progress.badges.length).toBeGreaterThan(0);\n    }\n  });\n\n  it('API呼び出しが失敗した場合エラーが発生する', async () => {\n    const userId = 123;\n    \n    // 失敗レスポンスをモック\n    mockedFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error'\n    });\n    \n    const { result } = renderHook(() => useProgress(userId));\n    \n    // fetchProgress呼び出しでエラーが発生することを検証\n    await expect(result.current.fetchProgress()).rejects.toThrow();\n  });\n\n  it('連続ログイン日数に応じてストリークを記録する', async () => {\n    const userId = 123;\n    \n    // 前日のアクティビティを持つ進捗データをモック\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    mockFetchResponse({\n      userId: 123,\n      level: 1,\n      totalScore: 0,\n      badges: [],\n      streakDays: 1,\n      lastActivityDate: yesterday.toISOString()\n    });\n    \n    const { result } = renderHook(() => useProgress(userId));\n    \n    // 進捗更新のレスポンスをモック\n    mockFetchResponse({\n      success: true\n    });\n    \n    // 活動を実行してストリークを更新\n    await act(async () => {\n      await result.current.updateProgress('CONSUME_CONTENT', 10);\n    });\n    \n    // ストリーク日数が増えていることを検証\n    expect(result.current.progress.streakDays).toBeGreaterThanOrEqual(1);\n    expect(result.current.progress.lastActivityDate).toBeInstanceOf(Date);\n  });\n}); "],"names":["global","fetch","jest","fn","mockedFetch","mockFetchResponse","data","mockResolvedValueOnce","ok","json","describe","beforeEach","clearAllMocks","defaultProgress","userId","level","totalScore","badges","streakDays","lastActivityDate","Date","toISOString","it","result","waitForNextUpdate","renderHook","useProgress","expect","current","progress","toEqual","any","toHaveBeenCalledWith","stringContaining","success","act","updateProgress","toBe","objectContaining","method","headers","body","String","toBeGreaterThan","updateResult","newBadges","length","status","statusText","fetchProgress","rejects","toThrow","yesterday","setDate","getDate","toBeGreaterThanOrEqual","toBeInstanceOf"],"mappings":"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"}