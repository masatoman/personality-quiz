{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/todo/test/TodoList.unit.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport TodoList from '@/components/features/todo/TodoList';\n\n/**\n * TodoListコンポーネントの単体テスト\n * テスト対象: タスク管理UIコンポーネントの機能と表示\n */\n\n// テストのタイムアウト設定を追加\njest.setTimeout(10000);\n\n// uuidモジュールのモック化 - 呼び出しごとに異なる値を返す\nlet uuidCounter = 0;\njest.mock('uuid', () => ({\n  v4: () => `test-uuid-${uuidCounter++}`\n}));\n\n// 各テストケースの最初に呼ばれるグローバルセットアップ\nbeforeEach(() => {\n  // カウンターをリセット\n  uuidCounter = 0;\n});\n\n// モックデータ\nconst mockGiverScore = 15;\nconst mockGiverType = 'matcher';\nconst mockActivityCounts = {\n  CREATE_CONTENT: 1,\n  PROVIDE_FEEDBACK: 2,\n  CONSUME_CONTENT: 5,\n  COMPLETE_QUIZ: 3\n};\n\n// localStorage のモック\nconst mockLocalStorage: { [key: string]: string } = {};\nObject.defineProperty(window, 'localStorage', {\n  value: {\n    getItem: jest.fn((key) => mockLocalStorage[key] || null),\n    setItem: jest.fn((key, value) => {\n      mockLocalStorage[key] = value.toString();\n    }),\n    removeItem: jest.fn((key) => {\n      delete mockLocalStorage[key];\n    }),\n    clear: jest.fn(() => {\n      Object.keys(mockLocalStorage).forEach((key) => {\n        delete mockLocalStorage[key];\n      });\n    }),\n  },\n  writable: true\n});\n\ndescribe('TodoList コンポーネント', () => {\n  beforeEach(() => {\n    // テスト前に localStorage をクリア\n    window.localStorage.clear();\n    jest.clearAllMocks();\n    \n    // デフォルトのlocalStorageの挙動をリセット\n    jest.spyOn(Storage.prototype, 'getItem').mockImplementation(() => null);\n    jest.spyOn(Storage.prototype, 'setItem').mockImplementation(() => null);\n  });\n  \n  afterEach(() => {\n    // テスト後も localStorage をクリア\n    window.localStorage.clear();\n    jest.clearAllMocks();\n    jest.restoreAllMocks(); // スパイしたメソッドを元に戻す\n    cleanup();\n  });\n\n  test('コンポーネントが正しくレンダリングされる', () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation(() => {});\n    \n    // 最小限のレンダリングテスト\n    render(\n      <TodoList\n        giverScore={mockGiverScore}\n        giverType={mockGiverType}\n        activityCounts={mockActivityCounts}\n      />\n    );\n    \n    // ヘッダーが表示されていることを確認\n    expect(screen.getByText('今日のタスク')).toBeInTheDocument();\n    \n    // 「タスク追加」ボタンが表示されていることを確認\n    expect(screen.getByText('タスク追加')).toBeInTheDocument();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n\n  test('タスク追加フォームを表示/非表示できる', () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation(() => {});\n    \n    render(<TodoList />);\n    \n    // 初期状態ではフォームは非表示\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // フォームが表示される\n    expect(screen.getByPlaceholderText('新しいタスクを入力...')).toBeInTheDocument();\n    \n    // 「キャンセル」ボタンをクリック\n    fireEvent.click(screen.getByText('キャンセル'));\n    \n    // フォームが非表示になる\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n\n  test('新しいタスクを追加できる', async () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation(() => {});\n    \n    // React.useStateを監視してsetTasksの呼び出しを確認\n    const useStateSpy = jest.spyOn(React, 'useState');\n    \n    render(<TodoList />);\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // 新しいタスクを入力\n    const taskInput = screen.getByPlaceholderText('新しいタスクを入力...');\n    fireEvent.change(taskInput, { target: { value: '新しいテストタスク' } });\n    \n    // 「追加」ボタンをクリック\n    fireEvent.click(screen.getByText('追加'));\n    \n    // タスクが追加された効果を検証\n    expect(useStateSpy).toHaveBeenCalled();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n    useStateSpy.mockRestore();\n  });\n\n  test('タスクの完了状態を切り替えられる', async () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation(() => {});\n    \n    // テスト用のタスク配列を準備\n    const mockTask = {\n      id: 'test-task-id',\n      title: 'テストタスク',\n      completed: false,\n      points: 5,\n      type: 'daily',\n      createdAt: new Date().toISOString()\n    };\n    \n    // コンポーネントの初期状態を直接設定\n    const setTasksMock = jest.fn();\n    jest.spyOn(React, 'useState').mockImplementationOnce(() => [[mockTask], setTasksMock]);\n    \n    // レンダリング\n    render(<TodoList />);\n    \n    // 未完了状態のタスクが表示される\n    const taskTitle = screen.getByText('テストタスク');\n    expect(taskTitle).toBeInTheDocument();\n    \n    // 完了ボタンをクリック\n    const completeButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(completeButton);\n    \n    // 状態の更新関数が呼ばれたことを確認\n    expect(setTasksMock).toHaveBeenCalled();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n\n  test('カスタムタスクを削除できる', async () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation(() => {});\n    \n    // テスト用のカスタムタスク配列を準備\n    const mockTask = {\n      id: 'test-custom-id',\n      title: 'カスタムタスク',\n      completed: false,\n      points: 0,\n      type: 'custom',\n      createdAt: new Date().toISOString()\n    };\n    \n    // コンポーネントの初期状態を直接設定\n    const setTasksMock = jest.fn();\n    jest.spyOn(React, 'useState').mockImplementationOnce(() => [[mockTask], setTasksMock]);\n    \n    // レンダリング\n    render(<TodoList />);\n    \n    // カスタムタスクが表示される\n    expect(screen.getByText('カスタムタスク')).toBeInTheDocument();\n    \n    // 削除ボタンをクリック\n    const deleteButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(deleteButton);\n    \n    // 状態の更新関数が呼ばれたことを確認\n    expect(setTasksMock).toHaveBeenCalled();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n\n  test('ギバータイプに基づいた推奨タスク（giver）のレンダリングを確認', () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation((f) => {\n      // generateSuggestedTasksの呼び出しだけ許可する\n      if (f.toString().includes('generateSuggestedTasks')) {\n        f();\n      }\n    });\n    \n    render(\n      <TodoList\n        giverScore={70}\n        giverType=\"giver\"\n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // giverタイプ向けの推奨タスクが生成されることを確認\n    expect(screen.queryByText('教材を作成してみよう')).toBeInTheDocument();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n  \n  test('ギバータイプに基づいた推奨タスク（matcher）のレンダリングを確認', () => {\n    // React.useEffectを実際に実行しないようにモック\n    const useEffectSpy = jest.spyOn(React, 'useEffect');\n    useEffectSpy.mockImplementation((f) => {\n      // generateSuggestedTasksの呼び出しだけ許可する\n      if (f.toString().includes('generateSuggestedTasks')) {\n        f();\n      }\n    });\n    \n    render(\n      <TodoList\n        giverScore={50}\n        giverType=\"matcher\"\n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // matcherタイプ向けの推奨タスクが生成されることを確認\n    expect(screen.queryByText('教材にフィードバックを提供する')).toBeInTheDocument();\n    \n    // モックを元に戻す\n    useEffectSpy.mockRestore();\n  });\n});\n\n// コンポーネントの内部処理をスタブ化する部分テスト関数\nfunction renderTodoListWithStubs(props = {}) {\n  // useEffect内の処理をスタブ化\n  jest.spyOn(React, 'useEffect').mockImplementation(f => f());\n  \n  return render(\n    <TodoList\n      giverScore={mockGiverScore}\n      giverType={mockGiverType}\n      activityCounts={mockActivityCounts}\n      {...props}\n    />\n  );\n} "],"names":["jest","mock","v4","uuidCounter","setTimeout","beforeEach","mockGiverScore","mockGiverType","mockActivityCounts","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","COMPLETE_QUIZ","mockLocalStorage","Object","defineProperty","window","value","getItem","fn","key","setItem","toString","removeItem","clear","keys","forEach","writable","describe","localStorage","clearAllMocks","spyOn","Storage","prototype","mockImplementation","afterEach","restoreAllMocks","cleanup","test","useEffectSpy","React","render","TodoList","giverScore","giverType","activityCounts","expect","screen","getByText","toBeInTheDocument","mockRestore","queryByPlaceholderText","not","fireEvent","click","getByPlaceholderText","useStateSpy","taskInput","change","target","toHaveBeenCalled","mockTask","id","title","completed","points","type","createdAt","Date","toISOString","setTasksMock","mockImplementationOnce","taskTitle","completeButton","getByRole","name","deleteButton","f","includes","queryByText","renderTodoListWithStubs","props"],"mappings":"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"}