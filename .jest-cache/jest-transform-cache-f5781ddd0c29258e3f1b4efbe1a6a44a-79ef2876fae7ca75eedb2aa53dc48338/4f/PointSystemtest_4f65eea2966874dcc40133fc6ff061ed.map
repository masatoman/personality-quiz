{"version":3,"sources":["/Users/master/Local Sites/testcursor/backup/src/app/__tests__/PointSystem.test.ts"],"sourcesContent":["import { ACTIVITY_POINTS } from '../../lib/api';\nimport { ActivityType } from '../../types/activity';\n\n// テスト用にポイント計算機能を単純化した実装\nconst calculatePointsForActivity = (activityType: ActivityType): number => {\n  return ACTIVITY_POINTS[activityType] || 0;\n};\n\n// ポイント使用処理のシミュレーション\nconst simulatePointsUsage = (\n  availablePoints: number, \n  pointCost: number\n): { success: boolean; remainingPoints: number } => {\n  if (availablePoints < pointCost) {\n    return { success: false, remainingPoints: availablePoints };\n  }\n  return { success: true, remainingPoints: availablePoints - pointCost };\n};\n\ndescribe('ポイントシステム', () => {\n  describe('ポイント獲得機能', () => {\n    it('教材作成では10ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('CREATE_CONTENT');\n      expect(points).toBe(10);\n    });\n\n    it('フィードバック提供では3ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('PROVIDE_FEEDBACK');\n      expect(points).toBe(3);\n    });\n\n    it('コンテンツ消費では1ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('CONSUME_CONTENT');\n      expect(points).toBe(1);\n    });\n\n    it('質問投稿では1ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('ASK_QUESTION');\n      expect(points).toBe(1);\n    });\n\n    it('複数のアクティビティによる累積ポイントが正しく計算される', () => {\n      const activityTypes: ActivityType[] = [\n        'CREATE_CONTENT',\n        'PROVIDE_FEEDBACK',\n        'CONSUME_CONTENT',\n        'ASK_QUESTION'\n      ];\n      \n      const totalPoints = activityTypes.reduce((sum, type) => {\n        return sum + calculatePointsForActivity(type);\n      }, 0);\n      \n      // 手動計算: 10 + 3 + 1 + 1 = 15\n      expect(totalPoints).toBe(15);\n    });\n\n    it('未定義のアクティビティでは0ポイント獲得となる', () => {\n      // @ts-ignore - テスト用に意図的に不正な値を使用\n      const points = calculatePointsForActivity('INVALID_ACTIVITY');\n      expect(points).toBe(0);\n    });\n  });\n\n  describe('ポイント使用機能', () => {\n    it('十分なポイントがある場合は使用に成功する', () => {\n      const availablePoints = 100;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(true);\n      expect(result.remainingPoints).toBe(50);\n    });\n\n    it('ポイントが不足している場合は使用に失敗する', () => {\n      const availablePoints = 30;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(false);\n      expect(result.remainingPoints).toBe(30); // 変化なし\n    });\n\n    it('ちょうどのポイント数でも使用に成功する', () => {\n      const availablePoints = 50;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(true);\n      expect(result.remainingPoints).toBe(0);\n    });\n\n    it('連続使用の場合、残りポイントが正確に計算される', () => {\n      let currentPoints = 100;\n      \n      // 1回目の使用: 30ポイント\n      const firstUsage = simulatePointsUsage(currentPoints, 30);\n      expect(firstUsage.success).toBe(true);\n      currentPoints = firstUsage.remainingPoints;\n      expect(currentPoints).toBe(70);\n      \n      // 2回目の使用: 50ポイント\n      const secondUsage = simulatePointsUsage(currentPoints, 50);\n      expect(secondUsage.success).toBe(true);\n      currentPoints = secondUsage.remainingPoints;\n      expect(currentPoints).toBe(20);\n      \n      // 3回目の使用: 30ポイント（失敗するはず）\n      const thirdUsage = simulatePointsUsage(currentPoints, 30);\n      expect(thirdUsage.success).toBe(false);\n      currentPoints = thirdUsage.remainingPoints;\n      expect(currentPoints).toBe(20); // 変化なし\n    });\n  });\n}); "],"names":["calculatePointsForActivity","activityType","ACTIVITY_POINTS","simulatePointsUsage","availablePoints","pointCost","success","remainingPoints","describe","it","points","expect","toBe","activityTypes","totalPoints","reduce","sum","type","result","currentPoints","firstUsage","secondUsage","thirdUsage"],"mappings":";;;;qBAAgC;AAGhC,wBAAwB;AACxB,MAAMA,6BAA6B,CAACC;IAClC,OAAOC,oBAAe,CAACD,aAAa,IAAI;AAC1C;AAEA,oBAAoB;AACpB,MAAME,sBAAsB,CAC1BC,iBACAC;IAEA,IAAID,kBAAkBC,WAAW;QAC/B,OAAO;YAAEC,SAAS;YAAOC,iBAAiBH;QAAgB;IAC5D;IACA,OAAO;QAAEE,SAAS;QAAMC,iBAAiBH,kBAAkBC;IAAU;AACvE;AAEAG,SAAS,YAAY;IACnBA,SAAS,YAAY;QACnBC,GAAG,qBAAqB;YACtB,MAAMC,SAASV,2BAA2B;YAC1CW,OAAOD,QAAQE,IAAI,CAAC;QACtB;QAEAH,GAAG,yBAAyB;YAC1B,MAAMC,SAASV,2BAA2B;YAC1CW,OAAOD,QAAQE,IAAI,CAAC;QACtB;QAEAH,GAAG,uBAAuB;YACxB,MAAMC,SAASV,2BAA2B;YAC1CW,OAAOD,QAAQE,IAAI,CAAC;QACtB;QAEAH,GAAG,oBAAoB;YACrB,MAAMC,SAASV,2BAA2B;YAC1CW,OAAOD,QAAQE,IAAI,CAAC;QACtB;QAEAH,GAAG,gCAAgC;YACjC,MAAMI,gBAAgC;gBACpC;gBACA;gBACA;gBACA;aACD;YAED,MAAMC,cAAcD,cAAcE,MAAM,CAAC,CAACC,KAAKC;gBAC7C,OAAOD,MAAMhB,2BAA2BiB;YAC1C,GAAG;YAEH,4BAA4B;YAC5BN,OAAOG,aAAaF,IAAI,CAAC;QAC3B;QAEAH,GAAG,2BAA2B;YAC5B,gCAAgC;YAChC,MAAMC,SAASV,2BAA2B;YAC1CW,OAAOD,QAAQE,IAAI,CAAC;QACtB;IACF;IAEAJ,SAAS,YAAY;QACnBC,GAAG,wBAAwB;YACzB,MAAML,kBAAkB;YACxB,MAAMC,YAAY;YAElB,MAAMa,SAASf,oBAAoBC,iBAAiBC;YAEpDM,OAAOO,OAAOZ,OAAO,EAAEM,IAAI,CAAC;YAC5BD,OAAOO,OAAOX,eAAe,EAAEK,IAAI,CAAC;QACtC;QAEAH,GAAG,yBAAyB;YAC1B,MAAML,kBAAkB;YACxB,MAAMC,YAAY;YAElB,MAAMa,SAASf,oBAAoBC,iBAAiBC;YAEpDM,OAAOO,OAAOZ,OAAO,EAAEM,IAAI,CAAC;YAC5BD,OAAOO,OAAOX,eAAe,EAAEK,IAAI,CAAC,KAAK,OAAO;QAClD;QAEAH,GAAG,uBAAuB;YACxB,MAAML,kBAAkB;YACxB,MAAMC,YAAY;YAElB,MAAMa,SAASf,oBAAoBC,iBAAiBC;YAEpDM,OAAOO,OAAOZ,OAAO,EAAEM,IAAI,CAAC;YAC5BD,OAAOO,OAAOX,eAAe,EAAEK,IAAI,CAAC;QACtC;QAEAH,GAAG,2BAA2B;YAC5B,IAAIU,gBAAgB;YAEpB,iBAAiB;YACjB,MAAMC,aAAajB,oBAAoBgB,eAAe;YACtDR,OAAOS,WAAWd,OAAO,EAAEM,IAAI,CAAC;YAChCO,gBAAgBC,WAAWb,eAAe;YAC1CI,OAAOQ,eAAeP,IAAI,CAAC;YAE3B,iBAAiB;YACjB,MAAMS,cAAclB,oBAAoBgB,eAAe;YACvDR,OAAOU,YAAYf,OAAO,EAAEM,IAAI,CAAC;YACjCO,gBAAgBE,YAAYd,eAAe;YAC3CI,OAAOQ,eAAeP,IAAI,CAAC;YAE3B,yBAAyB;YACzB,MAAMU,aAAanB,oBAAoBgB,eAAe;YACtDR,OAAOW,WAAWhB,OAAO,EAAEM,IAAI,CAAC;YAChCO,gBAAgBG,WAAWf,eAAe;YAC1CI,OAAOQ,eAAeP,IAAI,CAAC,KAAK,OAAO;QACzC;IACF;AACF"}