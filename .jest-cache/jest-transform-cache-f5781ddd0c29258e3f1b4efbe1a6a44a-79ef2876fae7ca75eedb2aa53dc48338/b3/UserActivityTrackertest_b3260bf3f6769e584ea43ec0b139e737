911ad231f7717f589ef56be5f8816903
"use strict";
jest.mock("@/lib/supabase", ()=>({
        from: jest.fn().mockReturnThis(),
        select: jest.fn().mockReturnThis(),
        insert: jest.fn().mockReturnThis(),
        eq: jest.fn().mockReturnThis(),
        gte: jest.fn().mockReturnThis(),
        lte: jest.fn().mockReturnThis(),
        order: jest.fn().mockReturnThis(),
        limit: jest.fn().mockReturnThis(),
        single: jest.fn().mockReturnThis(),
        then: jest.fn().mockImplementation((callback)=>callback({
                data: [],
                error: null
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _UserActivityTracker = require("../activity/UserActivityTracker");
describe("UserActivityTracker", ()=>{
    beforeEach(()=>{
        jest.spyOn(_UserActivityTracker.UserActivityTracker, "trackActivity");
        jest.spyOn(_UserActivityTracker.UserActivityTracker, "getUserActivities").mockResolvedValue([]);
        jest.spyOn(_UserActivityTracker.UserActivityTracker, "getLatestActivity").mockResolvedValue(null);
        jest.spyOn(_UserActivityTracker.UserActivityTracker, "getActivityCount").mockResolvedValue(0);
        // 日付を固定
        jest.useFakeTimers();
        jest.setSystemTime(new Date("2023-01-01"));
    });
    afterEach(()=>{
        jest.restoreAllMocks();
        jest.useRealTimers();
    });
    describe("trackActivity", ()=>{
        it("正しいユーザー活動データを作成する", async ()=>{
            const userId = "user123";
            const activityType = "complete_resource";
            const details = {
                resourceId: "resource456",
                completionTime: 300
            };
            const result = await _UserActivityTracker.UserActivityTracker.trackActivity(userId, activityType, details);
            expect(result).toEqual({
                userId,
                activityType,
                timestamp: new Date("2023-01-01"),
                details
            });
            expect(_UserActivityTracker.UserActivityTracker.trackActivity).toHaveBeenCalledWith(userId, activityType, details);
        });
        it("詳細情報なしでも活動を追跡できる", async ()=>{
            const userId = "user123";
            const activityType = "daily_login";
            const result = await _UserActivityTracker.UserActivityTracker.trackActivity(userId, activityType);
            expect(result).toEqual({
                userId,
                activityType,
                timestamp: new Date("2023-01-01"),
                details: undefined
            });
        });
    });
    describe("getUserActivities", ()=>{
        it("ユーザーの活動履歴を取得する", async ()=>{
            const userId = "user123";
            const activities = [
                {
                    userId,
                    activityType: "daily_login",
                    timestamp: new Date("2023-01-01")
                },
                {
                    userId,
                    activityType: "complete_resource",
                    timestamp: new Date("2023-01-01"),
                    details: {
                        resourceId: "resource456"
                    }
                }
            ];
            _UserActivityTracker.UserActivityTracker.getUserActivities.mockResolvedValueOnce(activities);
            const result = await _UserActivityTracker.UserActivityTracker.getUserActivities(userId);
            expect(result).toEqual(activities);
            expect(_UserActivityTracker.UserActivityTracker.getUserActivities).toHaveBeenCalledWith(userId);
        });
        it("日付範囲を指定して活動履歴を取得する", async ()=>{
            const userId = "user123";
            const fromDate = new Date("2022-12-01");
            const toDate = new Date("2022-12-31");
            await _UserActivityTracker.UserActivityTracker.getUserActivities(userId, fromDate, toDate);
            expect(_UserActivityTracker.UserActivityTracker.getUserActivities).toHaveBeenCalledWith(userId, fromDate, toDate);
        });
    });
    describe("getLatestActivity", ()=>{
        it("ユーザーの最新活動を取得する", async ()=>{
            const userId = "user123";
            const latestActivity = {
                userId,
                activityType: "complete_resource",
                timestamp: new Date("2023-01-01"),
                details: {
                    resourceId: "resource789"
                }
            };
            _UserActivityTracker.UserActivityTracker.getLatestActivity.mockResolvedValueOnce(latestActivity);
            const result = await _UserActivityTracker.UserActivityTracker.getLatestActivity(userId);
            expect(result).toEqual(latestActivity);
            expect(_UserActivityTracker.UserActivityTracker.getLatestActivity).toHaveBeenCalledWith(userId);
        });
        it("特定タイプの最新活動を取得する", async ()=>{
            const userId = "user123";
            const activityType = "daily_login";
            await _UserActivityTracker.UserActivityTracker.getLatestActivity(userId, activityType);
            expect(_UserActivityTracker.UserActivityTracker.getLatestActivity).toHaveBeenCalledWith(userId, activityType);
        });
    });
    describe("getActivityCount", ()=>{
        it("特定タイプの活動回数をカウントする", async ()=>{
            const userId = "user123";
            const activityType = "complete_resource";
            const count = 5;
            _UserActivityTracker.UserActivityTracker.getActivityCount.mockResolvedValueOnce(count);
            const result = await _UserActivityTracker.UserActivityTracker.getActivityCount(userId, activityType);
            expect(result).toBe(count);
            expect(_UserActivityTracker.UserActivityTracker.getActivityCount).toHaveBeenCalledWith(userId, activityType);
        });
        it("日付範囲を指定して活動回数をカウントする", async ()=>{
            const userId = "user123";
            const activityType = "provide_feedback";
            const fromDate = new Date("2022-12-01");
            const toDate = new Date("2022-12-31");
            await _UserActivityTracker.UserActivityTracker.getActivityCount(userId, activityType, fromDate, toDate);
            expect(_UserActivityTracker.UserActivityTracker.getActivityCount).toHaveBeenCalledWith(userId, activityType, fromDate, toDate);
        });
    });
    describe("getActivitySummary", ()=>{
        it("ユーザーの活動サマリーを取得する", async ()=>{
            const userId = "user123";
            const summary = {
                complete_resource_count: 5,
                create_material_count: 2,
                provide_feedback_count: 3,
                current_streak: 7,
                unique_categories_count: 4
            };
            jest.spyOn(_UserActivityTracker.UserActivityTracker, "getActivitySummary").mockResolvedValueOnce(summary);
            const result = await _UserActivityTracker.UserActivityTracker.getActivitySummary(userId);
            expect(result).toEqual(summary);
            expect(_UserActivityTracker.UserActivityTracker.getActivitySummary).toHaveBeenCalledWith(userId);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,