{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/utils/__tests__/UserActivityTracker.test.ts"],"sourcesContent":["import { ActivityType } from '@/types/learning';\nimport { UserActivityTracker, UserActivity } from '../activity/UserActivityTracker';\n\njest.mock('@/lib/supabase', () => ({\n  from: jest.fn().mockReturnThis(),\n  select: jest.fn().mockReturnThis(),\n  insert: jest.fn().mockReturnThis(),\n  eq: jest.fn().mockReturnThis(),\n  gte: jest.fn().mockReturnThis(),\n  lte: jest.fn().mockReturnThis(),\n  order: jest.fn().mockReturnThis(),\n  limit: jest.fn().mockReturnThis(),\n  single: jest.fn().mockReturnThis(),\n  then: jest.fn().mockImplementation((callback) => callback({ data: [], error: null }))\n}));\n\ndescribe('UserActivityTracker', () => {\n  beforeEach(() => {\n    jest.spyOn(UserActivityTracker, 'trackActivity');\n    jest.spyOn(UserActivityTracker, 'getUserActivities').mockResolvedValue([]);\n    jest.spyOn(UserActivityTracker, 'getLatestActivity').mockResolvedValue(null);\n    jest.spyOn(UserActivityTracker, 'getActivityCount').mockResolvedValue(0);\n    \n    // 日付を固定\n    jest.useFakeTimers();\n    jest.setSystemTime(new Date('2023-01-01'));\n  });\n  \n  afterEach(() => {\n    jest.restoreAllMocks();\n    jest.useRealTimers();\n  });\n  \n  describe('trackActivity', () => {\n    it('正しいユーザー活動データを作成する', async () => {\n      const userId = 'user123';\n      const activityType: ActivityType = 'complete_resource';\n      const details = { resourceId: 'resource456', completionTime: 300 };\n      \n      const result = await UserActivityTracker.trackActivity(userId, activityType, details);\n      \n      expect(result).toEqual({\n        userId,\n        activityType,\n        timestamp: new Date('2023-01-01'),\n        details\n      });\n      \n      expect(UserActivityTracker.trackActivity).toHaveBeenCalledWith(\n        userId, \n        activityType, \n        details\n      );\n    });\n    \n    it('詳細情報なしでも活動を追跡できる', async () => {\n      const userId = 'user123';\n      const activityType: ActivityType = 'daily_login';\n      \n      const result = await UserActivityTracker.trackActivity(userId, activityType);\n      \n      expect(result).toEqual({\n        userId,\n        activityType,\n        timestamp: new Date('2023-01-01'),\n        details: undefined\n      });\n    });\n  });\n  \n  describe('getUserActivities', () => {\n    it('ユーザーの活動履歴を取得する', async () => {\n      const userId = 'user123';\n      const activities: UserActivity[] = [\n        {\n          userId,\n          activityType: 'daily_login',\n          timestamp: new Date('2023-01-01')\n        },\n        {\n          userId,\n          activityType: 'complete_resource',\n          timestamp: new Date('2023-01-01'),\n          details: { resourceId: 'resource456' }\n        }\n      ];\n      \n      (UserActivityTracker.getUserActivities as jest.Mock).mockResolvedValueOnce(activities);\n      \n      const result = await UserActivityTracker.getUserActivities(userId);\n      \n      expect(result).toEqual(activities);\n      expect(UserActivityTracker.getUserActivities).toHaveBeenCalledWith(userId);\n    });\n    \n    it('日付範囲を指定して活動履歴を取得する', async () => {\n      const userId = 'user123';\n      const fromDate = new Date('2022-12-01');\n      const toDate = new Date('2022-12-31');\n      \n      await UserActivityTracker.getUserActivities(userId, fromDate, toDate);\n      \n      expect(UserActivityTracker.getUserActivities).toHaveBeenCalledWith(userId, fromDate, toDate);\n    });\n  });\n  \n  describe('getLatestActivity', () => {\n    it('ユーザーの最新活動を取得する', async () => {\n      const userId = 'user123';\n      const latestActivity: UserActivity = {\n        userId,\n        activityType: 'complete_resource',\n        timestamp: new Date('2023-01-01'),\n        details: { resourceId: 'resource789' }\n      };\n      \n      (UserActivityTracker.getLatestActivity as jest.Mock).mockResolvedValueOnce(latestActivity);\n      \n      const result = await UserActivityTracker.getLatestActivity(userId);\n      \n      expect(result).toEqual(latestActivity);\n      expect(UserActivityTracker.getLatestActivity).toHaveBeenCalledWith(userId);\n    });\n    \n    it('特定タイプの最新活動を取得する', async () => {\n      const userId = 'user123';\n      const activityType: ActivityType = 'daily_login';\n      \n      await UserActivityTracker.getLatestActivity(userId, activityType);\n      \n      expect(UserActivityTracker.getLatestActivity).toHaveBeenCalledWith(userId, activityType);\n    });\n  });\n  \n  describe('getActivityCount', () => {\n    it('特定タイプの活動回数をカウントする', async () => {\n      const userId = 'user123';\n      const activityType: ActivityType = 'complete_resource';\n      const count = 5;\n      \n      (UserActivityTracker.getActivityCount as jest.Mock).mockResolvedValueOnce(count);\n      \n      const result = await UserActivityTracker.getActivityCount(userId, activityType);\n      \n      expect(result).toBe(count);\n      expect(UserActivityTracker.getActivityCount).toHaveBeenCalledWith(\n        userId, \n        activityType\n      );\n    });\n    \n    it('日付範囲を指定して活動回数をカウントする', async () => {\n      const userId = 'user123';\n      const activityType: ActivityType = 'provide_feedback';\n      const fromDate = new Date('2022-12-01');\n      const toDate = new Date('2022-12-31');\n      \n      await UserActivityTracker.getActivityCount(userId, activityType, fromDate, toDate);\n      \n      expect(UserActivityTracker.getActivityCount).toHaveBeenCalledWith(\n        userId, \n        activityType, \n        fromDate, \n        toDate\n      );\n    });\n  });\n\n  describe('getActivitySummary', () => {\n    it('ユーザーの活動サマリーを取得する', async () => {\n      const userId = 'user123';\n      const summary = {\n        complete_resource_count: 5,\n        create_material_count: 2,\n        provide_feedback_count: 3,\n        current_streak: 7,\n        unique_categories_count: 4\n      };\n      \n      jest.spyOn(UserActivityTracker, 'getActivitySummary').mockResolvedValueOnce(summary);\n      \n      const result = await UserActivityTracker.getActivitySummary(userId);\n      \n      expect(result).toEqual(summary);\n      expect(UserActivityTracker.getActivitySummary).toHaveBeenCalledWith(userId);\n    });\n  });\n}); "],"names":["jest","mock","from","fn","mockReturnThis","select","insert","eq","gte","lte","order","limit","single","then","mockImplementation","callback","data","error","describe","beforeEach","spyOn","UserActivityTracker","mockResolvedValue","useFakeTimers","setSystemTime","Date","afterEach","restoreAllMocks","useRealTimers","it","userId","activityType","details","resourceId","completionTime","result","trackActivity","expect","toEqual","timestamp","toHaveBeenCalledWith","undefined","activities","getUserActivities","mockResolvedValueOnce","fromDate","toDate","latestActivity","getLatestActivity","count","getActivityCount","toBe","summary","complete_resource_count","create_material_count","provide_feedback_count","current_streak","unique_categories_count","getActivitySummary"],"mappings":"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"}