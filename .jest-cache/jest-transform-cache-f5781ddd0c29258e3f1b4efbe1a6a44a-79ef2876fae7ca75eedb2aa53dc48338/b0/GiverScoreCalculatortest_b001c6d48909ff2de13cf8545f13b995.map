{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/utils/__tests__/GiverScoreCalculator.test.ts"],"sourcesContent":["import { calculateScoreChange, recalculateScores, determinePersonalityType } from '@/utils/score';\nimport { UserActivityTracker } from '@/utils/activity/UserActivityTracker';\nimport { ActivityType as LearningActivityType } from '@/types/learning';\nimport { ActivityType as QuizActivityType } from '@/types/quiz';\nimport { ActivityType, ScoreActivity, convertActivityType } from '@/types/activity-score';\nimport { GIVER_IMPACT } from '@/types/activity';\n\n// UserActivityTrackerのモック\njest.mock('@/utils/activity/UserActivityTracker');\n\ndescribe('GiverScoreCalculator', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('ユーザー活動に基づくスコア計算', () => {\n    it('活動履歴からギバースコアを計算できる', async () => {\n      // モックの活動履歴を設定\n      const mockActivities = [\n        {\n          userId: 'user123',\n          activityType: 'create_material' as LearningActivityType,\n          timestamp: new Date('2023-01-01'),\n          details: { materialType: 'ARTICLE' }\n        },\n        {\n          userId: 'user123',\n          activityType: 'provide_feedback' as LearningActivityType,\n          timestamp: new Date('2023-01-02'),\n          details: { materialType: 'VIDEO' }\n        },\n        {\n          userId: 'user123',\n          activityType: 'complete_resource' as LearningActivityType,\n          timestamp: new Date('2023-01-03'),\n          details: { materialType: 'QUIZ' }\n        }\n      ];\n\n      // UserActivityTrackerのgetUserActivitiesをモック\n      (UserActivityTracker.getUserActivities as jest.Mock).mockResolvedValue(mockActivities);\n\n      // 活動履歴を取得\n      const userId = 'user123';\n      const activities = await UserActivityTracker.getUserActivities(userId);\n\n      // スコア計算用の活動データに変換\n      const scoreActivities: ScoreActivity[] = activities.map(activity => ({\n        activityType: convertActivityType(activity.activityType, 'quiz') as QuizActivityType,\n        materialType: activity.details?.materialType || 'OTHER',\n        timestamp: activity.timestamp\n      }));\n\n      // スコアを計算\n      const scores = recalculateScores(scoreActivities);\n\n      // 計算結果が期待どおりか検証\n      expect(scores.giver).toBeGreaterThan(0);\n      expect(scores.taker).toBeGreaterThan(0);\n      expect(scores.matcher).toBeGreaterThan(0);\n\n      // パーソナリティタイプを決定\n      const personalityType = determinePersonalityType(\n        scores.giver, \n        scores.taker, \n        scores.matcher\n      );\n\n      // タイプが有効な値か確認\n      expect(['giver', 'taker', 'matcher']).toContain(personalityType);\n    });\n\n    it('活動タイプごとに適切なスコア変化が計算される', () => {\n      // 各活動タイプのスコア変化をテスト\n      const createMaterialScore = calculateScoreChange('CREATE_CONTENT' as QuizActivityType);\n      const provideFeedbackScore = calculateScoreChange('PROVIDE_FEEDBACK' as QuizActivityType);\n      const completeResourceScore = calculateScoreChange('CONSUME_CONTENT' as QuizActivityType);\n\n      // 教材作成はギバースコアが高い\n      expect(createMaterialScore.giver).toBeGreaterThan(createMaterialScore.taker);\n      expect(createMaterialScore.giver).toBeGreaterThan(createMaterialScore.matcher);\n\n      // フィードバック提供はマッチャースコアより高いギバースコア\n      expect(provideFeedbackScore.giver).toBeGreaterThan(provideFeedbackScore.matcher);\n\n      // リソース完了はテイカースコアが最も高い\n      expect(completeResourceScore.taker).toBeGreaterThan(completeResourceScore.giver);\n    });\n\n    it('活動カウントからユーザーのタイプを予測できる', async () => {\n      // 活動カウントのモック\n      const mockSummary = {\n        create_material_count: 10,  // ギバー活動が多い\n        provide_feedback_count: 8,\n        complete_resource_count: 5,\n        daily_login_count: 20\n      };\n\n      // UserActivityTrackerのgetActivitySummaryをモック\n      (UserActivityTracker.getActivitySummary as jest.Mock).mockResolvedValue(mockSummary);\n\n      // 活動サマリーを取得\n      const userId = 'user123';\n      const summary = await UserActivityTracker.getActivitySummary(userId);\n\n      // 活動カウントからスコアを推定\n      let giverScore = summary.create_material_count * 5 + summary.provide_feedback_count * 3;\n      let takerScore = summary.complete_resource_count * 2;\n      let matcherScore = summary.create_material_count * 2 + summary.provide_feedback_count + summary.complete_resource_count;\n\n      // 推定されたスコアに基づいてパーソナリティタイプを決定\n      const personalityType = determinePersonalityType(giverScore, takerScore, matcherScore);\n\n      // この活動パターンではギバータイプが予測される\n      expect(personalityType).toBe('giver');\n    });\n  });\n\n  // app/__tests__/GiverScoreCalculator.test.tsから統合したテスト\n  describe('活動タイプ別ギバーインパクト設定', () => {\n    // テスト用の単純化した実装\n    function calculateGiverScoreIncrement(activityType: ActivityType, basePoints: number): number {\n      const impact = GIVER_IMPACT[activityType] || 0;\n      return Math.round(basePoints * impact);\n    }\n\n    // ポイントの基本設定（仮定）\n    const ACTIVITY_POINTS = {\n      CREATE_CONTENT: 10,\n      PROVIDE_FEEDBACK: 5,\n      CONSUME_CONTENT: 1,\n      SHARE_RESOURCE: 3,\n      ASK_QUESTION: 2,\n      COMPLETE_QUIZ: 5\n    };\n\n    it('コンテンツ作成は100%のギバースコアインパクトを持つ', () => {\n      const activityType: ActivityType = 'CREATE_CONTENT';\n      const basePoints = ACTIVITY_POINTS[activityType];\n      const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n      \n      // 100%反映なので、ベースポイントと同じ値になるはず\n      expect(scoreIncrement).toBe(basePoints);\n      expect(GIVER_IMPACT[activityType]).toBe(1.0);\n    });\n\n    it('フィードバック提供は80%のギバースコアインパクトを持つ', () => {\n      const activityType: ActivityType = 'PROVIDE_FEEDBACK';\n      const basePoints = ACTIVITY_POINTS[activityType];\n      const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n      \n      // 80%反映なので、ベースポイント×0.8の値に近くなるはず\n      expect(scoreIncrement).toBe(Math.round(basePoints * 0.8));\n      expect(GIVER_IMPACT[activityType]).toBe(0.8);\n    });\n\n    it('コンテンツ消費は10%のギバースコアインパクトを持つ', () => {\n      const activityType: ActivityType = 'CONSUME_CONTENT';\n      const basePoints = ACTIVITY_POINTS[activityType];\n      const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n      \n      // 10%反映なので、ベースポイント×0.1の値に近くなるはず\n      expect(scoreIncrement).toBe(Math.round(basePoints * 0.1));\n      expect(GIVER_IMPACT[activityType]).toBe(0.1);\n    });\n\n    it('リソース共有は60%のギバースコアインパクトを持つ', () => {\n      const activityType: ActivityType = 'SHARE_RESOURCE';\n      const basePoints = ACTIVITY_POINTS[activityType];\n      const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n      \n      // 60%反映なので、ベースポイント×0.6の値に近くなるはず\n      expect(scoreIncrement).toBe(Math.round(basePoints * 0.6));\n      expect(GIVER_IMPACT[activityType]).toBe(0.6);\n    });\n\n    it('全てのアクティビティタイプがギバーインパクト設定を持つ', () => {\n      // 全ての活動タイプに対して設定があるか確認\n      const activityTypes: ActivityType[] = [\n        'CREATE_CONTENT',\n        'PROVIDE_FEEDBACK',\n        'CONSUME_CONTENT',\n        'SHARE_RESOURCE',\n        'ASK_QUESTION',\n        'COMPLETE_QUIZ'\n      ];\n      \n      activityTypes.forEach(type => {\n        expect(GIVER_IMPACT[type]).toBeDefined();\n        expect(typeof GIVER_IMPACT[type]).toBe('number');\n        expect(GIVER_IMPACT[type]).toBeGreaterThanOrEqual(0);\n        expect(GIVER_IMPACT[type]).toBeLessThanOrEqual(1);\n      });\n    });\n\n    it('複数アクティビティの累積スコアが正しく計算される', () => {\n      const activities: ActivityType[] = [\n        'CREATE_CONTENT',\n        'PROVIDE_FEEDBACK',\n        'CONSUME_CONTENT',\n        'SHARE_RESOURCE'\n      ];\n      \n      let totalScore = 0;\n      \n      activities.forEach(activity => {\n        const basePoints = ACTIVITY_POINTS[activity];\n        const increment = calculateGiverScoreIncrement(activity, basePoints);\n        totalScore += increment;\n      });\n      \n      // 手動計算での期待値\n      const expectedScore = \n        10 * 1.0 + // CREATE_CONTENT: 10ポイント × 100%\n        5 * 0.8 +  // PROVIDE_FEEDBACK: 5ポイント × 80%\n        1 * 0.1 +  // CONSUME_CONTENT: 1ポイント × 10%\n        3 * 0.6;   // SHARE_RESOURCE: 3ポイント × 60%\n      \n      expect(totalScore).toBe(Math.round(expectedScore));\n    });\n  });\n}); "],"names":["jest","mock","describe","beforeEach","clearAllMocks","it","mockActivities","userId","activityType","timestamp","Date","details","materialType","UserActivityTracker","getUserActivities","mockResolvedValue","activities","scoreActivities","map","activity","convertActivityType","scores","recalculateScores","expect","giver","toBeGreaterThan","taker","matcher","personalityType","determinePersonalityType","toContain","createMaterialScore","calculateScoreChange","provideFeedbackScore","completeResourceScore","mockSummary","create_material_count","provide_feedback_count","complete_resource_count","daily_login_count","getActivitySummary","summary","giverScore","takerScore","matcherScore","toBe","calculateGiverScoreIncrement","basePoints","impact","GIVER_IMPACT","Math","round","ACTIVITY_POINTS","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","SHARE_RESOURCE","ASK_QUESTION","COMPLETE_QUIZ","scoreIncrement","activityTypes","forEach","type","toBeDefined","toBeGreaterThanOrEqual","toBeLessThanOrEqual","totalScore","increment","expectedScore"],"mappings":"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"}