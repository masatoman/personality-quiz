294e93d93364cc1dd85128f1f9e64f17
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createServerSupabaseClient: function() {
        return createServerSupabaseClient;
    },
    default: function() {
        return _default;
    }
});
const _supabasejs = require("@supabase/supabase-js");
// 環境変数からSupabaseの設定を取得
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://example.supabase.co";
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example";
// URLの形式をチェック
const isValidUrl = (urlString)=>{
    try {
        new URL(urlString);
        return true;
    } catch (e) {
        console.error("Invalid Supabase URL:", urlString);
        return false;
    }
};
// ブラウザとサーバーの両方で使用できるクライアントを作成
const validatedUrl = isValidUrl(supabaseUrl) ? supabaseUrl : "https://example.supabase.co";
const supabase = (0, _supabasejs.createClient)(validatedUrl, supabaseAnonKey);
const _default = supabase;
const createServerSupabaseClient = ()=>{
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://example.supabase.co";
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || "";
    const validatedUrl = isValidUrl(supabaseUrl) ? supabaseUrl : "https://example.supabase.co";
    return (0, _supabasejs.createClient)(validatedUrl, supabaseServiceKey);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXN0ZXIvTG9jYWwgU2l0ZXMvdGVzdGN1cnNvci9zcmMvbGliL3N1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XG5cbi8vIOeSsOWig+WkieaVsOOBi+OCiVN1cGFiYXNl44Gu6Kit5a6a44KS5Y+W5b6XXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly9leGFtcGxlLnN1cGFiYXNlLmNvJztcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8ICdleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXhhbXBsZSc7XG5cbi8vIFVSTOOBruW9ouW8j+OCkuODgeOCp+ODg+OCr1xuY29uc3QgaXNWYWxpZFVybCA9ICh1cmxTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICB0cnkge1xuICAgIG5ldyBVUkwodXJsU3RyaW5nKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgU3VwYWJhc2UgVVJMOicsIHVybFN0cmluZyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyDlnovlrprnvqnjga7jgZ/jgoHjga7jg4fjg7zjgr/jg5njg7zjgrnlnotcbmV4cG9ydCB0eXBlIERhdGFiYXNlID0ge1xuICBwdWJsaWM6IHtcbiAgICBUYWJsZXM6IHtcbiAgICAgIHVzZXJzOiB7XG4gICAgICAgIFJvdzoge1xuICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgZW1haWw6IHN0cmluZztcbiAgICAgICAgICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gICAgICAgICAgcGVyc29uYWxpdHlfdHlwZTogJ2dpdmVyJyB8ICdtYXRjaGVyJyB8ICd0YWtlcicgfCBudWxsO1xuICAgICAgICAgIGdpdmVyX3Njb3JlOiBudW1iZXI7XG4gICAgICAgICAgcG9pbnRzOiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIEluc2VydDoge1xuICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgZW1haWw6IHN0cmluZztcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICAgIHBlcnNvbmFsaXR5X3R5cGU/OiAnZ2l2ZXInIHwgJ21hdGNoZXInIHwgJ3Rha2VyJyB8IG51bGw7XG4gICAgICAgICAgZ2l2ZXJfc2NvcmU/OiBudW1iZXI7XG4gICAgICAgICAgcG9pbnRzPzogbnVtYmVyO1xuICAgICAgICB9O1xuICAgICAgICBVcGRhdGU6IHtcbiAgICAgICAgICBpZD86IHN0cmluZztcbiAgICAgICAgICBlbWFpbD86IHN0cmluZztcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICAgIHBlcnNvbmFsaXR5X3R5cGU/OiAnZ2l2ZXInIHwgJ21hdGNoZXInIHwgJ3Rha2VyJyB8IG51bGw7XG4gICAgICAgICAgZ2l2ZXJfc2NvcmU/OiBudW1iZXI7XG4gICAgICAgICAgcG9pbnRzPzogbnVtYmVyO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIHByb2ZpbGVzOiB7XG4gICAgICAgIFJvdzoge1xuICAgICAgICAgIHVzZXJfaWQ6IHN0cmluZztcbiAgICAgICAgICBkaXNwbGF5X25hbWU6IHN0cmluZztcbiAgICAgICAgICBhdmF0YXJfdXJsOiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAgIGJpbzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgSW5zZXJ0OiB7XG4gICAgICAgICAgdXNlcl9pZDogc3RyaW5nO1xuICAgICAgICAgIGRpc3BsYXlfbmFtZTogc3RyaW5nO1xuICAgICAgICAgIGF2YXRhcl91cmw/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAgIGJpbz86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIFVwZGF0ZToge1xuICAgICAgICAgIHVzZXJfaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgZGlzcGxheV9uYW1lPzogc3RyaW5nO1xuICAgICAgICAgIGF2YXRhcl91cmw/OiBzdHJpbmcgfCBudWxsO1xuICAgICAgICAgIGJpbz86IHN0cmluZyB8IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgY29udGVudHM6IHtcbiAgICAgICAgUm93OiB7XG4gICAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmc7XG4gICAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgICAgICAgY2F0ZWdvcnk6IHN0cmluZztcbiAgICAgICAgICB0YWdzOiBzdHJpbmdbXSB8IG51bGw7XG4gICAgICAgICAgY3JlYXRlZF9hdDogc3RyaW5nO1xuICAgICAgICAgIHVwZGF0ZWRfYXQ6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgSW5zZXJ0OiB7XG4gICAgICAgICAgaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgdXNlcl9pZDogc3RyaW5nO1xuICAgICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgICAgY29udGVudDogc3RyaW5nO1xuICAgICAgICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgICAgICAgdGFncz86IHN0cmluZ1tdIHwgbnVsbDtcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICAgIHVwZGF0ZWRfYXQ/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIFVwZGF0ZToge1xuICAgICAgICAgIGlkPzogc3RyaW5nO1xuICAgICAgICAgIHVzZXJfaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgICAgICAgY29udGVudD86IHN0cmluZztcbiAgICAgICAgICBjYXRlZ29yeT86IHN0cmluZztcbiAgICAgICAgICB0YWdzPzogc3RyaW5nW10gfCBudWxsO1xuICAgICAgICAgIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XG4gICAgICAgICAgdXBkYXRlZF9hdD86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBmZWVkYmFjazoge1xuICAgICAgICBSb3c6IHtcbiAgICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICAgIGNvbnRlbnRfaWQ6IHN0cmluZztcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmc7XG4gICAgICAgICAgY29tbWVudDogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICByYXRpbmc6IG51bWJlciB8IG51bGw7XG4gICAgICAgICAgaXNfaGVscGZ1bDogYm9vbGVhbjtcbiAgICAgICAgICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIEluc2VydDoge1xuICAgICAgICAgIGlkPzogc3RyaW5nO1xuICAgICAgICAgIGNvbnRlbnRfaWQ6IHN0cmluZztcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmc7XG4gICAgICAgICAgY29tbWVudD86IHN0cmluZyB8IG51bGw7XG4gICAgICAgICAgcmF0aW5nPzogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgICBpc19oZWxwZnVsPzogYm9vbGVhbjtcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBVcGRhdGU6IHtcbiAgICAgICAgICBpZD86IHN0cmluZztcbiAgICAgICAgICBjb250ZW50X2lkPzogc3RyaW5nO1xuICAgICAgICAgIHVzZXJfaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgY29tbWVudD86IHN0cmluZyB8IG51bGw7XG4gICAgICAgICAgcmF0aW5nPzogbnVtYmVyIHwgbnVsbDtcbiAgICAgICAgICBpc19oZWxwZnVsPzogYm9vbGVhbjtcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGFjdGl2aXRpZXM6IHtcbiAgICAgICAgUm93OiB7XG4gICAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgICB1c2VyX2lkOiBzdHJpbmc7XG4gICAgICAgICAgYWN0aXZpdHlfdHlwZTogc3RyaW5nO1xuICAgICAgICAgIHJlZmVyZW5jZV9pZDogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICBwb2ludHM6IG51bWJlcjtcbiAgICAgICAgICBjcmVhdGVkX2F0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIEluc2VydDoge1xuICAgICAgICAgIGlkPzogc3RyaW5nO1xuICAgICAgICAgIHVzZXJfaWQ6IHN0cmluZztcbiAgICAgICAgICBhY3Rpdml0eV90eXBlOiBzdHJpbmc7XG4gICAgICAgICAgcmVmZXJlbmNlX2lkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICBwb2ludHM6IG51bWJlcjtcbiAgICAgICAgICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBVcGRhdGU6IHtcbiAgICAgICAgICBpZD86IHN0cmluZztcbiAgICAgICAgICB1c2VyX2lkPzogc3RyaW5nO1xuICAgICAgICAgIGFjdGl2aXR5X3R5cGU/OiBzdHJpbmc7XG4gICAgICAgICAgcmVmZXJlbmNlX2lkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICBwb2ludHM/OiBudW1iZXI7XG4gICAgICAgICAgY3JlYXRlZF9hdD86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn07XG5cbi8vIOODluODqeOCpuOCtuOBqOOCteODvOODkOODvOOBruS4oeaWueOBp+S9v+eUqOOBp+OBjeOCi+OCr+ODqeOCpOOCouODs+ODiOOCkuS9nOaIkFxuY29uc3QgdmFsaWRhdGVkVXJsID0gaXNWYWxpZFVybChzdXBhYmFzZVVybCkgPyBzdXBhYmFzZVVybCA6ICdodHRwczovL2V4YW1wbGUuc3VwYWJhc2UuY28nO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQ8RGF0YWJhc2U+KHZhbGlkYXRlZFVybCwgc3VwYWJhc2VBbm9uS2V5KTtcblxuZXhwb3J0IGRlZmF1bHQgc3VwYWJhc2U7XG5cbi8vIOOCteODvOODkOODvOOCteOCpOODieWwgueUqOOBruOCr+ODqeOCpOOCouODs+ODiOS9nOaIkOmWouaVsFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlcnZlclN1cGFiYXNlQ2xpZW50ID0gKCkgPT4ge1xuICBjb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly9leGFtcGxlLnN1cGFiYXNlLmNvJztcbiAgY29uc3Qgc3VwYWJhc2VTZXJ2aWNlS2V5ID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSB8fCAnJztcbiAgXG4gIGNvbnN0IHZhbGlkYXRlZFVybCA9IGlzVmFsaWRVcmwoc3VwYWJhc2VVcmwpID8gc3VwYWJhc2VVcmwgOiAnaHR0cHM6Ly9leGFtcGxlLnN1cGFiYXNlLmNvJztcbiAgcmV0dXJuIGNyZWF0ZUNsaWVudDxEYXRhYmFzZT4odmFsaWRhdGVkVXJsLCBzdXBhYmFzZVNlcnZpY2VLZXkpO1xufTsgIl0sIm5hbWVzIjpbImNyZWF0ZVNlcnZlclN1cGFiYXNlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJpc1ZhbGlkVXJsIiwidXJsU3RyaW5nIiwiVVJMIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInZhbGlkYXRlZFVybCIsInN1cGFiYXNlIiwiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VTZXJ2aWNlS2V5IiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFxS2FBLDBCQUEwQjtlQUExQkE7O0lBSGIsT0FBd0I7ZUFBeEI7Ozs0QkFsSzZCO0FBRTdCLHVCQUF1QjtBQUN2QixNQUFNQyxjQUFjQyxRQUFRQyxHQUFHLENBQUNDLHdCQUF3QixJQUFJO0FBQzVELE1BQU1DLGtCQUFrQkgsUUFBUUMsR0FBRyxDQUFDRyw2QkFBNkIsSUFBSTtBQUVyRSxjQUFjO0FBQ2QsTUFBTUMsYUFBYSxDQUFDQztJQUNsQixJQUFJO1FBQ0YsSUFBSUMsSUFBSUQ7UUFDUixPQUFPO0lBQ1QsRUFBRSxPQUFPRSxHQUFHO1FBQ1ZDLFFBQVFDLEtBQUssQ0FBQyx5QkFBeUJKO1FBQ3ZDLE9BQU87SUFDVDtBQUNGO0FBK0lBLDhCQUE4QjtBQUM5QixNQUFNSyxlQUFlTixXQUFXTixlQUFlQSxjQUFjO0FBQzdELE1BQU1hLFdBQVdDLElBQUFBLHdCQUFZLEVBQVdGLGNBQWNSO01BRXRELFdBQWVTO0FBR1IsTUFBTWQsNkJBQTZCO0lBQ3hDLE1BQU1DLGNBQWNDLFFBQVFDLEdBQUcsQ0FBQ0Msd0JBQXdCLElBQUk7SUFDNUQsTUFBTVkscUJBQXFCZCxRQUFRQyxHQUFHLENBQUNjLHlCQUF5QixJQUFJO0lBRXBFLE1BQU1KLGVBQWVOLFdBQVdOLGVBQWVBLGNBQWM7SUFDN0QsT0FBT2MsSUFBQUEsd0JBQVksRUFBV0YsY0FBY0c7QUFDOUMifQ==