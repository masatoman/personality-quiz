afab16d707521c1b580bdc3a524881d2
"use strict";
// GiverScoreChartコンポーネントの依存関係をモック
jest.mock("next/navigation", ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                prefetch: jest.fn()
            };
        }
    }));
// recharts コンポーネントをモック
jest.mock("recharts", ()=>{
    const OriginalModule = jest.requireActual("recharts");
    return {
        ...OriginalModule,
        ResponsiveContainer: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "responsive-container",
                ...props,
                children: children
            }),
        LineChart: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "line-chart",
                ...props,
                children: children
            }),
        Line: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-line",
                ...props
            }),
        XAxis: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-xaxis",
                ...props
            }),
        YAxis: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-yaxis",
                ...props
            }),
        CartesianGrid: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-grid",
                ...props
            }),
        Tooltip: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-tooltip",
                ...props
            }),
        Legend: ({ ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "recharts-legend",
                ...props
            })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _dom = require("@testing-library/dom");
const _GiverScoreChart = /*#__PURE__*/ _interop_require_default(require("../GiverScoreChart"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// フェッチのモック化
// @ts-ignore - fetch型の不一致を無視
global.fetch = jest.fn();
describe("GiverScoreChart Component", ()=>{
    const mockUserId = "test-user-123";
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("ローディング状態が正しく表示されること", async ()=>{
        // フェッチがすぐには解決しないようにモック
        // @ts-ignore
        global.fetch.mockImplementation(()=>new Promise(()=>{}));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_GiverScoreChart.default, {
            userId: mockUserId
        }));
        // ローディングインジケータが表示されることを確認
        const loadingElement = _react1.screen.getByTestId("responsive-container").querySelector(".animate-spin");
        expect(loadingElement).toBeInTheDocument();
    });
    it("エラー状態が正しく表示されること", async ()=>{
        // 失敗するフェッチをモック
        // @ts-ignore
        global.fetch.mockRejectedValueOnce(new Error("API error"));
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_GiverScoreChart.default, {
            userId: mockUserId
        }));
        // エラーメッセージが表示されるまで待機
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText(/エラーが発生しました/i)).toBeInTheDocument();
        });
    });
    it("データが正しく表示され、グラフコンポーネントがレンダリングされること", async ()=>{
        // 成功するフェッチレスポンスをモック
        const mockData = {
            history: [
                {
                    userId: mockUserId,
                    score: 65,
                    timestamp: "2023-04-01T00:00:00.000Z"
                },
                {
                    userId: mockUserId,
                    score: 70,
                    timestamp: "2023-04-15T00:00:00.000Z"
                },
                {
                    userId: mockUserId,
                    score: 75,
                    timestamp: "2023-04-30T00:00:00.000Z"
                }
            ]
        };
        // @ts-ignore
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>mockData
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_GiverScoreChart.default, {
            userId: mockUserId
        }));
        // ローディングが終了して、グラフコンポーネントが表示されるまで待機
        await (0, _react1.waitFor)(()=>{
            // recharts コンポーネントが表示されていることを確認
            expect(_react1.screen.getByTestId("line-chart")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("recharts-line")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("recharts-xaxis")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("recharts-yaxis")).toBeInTheDocument();
        });
        // タイトルが正しく表示されていることを確認
        expect(_react1.screen.getByText("ギバースコア推移")).toBeInTheDocument();
    });
    it("期間切り替えボタンが正しく機能すること", async ()=>{
        // 成功するフェッチレスポンスをモック
        const mockData = {
            history: [
                {
                    userId: mockUserId,
                    score: 65,
                    timestamp: "2023-04-01T00:00:00.000Z"
                },
                {
                    userId: mockUserId,
                    score: 70,
                    timestamp: "2023-04-15T00:00:00.000Z"
                },
                {
                    userId: mockUserId,
                    score: 75,
                    timestamp: "2023-04-30T00:00:00.000Z"
                }
            ]
        };
        // @ts-ignore
        global.fetch.mockResolvedValue({
            ok: true,
            json: async ()=>mockData
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_GiverScoreChart.default, {
            userId: mockUserId
        }));
        // データがロードされるまで待機
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("line-chart")).toBeInTheDocument();
        });
        // 期間切り替えボタンをクリック
        _dom.fireEvent.click(_react1.screen.getByText("1週間"));
        // 新しいAPIリクエストが送信されたことを確認
        expect(global.fetch).toHaveBeenCalledTimes(2);
        // 3ヶ月ボタンをクリック
        _dom.fireEvent.click(_react1.screen.getByText("3ヶ月"));
        // さらに新しいAPIリクエストが送信されたことを確認
        expect(global.fetch).toHaveBeenCalledTimes(3);
    });
    it("APIが正しいURLとパラメータで呼び出されること", async ()=>{
        // 成功するフェッチレスポンスをモック
        // @ts-ignore
        global.fetch.mockResolvedValueOnce({
            ok: true,
            json: async ()=>({
                    history: []
                })
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_GiverScoreChart.default, {
            userId: mockUserId
        }));
        // APIが呼び出されたことを確認
        expect(global.fetch).toHaveBeenCalledTimes(1);
        // URLに userId パラメータが含まれていることを確認
        const fetchCall = global.fetch.mock.calls[0][0];
        expect(fetchCall).toContain(`userId=${mockUserId}`);
        expect(fetchCall).toContain(`/api/user/giver-score-history`);
    });
});

//# sourceMappingURL=data:application/json;base64,