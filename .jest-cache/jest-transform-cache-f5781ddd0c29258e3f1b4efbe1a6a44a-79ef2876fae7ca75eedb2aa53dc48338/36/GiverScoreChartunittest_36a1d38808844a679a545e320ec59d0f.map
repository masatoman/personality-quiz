{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/dashboard/test/GiverScoreChart.unit.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { fireEvent } from '@testing-library/dom';\nimport GiverScoreChart from '../GiverScoreChart';\n\n// GiverScoreChartコンポーネントの依存関係をモック\njest.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: jest.fn(),\n      prefetch: jest.fn(),\n    };\n  },\n}));\n\n// recharts コンポーネントをモック\njest.mock('recharts', () => {\n  const OriginalModule = jest.requireActual('recharts');\n  return {\n    ...OriginalModule,\n    ResponsiveContainer: ({ children, ...props }: any) => (\n      <div data-testid=\"responsive-container\" {...props}>\n        {children}\n      </div>\n    ),\n    LineChart: ({ children, ...props }: any) => (\n      <div data-testid=\"line-chart\" {...props}>\n        {children}\n      </div>\n    ),\n    Line: ({ ...props }: any) => <div data-testid=\"recharts-line\" {...props} />,\n    XAxis: ({ ...props }: any) => <div data-testid=\"recharts-xaxis\" {...props} />,\n    YAxis: ({ ...props }: any) => <div data-testid=\"recharts-yaxis\" {...props} />,\n    CartesianGrid: ({ ...props }: any) => <div data-testid=\"recharts-grid\" {...props} />,\n    Tooltip: ({ ...props }: any) => <div data-testid=\"recharts-tooltip\" {...props} />,\n    Legend: ({ ...props }: any) => <div data-testid=\"recharts-legend\" {...props} />,\n  };\n});\n\n// フェッチのモック化\n// @ts-ignore - fetch型の不一致を無視\nglobal.fetch = jest.fn();\n\ndescribe('GiverScoreChart Component', () => {\n  const mockUserId = 'test-user-123';\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('ローディング状態が正しく表示されること', async () => {\n    // フェッチがすぐには解決しないようにモック\n    // @ts-ignore\n    global.fetch.mockImplementation(() => new Promise(() => {}));\n    \n    render(<GiverScoreChart userId={mockUserId} />);\n    \n    // ローディングインジケータが表示されることを確認\n    const loadingElement = screen.getByTestId('responsive-container').querySelector('.animate-spin');\n    expect(loadingElement).toBeInTheDocument();\n  });\n\n  it('エラー状態が正しく表示されること', async () => {\n    // 失敗するフェッチをモック\n    // @ts-ignore\n    global.fetch.mockRejectedValueOnce(new Error('API error'));\n    \n    render(<GiverScoreChart userId={mockUserId} />);\n    \n    // エラーメッセージが表示されるまで待機\n    await waitFor(() => {\n      expect(screen.getByText(/エラーが発生しました/i)).toBeInTheDocument();\n    });\n  });\n\n  it('データが正しく表示され、グラフコンポーネントがレンダリングされること', async () => {\n    // 成功するフェッチレスポンスをモック\n    const mockData = {\n      history: [\n        { userId: mockUserId, score: 65, timestamp: '2023-04-01T00:00:00.000Z' },\n        { userId: mockUserId, score: 70, timestamp: '2023-04-15T00:00:00.000Z' },\n        { userId: mockUserId, score: 75, timestamp: '2023-04-30T00:00:00.000Z' }\n      ]\n    };\n    \n    // @ts-ignore\n    global.fetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockData,\n    });\n    \n    render(<GiverScoreChart userId={mockUserId} />);\n    \n    // ローディングが終了して、グラフコンポーネントが表示されるまで待機\n    await waitFor(() => {\n      // recharts コンポーネントが表示されていることを確認\n      expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n      expect(screen.getByTestId('recharts-line')).toBeInTheDocument();\n      expect(screen.getByTestId('recharts-xaxis')).toBeInTheDocument();\n      expect(screen.getByTestId('recharts-yaxis')).toBeInTheDocument();\n    });\n    \n    // タイトルが正しく表示されていることを確認\n    expect(screen.getByText('ギバースコア推移')).toBeInTheDocument();\n  });\n\n  it('期間切り替えボタンが正しく機能すること', async () => {\n    // 成功するフェッチレスポンスをモック\n    const mockData = {\n      history: [\n        { userId: mockUserId, score: 65, timestamp: '2023-04-01T00:00:00.000Z' },\n        { userId: mockUserId, score: 70, timestamp: '2023-04-15T00:00:00.000Z' },\n        { userId: mockUserId, score: 75, timestamp: '2023-04-30T00:00:00.000Z' }\n      ]\n    };\n    \n    // @ts-ignore\n    global.fetch.mockResolvedValue({\n      ok: true,\n      json: async () => mockData,\n    });\n    \n    render(<GiverScoreChart userId={mockUserId} />);\n    \n    // データがロードされるまで待機\n    await waitFor(() => {\n      expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n    });\n    \n    // 期間切り替えボタンをクリック\n    fireEvent.click(screen.getByText('1週間'));\n    \n    // 新しいAPIリクエストが送信されたことを確認\n    expect(global.fetch).toHaveBeenCalledTimes(2);\n    \n    // 3ヶ月ボタンをクリック\n    fireEvent.click(screen.getByText('3ヶ月'));\n    \n    // さらに新しいAPIリクエストが送信されたことを確認\n    expect(global.fetch).toHaveBeenCalledTimes(3);\n  });\n\n  it('APIが正しいURLとパラメータで呼び出されること', async () => {\n    // 成功するフェッチレスポンスをモック\n    // @ts-ignore\n    global.fetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ history: [] }),\n    });\n    \n    render(<GiverScoreChart userId={mockUserId} />);\n    \n    // APIが呼び出されたことを確認\n    expect(global.fetch).toHaveBeenCalledTimes(1);\n    \n    // URLに userId パラメータが含まれていることを確認\n    const fetchCall = (global.fetch as jest.Mock).mock.calls[0][0];\n    expect(fetchCall).toContain(`userId=${mockUserId}`);\n    expect(fetchCall).toContain(`/api/user/giver-score-history`);\n  });\n}); "],"names":["jest","mock","useRouter","push","fn","prefetch","OriginalModule","requireActual","ResponsiveContainer","children","props","div","data-testid","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","global","fetch","describe","mockUserId","beforeEach","clearAllMocks","it","mockImplementation","Promise","render","GiverScoreChart","userId","loadingElement","screen","getByTestId","querySelector","expect","toBeInTheDocument","mockRejectedValueOnce","Error","waitFor","getByText","mockData","history","score","timestamp","mockResolvedValueOnce","ok","json","mockResolvedValue","fireEvent","click","toHaveBeenCalledTimes","fetchCall","calls","toContain"],"mappings":"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"}