{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/utils/__tests__/badgeEvaluator.test.ts"],"sourcesContent":["import { BadgeEvaluator } from '../badgeEvaluator';\nimport { BadgeRequirement } from '@/types/badges';\n\ndescribe('BadgeEvaluator', () => {\n  // 標準的なカウントベースの要件テスト\n  describe('evaluateRequirement - basic count requirements', () => {\n    it('should return true when count requirement is met', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 5\n      };\n      \n      const activitySummary = {\n        complete_resource_count: 10\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, activitySummary)).toBe(true);\n    });\n    \n    it('should return false when count requirement is not met', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 10\n      };\n      \n      const activitySummary = {\n        complete_resource_count: 5\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, activitySummary)).toBe(false);\n    });\n    \n    it('should return false when activity count is missing', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 5\n      };\n      \n      const activitySummary = {};\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, activitySummary)).toBe(false);\n    });\n    \n    it('should return false when activitySummary is null or undefined', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 5\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, null as any)).toBe(false);\n      expect(BadgeEvaluator.evaluateRequirement(requirement, undefined as any)).toBe(false);\n    });\n  });\n  \n  // 特殊条件のテスト\n  describe('evaluateRequirement - special conditions', () => {\n    it('should evaluate consecutive login streak correctly', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'daily_login',\n        count: 7,\n        condition: 'consecutive'\n      };\n      \n      // 条件を満たすケース\n      const successSummary = {\n        current_streak: 10\n      };\n      \n      // 条件を満たさないケース\n      const failSummary = {\n        current_streak: 5\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, successSummary)).toBe(true);\n      expect(BadgeEvaluator.evaluateRequirement(requirement, failSummary)).toBe(false);\n    });\n  });\n  \n  // メタデータ条件のテスト\n  describe('evaluateRequirement - metadata conditions', () => {\n    it('should evaluate unique categories requirement correctly', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 3,\n        metadata: {\n          unique_categories: true\n        }\n      };\n      \n      // 条件を満たすケース\n      const successSummary = {\n        unique_categories_count: 5\n      };\n      \n      // 条件を満たさないケース\n      const failSummary = {\n        unique_categories_count: 2\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, successSummary)).toBe(true);\n      expect(BadgeEvaluator.evaluateRequirement(requirement, failSummary)).toBe(false);\n    });\n    \n    it('should evaluate time limit requirement correctly', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'complete_resource',\n        count: 1,\n        metadata: {\n          time_limit: 600 // 10分\n        }\n      };\n      \n      // 条件を満たすケース（5分で完了）\n      const successSummary = {\n        complete_resource_count: 1,\n        last_activity_time: 300\n      };\n      \n      // 条件を満たさないケース（15分かかった）\n      const failSummary = {\n        complete_resource_count: 1,\n        last_activity_time: 900\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, successSummary)).toBe(true);\n      expect(BadgeEvaluator.evaluateRequirement(requirement, failSummary)).toBe(false);\n    });\n    \n    it('should evaluate score requirement correctly', () => {\n      const requirement: BadgeRequirement = {\n        activityType: 'quiz_complete',\n        count: 1,\n        metadata: {\n          score: 90\n        }\n      };\n      \n      // 条件を満たすケース（満点）\n      const successSummary = {\n        quiz_complete_count: 2,\n        last_score: 100\n      };\n      \n      // 条件を満たさないケース（低得点）\n      const failSummary = {\n        quiz_complete_count: 2,\n        last_score: 80\n      };\n      \n      expect(BadgeEvaluator.evaluateRequirement(requirement, successSummary)).toBe(true);\n      expect(BadgeEvaluator.evaluateRequirement(requirement, failSummary)).toBe(false);\n    });\n  });\n  \n  // 複数要件の評価テスト\n  describe('evaluateAllRequirements', () => {\n    it('should return true when all requirements are met', () => {\n      const requirements: BadgeRequirement[] = [\n        {\n          activityType: 'complete_resource',\n          count: 5\n        },\n        {\n          activityType: 'daily_login',\n          count: 7,\n          condition: 'consecutive'\n        }\n      ];\n      \n      const activitySummary = {\n        complete_resource_count: 10,\n        current_streak: 10\n      };\n      \n      expect(BadgeEvaluator.evaluateAllRequirements(requirements, activitySummary)).toBe(true);\n    });\n    \n    it('should return false when any requirement is not met', () => {\n      const requirements: BadgeRequirement[] = [\n        {\n          activityType: 'complete_resource',\n          count: 5\n        },\n        {\n          activityType: 'daily_login',\n          count: 7,\n          condition: 'consecutive'\n        }\n      ];\n      \n      const activitySummary = {\n        complete_resource_count: 10,\n        current_streak: 5 // この要件は満たさない\n      };\n      \n      expect(BadgeEvaluator.evaluateAllRequirements(requirements, activitySummary)).toBe(false);\n    });\n  });\n}); "],"names":["describe","it","requirement","activityType","count","activitySummary","complete_resource_count","expect","BadgeEvaluator","evaluateRequirement","toBe","undefined","condition","successSummary","current_streak","failSummary","metadata","unique_categories","unique_categories_count","time_limit","last_activity_time","score","quiz_complete_count","last_score","requirements","evaluateAllRequirements"],"mappings":"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"}