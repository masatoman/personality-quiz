{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/todo/test/TodoList.unit.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport TodoList from '@/components/features/todo/TodoList';\n\n/**\n * TodoListコンポーネントの単体テスト\n * テスト対象: タスク管理UIコンポーネントの機能と表示\n */\n\n// モックデータ\nconst mockGiverScore = 15;\nconst mockGiverType = 'matcher';\nconst mockActivityCounts = {\n  CREATE_CONTENT: 1,\n  PROVIDE_FEEDBACK: 2,\n  CONSUME_CONTENT: 5,\n  COMPLETE_QUIZ: 3\n};\n\n// localStorage のモック\nconst mockLocalStorage: { [key: string]: string } = {};\nObject.defineProperty(window, 'localStorage', {\n  value: {\n    getItem: jest.fn((key) => mockLocalStorage[key] || null),\n    setItem: jest.fn((key, value) => {\n      mockLocalStorage[key] = value.toString();\n    }),\n    removeItem: jest.fn((key) => {\n      delete mockLocalStorage[key];\n    }),\n    clear: jest.fn(() => {\n      Object.keys(mockLocalStorage).forEach((key) => {\n        delete mockLocalStorage[key];\n      });\n    }),\n  },\n  writable: true\n});\n\ndescribe('TodoList コンポーネント', () => {\n  beforeEach(() => {\n    // テスト前に localStorage をクリア\n    window.localStorage.clear();\n    jest.clearAllMocks();\n  });\n\n  test('コンポーネントが正しくレンダリングされる', () => {\n    render(\n      <TodoList\n        giverScore={mockGiverScore}\n        giverType={mockGiverType}\n        activityCounts={mockActivityCounts}\n      />\n    );\n    \n    // ヘッダーが表示されていることを確認\n    expect(screen.getByText('今日のタスク')).toBeInTheDocument();\n    \n    // 「タスク追加」ボタンが表示されていることを確認\n    expect(screen.getByText('タスク追加')).toBeInTheDocument();\n    \n    // 初回表示時に推奨タスクが生成されていることを確認\n    expect(window.localStorage.setItem).toHaveBeenCalled();\n  });\n\n  test('タスク追加フォームを表示/非表示できる', () => {\n    render(<TodoList />);\n    \n    // 初期状態ではフォームは非表示\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // フォームが表示される\n    expect(screen.getByPlaceholderText('新しいタスクを入力...')).toBeInTheDocument();\n    \n    // 「キャンセル」ボタンをクリック\n    fireEvent.click(screen.getByText('キャンセル'));\n    \n    // フォームが非表示になる\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n  });\n\n  test('新しいタスクを追加できる', async () => {\n    render(<TodoList />);\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // 新しいタスクを入力\n    const taskInput = screen.getByPlaceholderText('新しいタスクを入力...');\n    fireEvent.change(taskInput, { target: { value: '新しいテストタスク' } });\n    \n    // 「追加」ボタンをクリック\n    fireEvent.click(screen.getByText('追加'));\n    \n    // タスクが追加されたことを確認\n    expect(screen.getByText('新しいテストタスク')).toBeInTheDocument();\n    \n    // localStorage に保存されたことを確認\n    expect(window.localStorage.setItem).toHaveBeenCalled();\n  });\n\n  test('タスクの完了状態を切り替えられる', async () => {\n    // localStorage にタスクデータをセット\n    const mockTask = {\n      id: '123',\n      title: 'テストタスク',\n      completed: false,\n      points: 5,\n      type: 'daily',\n      createdAt: new Date().toISOString()\n    };\n    window.localStorage.setItem('shiftWithTasks', JSON.stringify([mockTask]));\n    \n    render(<TodoList />);\n    \n    // 未完了状態のタスクが表示される\n    const taskTitle = screen.getByText('テストタスク');\n    expect(taskTitle).toBeInTheDocument();\n    expect(taskTitle).not.toHaveClass('line-through');\n    \n    // 完了ボタンをクリック\n    const completeButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(completeButton);\n    \n    // タスクが完了状態になることを確認\n    await waitFor(() => {\n      expect(screen.getByText('テストタスク')).toHaveClass('line-through');\n    });\n    \n    // localStorage が更新されたことを確認\n    expect(window.localStorage.setItem).toHaveBeenCalledTimes(2); // 初期化と更新\n  });\n\n  test('カスタムタスクを削除できる', async () => {\n    // localStorage にカスタムタスクデータをセット\n    const mockTask = {\n      id: '123',\n      title: 'カスタムタスク',\n      completed: false,\n      points: 0,\n      type: 'custom',\n      createdAt: new Date().toISOString()\n    };\n    window.localStorage.setItem('shiftWithTasks', JSON.stringify([mockTask]));\n    \n    render(<TodoList />);\n    \n    // カスタムタスクが表示される\n    expect(screen.getByText('カスタムタスク')).toBeInTheDocument();\n    \n    // 削除ボタンをクリック\n    const deleteButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(deleteButton);\n    \n    // タスクが削除されることを確認\n    await waitFor(() => {\n      expect(screen.queryByText('カスタムタスク')).not.toBeInTheDocument();\n    });\n    \n    // localStorage が更新されたことを確認\n    expect(window.localStorage.setItem).toHaveBeenCalledTimes(2); // 初期化と更新\n  });\n\n  test('ギバータイプに基づいた推奨タスクが生成される', () => {\n    // giverタイプでコンポーネントをレンダリング\n    render(\n      <TodoList\n        giverScore={70}\n        giverType=\"giver\"\n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // giverタイプ向けの推奨タスクが生成されることを確認\n    expect(screen.getByText('教材を作成してみよう')).toBeInTheDocument();\n    \n    // クリーンアップして再テスト\n    cleanup();\n    window.localStorage.clear();\n    \n    // matcherタイプでコンポーネントをレンダリング\n    render(\n      <TodoList\n        giverScore={50}\n        giverType=\"matcher\"\n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // matcherタイプ向けの推奨タスクが生成されることを確認\n    expect(screen.getByText('教材にフィードバックを提供する')).toBeInTheDocument();\n  });\n}); "],"names":["mockGiverScore","mockGiverType","mockActivityCounts","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","COMPLETE_QUIZ","mockLocalStorage","Object","defineProperty","window","value","getItem","jest","fn","key","setItem","toString","removeItem","clear","keys","forEach","writable","describe","beforeEach","localStorage","clearAllMocks","test","render","TodoList","giverScore","giverType","activityCounts","expect","screen","getByText","toBeInTheDocument","toHaveBeenCalled","queryByPlaceholderText","not","fireEvent","click","getByPlaceholderText","taskInput","change","target","mockTask","id","title","completed","points","type","createdAt","Date","toISOString","JSON","stringify","taskTitle","toHaveClass","completeButton","getByRole","name","waitFor","toHaveBeenCalledTimes","deleteButton","queryByText","cleanup"],"mappings":"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"}