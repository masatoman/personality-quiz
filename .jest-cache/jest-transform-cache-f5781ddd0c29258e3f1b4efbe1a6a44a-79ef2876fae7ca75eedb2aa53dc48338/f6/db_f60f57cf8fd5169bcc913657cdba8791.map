{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/lib/db.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { PersonalityType, TypeTotals, TypeStats, Stats } from '@/types/quiz';\nimport { Pool } from 'pg';\n\n// PostgreSQLの接続プール設定\nlet pool: Pool;\n\ntry {\n  pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' \n      ? {\n          rejectUnauthorized: false\n        }\n      : false\n  });\n  \n  // 接続のテスト\n  pool.on('error', (err) => {\n    console.error('PostgreSQL接続エラー:', err);\n    console.log('ローカルファイルシステムのデータにフォールバックします');\n  });\n} catch (error) {\n  console.error('PostgreSQLプールの初期化に失敗しました:', error);\n  console.log('ローカルファイルシステムのデータにフォールバックします');\n}\n\nexport async function query(text: string, params?: any[]) {\n  try {\n    // PostgreSQLへの接続を試みる\n    if (pool) {\n      const client = await pool.connect();\n      try {\n        return await client.query(text, params);\n      } finally {\n        client.release();\n      }\n    } else {\n      throw new Error('PostgreSQLプールが利用できません');\n    }\n  } catch (error) {\n    console.error('クエリ実行中にエラーが発生:', error);\n    // エラーを投げて呼び出し元で処理する\n    throw error;\n  }\n}\n\n// データベースファイルのパス\nconst DB_DIR = path.join(process.cwd(), 'data');\nconst RESULTS_FILE = path.join(DB_DIR, 'results.json');\nconst STATS_FILE = path.join(DB_DIR, 'stats.json');\n\n// データベースの初期化\nexport function initDatabase() {\n  try {\n    console.log(`データディレクトリパス: ${DB_DIR}`);\n    console.log(`結果ファイルパス: ${RESULTS_FILE}`);\n    console.log(`統計ファイルパス: ${STATS_FILE}`);\n    \n    // データディレクトリの作成\n    if (!fs.existsSync(DB_DIR)) {\n      console.log('データディレクトリが存在しないため、作成します');\n      try {\n        fs.mkdirSync(DB_DIR, { recursive: true });\n      } catch (dirError) {\n        console.error('データディレクトリの作成に失敗しました:', dirError);\n        console.log('代わりにメモリ内のモックデータを使用します');\n        return true; // ファイルシステムにアクセスできなくても処理を続行\n      }\n    }\n\n    // 結果ファイルの作成・確認\n    if (!fs.existsSync(RESULTS_FILE)) {\n      console.log('結果ファイルが存在しないため、作成します');\n      fs.writeFileSync(RESULTS_FILE, JSON.stringify([]), { encoding: 'utf8', mode: 0o666 });\n    }\n\n    // 統計ファイルの作成・確認\n    if (!fs.existsSync(STATS_FILE)) {\n      console.log('統計ファイルが存在しないため、作成します');\n      const initialStats: Stats = {\n        giver: { count: 0, percentage: 0 },\n        matcher: { count: 0, percentage: 0 },\n        taker: { count: 0, percentage: 0 },\n        total: 0\n      };\n      fs.writeFileSync(STATS_FILE, JSON.stringify(initialStats), { encoding: 'utf8', mode: 0o666 });\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('データベースの初期化中にエラーが発生しました:', error);\n    if (error instanceof Error) {\n      console.error('エラーメッセージ:', error.message);\n      console.error('スタックトレース:', error.stack);\n    }\n    return false;\n  }\n}\n\n// メモリ内のモックデータ\nlet mockResults: { id: number; type: PersonalityType; timestamp: string }[] = [];\nlet mockStats: Stats = {\n  giver: { count: 10, percentage: 34 },\n  matcher: { count: 7, percentage: 25 },\n  taker: { count: 12, percentage: 41 },\n  total: 29\n};\n\n// 結果の保存\nexport function saveResult(type: PersonalityType): boolean {\n  try {\n    // データベースの初期化\n    const initSuccess = initDatabase();\n    if (!initSuccess) {\n      console.log('データベース初期化に失敗しました。メモリ内のモックデータを使用します');\n    }\n\n    // ファイルへの保存を試みる\n    try {\n      console.log(`結果ファイルから読み込みを試行: ${RESULTS_FILE}`);\n      // 現在の結果を読み込む\n      let resultsData = [];\n      try {\n        const fileContent = fs.readFileSync(RESULTS_FILE, 'utf-8');\n        console.log(`読み込まれたファイル内容: ${fileContent}`);\n        resultsData = JSON.parse(fileContent);\n      } catch (readError) {\n        console.error('結果ファイルの読み込みに失敗しました。新しいファイルを作成します:', readError);\n        resultsData = [];\n      }\n      \n      // 新しい結果を追加\n      const newResult = {\n        id: Date.now(),\n        type,\n        timestamp: new Date().toISOString()\n      };\n      resultsData.push(newResult);\n      \n      console.log(`結果ファイルへの書き込みを試行: ${JSON.stringify(resultsData, null, 2)}`);\n      // 結果を保存\n      fs.writeFileSync(RESULTS_FILE, JSON.stringify(resultsData, null, 2), { encoding: 'utf8', mode: 0o666 });\n      \n      // 統計を更新\n      const statsSuccess = updateStats(type);\n      if (!statsSuccess) {\n        throw new Error('統計の更新に失敗しました');\n      }\n    } catch (fileError) {\n      console.error('ファイルへの保存に失敗しました。メモリ内モックデータを更新します:', fileError);\n      \n      // メモリ内のモックデータを更新\n      const newResult = {\n        id: Date.now(),\n        type,\n        timestamp: new Date().toISOString()\n      };\n      mockResults.push(newResult);\n      \n      // モックの統計を更新\n      mockStats[type].count += 1;\n      mockStats.total += 1;\n      \n      // パーセンテージを再計算\n      Object.keys(mockStats).forEach((key) => {\n        if (key !== 'total') {\n          const personalityType = key as PersonalityType;\n          mockStats[personalityType].percentage = \n            Math.round((mockStats[personalityType].count / mockStats.total) * 100);\n        }\n      });\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('結果の保存中にエラーが発生しました:', error);\n    if (error instanceof Error) {\n      console.error('エラーメッセージ:', error.message);\n      console.error('スタックトレース:', error.stack);\n    }\n    return false;\n  }\n}\n\n// 統計の更新\nfunction updateStats(type: PersonalityType): boolean {\n  try {\n    console.log(`統計ファイルから読み込みを試行: ${STATS_FILE}`);\n    // 統計データを読み込む\n    let statsData: Stats;\n    try {\n      const fileContent = fs.readFileSync(STATS_FILE, 'utf-8');\n      console.log(`読み込まれた統計ファイル内容: ${fileContent}`);\n      statsData = JSON.parse(fileContent);\n    } catch (readError) {\n      console.error('統計ファイルの読み込みに失敗しました。新しい統計を作成します:', readError);\n      statsData = {\n        giver: { count: 0, percentage: 0 },\n        matcher: { count: 0, percentage: 0 },\n        taker: { count: 0, percentage: 0 },\n        total: 0\n      };\n    }\n    \n    // カウントを増やす\n    statsData[type].count += 1;\n    statsData.total += 1;\n    \n    // パーセンテージを再計算\n    const total = statsData.total;\n    Object.keys(statsData).forEach((key) => {\n      if (key !== 'total') {\n        const personalityType = key as PersonalityType;\n        statsData[personalityType].percentage = \n          Math.round((statsData[personalityType].count / total) * 100);\n      }\n    });\n    \n    console.log(`統計ファイルへの書き込みを試行: ${JSON.stringify(statsData, null, 2)}`);\n    // 統計を保存\n    fs.writeFileSync(STATS_FILE, JSON.stringify(statsData, null, 2), { encoding: 'utf8', mode: 0o666 });\n    return true;\n  } catch (error) {\n    console.error('統計の更新中にエラーが発生しました:', error);\n    if (error instanceof Error) {\n      console.error('エラーメッセージ:', error.message);\n      console.error('スタックトレース:', error.stack);\n    }\n    return false;\n  }\n}\n\n// 統計の取得\nexport function getStats(): Stats {\n  try {\n    // データベースの初期化\n    const initSuccess = initDatabase();\n    if (!initSuccess) {\n      console.log('データベース初期化に失敗しました。メモリ内のモックデータを使用します');\n      return mockStats;\n    }\n    \n    // ファイルからの読み込みを試みる\n    try {\n      console.log(`統計ファイルから読み込みを試行: ${STATS_FILE}`);\n      const fileContent = fs.readFileSync(STATS_FILE, 'utf-8');\n      console.log(`読み込まれた統計ファイル内容: ${fileContent}`);\n      return JSON.parse(fileContent);\n    } catch (readError) {\n      console.error('統計ファイルの読み込みに失敗しました。メモリ内モックデータを返します:', readError);\n      return mockStats;\n    }\n  } catch (error) {\n    console.error('統計の取得中にエラーが発生しました:', error);\n    if (error instanceof Error) {\n      console.error('エラーメッセージ:', error.message);\n      console.error('スタックトレース:', error.stack);\n    }\n    \n    // エラー時はモックデータを返す\n    return mockStats;\n  }\n} "],"names":["getStats","initDatabase","query","saveResult","pool","Pool","connectionString","process","env","DATABASE_URL","ssl","NODE_ENV","rejectUnauthorized","on","err","console","error","log","text","params","client","connect","release","Error","DB_DIR","path","join","cwd","RESULTS_FILE","STATS_FILE","fs","existsSync","mkdirSync","recursive","dirError","writeFileSync","JSON","stringify","encoding","mode","initialStats","giver","count","percentage","matcher","taker","total","message","stack","mockResults","mockStats","type","initSuccess","resultsData","fileContent","readFileSync","parse","readError","newResult","id","Date","now","timestamp","toISOString","push","statsSuccess","updateStats","fileError","Object","keys","forEach","key","personalityType","Math","round","statsData"],"mappings":"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"}