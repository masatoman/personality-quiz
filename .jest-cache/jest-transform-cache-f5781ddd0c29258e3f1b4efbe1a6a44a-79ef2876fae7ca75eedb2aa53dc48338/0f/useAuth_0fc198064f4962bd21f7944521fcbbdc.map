{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { User, Session, AuthError } from '@supabase/supabase-js';\nimport supabase from '@/lib/supabase';\n\nexport type AuthUser = User | null;\n\nexport interface UseAuthReturn {\n  user: AuthUser;\n  session: Session | null;\n  loading: boolean;\n  error: AuthError | null;\n  signUp: (email: string, password: string) => Promise<{\n    user: AuthUser;\n    error: AuthError | null;\n  }>;\n  signIn: (email: string, password: string) => Promise<{\n    user: AuthUser;\n    error: AuthError | null;\n  }>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<{\n    error: AuthError | null;\n  }>;\n}\n\nexport function useAuth(): UseAuthReturn {\n  const [user, setUser] = useState<AuthUser>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<AuthError | null>(null);\n\n  useEffect(() => {\n    let authListener: { subscription: { unsubscribe: () => void } } | null = null;\n    \n    // 現在のセッションとユーザーを取得\n    const getInitialSession = async () => {\n      try {\n        setLoading(true);\n        const { data: { session }, error } = await supabase.auth.getSession();\n\n        if (error) {\n          throw error;\n        }\n\n        setSession(session);\n        setUser(session?.user ?? null);\n\n        // 認証状態の変更を監視\n        const { data: listener } = supabase.auth.onAuthStateChange(\n          (_event, session) => {\n            setSession(session);\n            setUser(session?.user ?? null);\n            setLoading(false);\n          }\n        );\n        \n        authListener = listener;\n        setLoading(false);\n      } catch (error) {\n        setError(error as AuthError);\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    return () => {\n      // クリーンアップ関数\n      if (authListener) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // ユーザー登録\n  const signUp = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n      });\n      \n      if (error) {\n        throw error;\n      }\n\n      return { user: data.user, error: null };\n    } catch (error) {\n      return { user: null, error: error as AuthError };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ログイン\n  const signIn = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      return { user: data.user, error: null };\n    } catch (error) {\n      return { user: null, error: error as AuthError };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ログアウト\n  const signOut = async () => {\n    setLoading(true);\n    try {\n      await supabase.auth.signOut();\n    } catch (error) {\n      setError(error as AuthError);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // パスワードリセット\n  const resetPassword = async (email: string) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n\n      return { error: null };\n    } catch (error) {\n      return { error: error as AuthError };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    user,\n    session,\n    loading,\n    error,\n    signUp,\n    signIn,\n    signOut,\n    resetPassword,\n  };\n} "],"names":["useAuth","user","setUser","useState","session","setSession","loading","setLoading","error","setError","useEffect","authListener","getInitialSession","data","supabase","auth","getSession","listener","onAuthStateChange","_event","subscription","unsubscribe","signUp","email","password","signIn","signInWithPassword","signOut","resetPassword","resetPasswordForEmail"],"mappings":"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"}