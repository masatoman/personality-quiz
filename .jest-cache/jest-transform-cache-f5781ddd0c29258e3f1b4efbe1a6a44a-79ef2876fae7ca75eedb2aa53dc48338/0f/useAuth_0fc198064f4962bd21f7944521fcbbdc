628f46a4f9f4c9835c4bdfd2609fd08d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAuth", {
    enumerable: true,
    get: function() {
        return useAuth;
    }
});
const _react = require("react");
const _supabase = /*#__PURE__*/ _interop_require_default(require("../lib/supabase"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function useAuth() {
    const [user, setUser] = (0, _react.useState)(null);
    const [session, setSession] = (0, _react.useState)(null);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        let authListener = null;
        // 現在のセッションとユーザーを取得
        const getInitialSession = async ()=>{
            try {
                setLoading(true);
                const { data: { session }, error } = await _supabase.default.auth.getSession();
                if (error) {
                    throw error;
                }
                setSession(session);
                setUser(session?.user ?? null);
                // 認証状態の変更を監視
                const { data: listener } = _supabase.default.auth.onAuthStateChange((_event, session)=>{
                    setSession(session);
                    setUser(session?.user ?? null);
                    setLoading(false);
                });
                authListener = listener;
                setLoading(false);
            } catch (error) {
                setError(error);
                setLoading(false);
            }
        };
        getInitialSession();
        return ()=>{
            // クリーンアップ関数
            if (authListener) {
                authListener.subscription.unsubscribe();
            }
        };
    }, []);
    // ユーザー登録
    const signUp = async (email, password)=>{
        try {
            setLoading(true);
            const { data, error } = await _supabase.default.auth.signUp({
                email,
                password
            });
            if (error) {
                throw error;
            }
            return {
                user: data.user,
                error: null
            };
        } catch (error) {
            return {
                user: null,
                error: error
            };
        } finally{
            setLoading(false);
        }
    };
    // ログイン
    const signIn = async (email, password)=>{
        try {
            setLoading(true);
            const { data, error } = await _supabase.default.auth.signInWithPassword({
                email,
                password
            });
            if (error) {
                throw error;
            }
            return {
                user: data.user,
                error: null
            };
        } catch (error) {
            return {
                user: null,
                error: error
            };
        } finally{
            setLoading(false);
        }
    };
    // ログアウト
    const signOut = async ()=>{
        setLoading(true);
        try {
            await _supabase.default.auth.signOut();
        } catch (error) {
            setError(error);
        } finally{
            setLoading(false);
        }
    };
    // パスワードリセット
    const resetPassword = async (email)=>{
        try {
            setLoading(true);
            const { error } = await _supabase.default.auth.resetPasswordForEmail(email);
            if (error) {
                throw error;
            }
            return {
                error: null
            };
        } catch (error) {
            return {
                error: error
            };
        } finally{
            setLoading(false);
        }
    };
    return {
        user,
        session,
        loading,
        error,
        signUp,
        signIn,
        signOut,
        resetPassword
    };
}

//# sourceMappingURL=data:application/json;base64,