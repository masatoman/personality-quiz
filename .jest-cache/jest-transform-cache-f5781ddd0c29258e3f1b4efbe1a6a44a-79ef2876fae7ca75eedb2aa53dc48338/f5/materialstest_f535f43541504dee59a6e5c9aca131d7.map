{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/lib/api/__tests__/materials.test.ts"],"sourcesContent":["import { getMaterial, getMaterials } from '../materials';\nimport { Material } from '@/types/material';\n\ndescribe('Materials API', () => {\n  describe('getMaterial', () => {\n    it('指定されたIDに対応する教材データを返す', async () => {\n      // 特定のIDで教材を取得\n      const material = await getMaterial('1');\n      \n      // 戻り値が正しい形式かチェック\n      expect(material).toBeDefined();\n      expect(material.id).toBe('1');\n      expect(material.title).toBeDefined();\n      expect(material.description).toBeDefined();\n      expect(material.sections).toBeInstanceOf(Array);\n      expect(material.reviews).toBeInstanceOf(Array);\n      expect(material.relatedMaterials).toBeInstanceOf(Array);\n    });\n    \n    it('教材データの内容が正しい', async () => {\n      const material = await getMaterial('1');\n      \n      // 教材本文の内容を検証\n      expect(material.title).toBe('英語初心者のための基礎文法');\n      expect(material.difficulty).toBe('beginner');\n      expect(material.allowComments).toBe(true);\n      expect(material.author).toEqual(expect.objectContaining({\n        id: expect.any(String),\n        name: expect.any(String)\n      }));\n      \n      // セクションの検証\n      expect(material.sections.length).toBeGreaterThan(0);\n      const firstSection = material.sections[0];\n      expect(firstSection).toEqual(expect.objectContaining({\n        id: expect.any(String),\n        title: expect.any(String),\n        type: expect.any(String)\n      }));\n      \n      // クイズセクションの検証\n      const quizSection = material.sections.find(section => section.type === 'quiz');\n      if (quizSection && 'questions' in quizSection) {\n        expect(quizSection.questions).toBeInstanceOf(Array);\n        if (quizSection.questions.length > 0) {\n          const firstQuestion = quizSection.questions[0];\n          expect(firstQuestion).toEqual(expect.objectContaining({\n            id: expect.any(String),\n            question: expect.any(String),\n            options: expect.arrayContaining([\n              expect.objectContaining({\n                id: expect.any(String),\n                text: expect.any(String)\n              })\n            ]),\n            correctAnswer: expect.any(String)\n          }));\n        }\n      }\n    });\n  });\n  \n  describe('getMaterials', () => {\n    it('教材一覧を取得できる', async () => {\n      const materials = await getMaterials();\n      \n      // 戻り値が配列であることを検証\n      expect(materials).toBeInstanceOf(Array);\n      expect(materials.length).toBeGreaterThan(0);\n      \n      // 各教材のフォーマットを検証\n      materials.forEach(material => {\n        expect(material).toEqual(expect.objectContaining({\n          id: expect.any(String),\n          title: expect.any(String),\n          difficulty: expect.any(String)\n        }));\n      });\n    });\n    \n    it('フィルターオプションを指定して教材を取得できる', async () => {\n      // 特定の難易度で絞り込み\n      const materials = await getMaterials({\n        difficulty: 'beginner'\n      });\n      \n      // 結果の検証\n      expect(materials).toBeInstanceOf(Array);\n      \n      // 実際のフィルタリングはモックデータのため機能しませんが、\n      // 引数が正しく渡されることだけを検証\n      // 実際のAPIでは、返されるデータがフィルター条件に合致することを検証するテストを追加\n    });\n    \n    it('ページネーションオプションを指定して教材を取得できる', async () => {\n      // ページ指定で取得\n      const materials = await getMaterials({\n        page: 1,\n        limit: 10\n      });\n      \n      // 結果の検証\n      expect(materials).toBeInstanceOf(Array);\n      \n      // 実際のページネーションはモックデータのため機能しませんが、\n      // 引数が正しく渡されることだけを検証\n      // 実際のAPIでは、返されるデータ数が制限に合致することを検証するテストを追加\n    });\n    \n    it('ソートオプションを指定して教材を取得できる', async () => {\n      // 新着順で取得\n      const materials = await getMaterials({\n        sort: 'newest'\n      });\n      \n      // 結果の検証\n      expect(materials).toBeInstanceOf(Array);\n      \n      // 実際のソートはモックデータのため機能しませんが、\n      // 引数が正しく渡されることだけを検証\n      // 実際のAPIでは、返されるデータが適切にソートされていることを検証するテストを追加\n    });\n  });\n}); "],"names":["describe","it","material","getMaterial","expect","toBeDefined","id","toBe","title","description","sections","toBeInstanceOf","Array","reviews","relatedMaterials","difficulty","allowComments","author","toEqual","objectContaining","any","String","name","length","toBeGreaterThan","firstSection","type","quizSection","find","section","questions","firstQuestion","question","options","arrayContaining","text","correctAnswer","materials","getMaterials","forEach","page","limit","sort"],"mappings":"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"}