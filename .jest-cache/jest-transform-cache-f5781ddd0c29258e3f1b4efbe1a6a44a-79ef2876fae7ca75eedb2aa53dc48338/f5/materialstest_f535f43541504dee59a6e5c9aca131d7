2a33c0c7cd4b922b8d9f059e135128c3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _materials = require("../materials");
describe("Materials API", ()=>{
    describe("getMaterial", ()=>{
        it("指定されたIDに対応する教材データを返す", async ()=>{
            // 特定のIDで教材を取得
            const material = await (0, _materials.getMaterial)("1");
            // 戻り値が正しい形式かチェック
            expect(material).toBeDefined();
            expect(material.id).toBe("1");
            expect(material.title).toBeDefined();
            expect(material.description).toBeDefined();
            expect(material.sections).toBeInstanceOf(Array);
            expect(material.reviews).toBeInstanceOf(Array);
            expect(material.relatedMaterials).toBeInstanceOf(Array);
        });
        it("教材データの内容が正しい", async ()=>{
            const material = await (0, _materials.getMaterial)("1");
            // 教材本文の内容を検証
            expect(material.title).toBe("英語初心者のための基礎文法");
            expect(material.difficulty).toBe("beginner");
            expect(material.allowComments).toBe(true);
            expect(material.author).toEqual(expect.objectContaining({
                id: expect.any(String),
                name: expect.any(String)
            }));
            // セクションの検証
            expect(material.sections.length).toBeGreaterThan(0);
            const firstSection = material.sections[0];
            expect(firstSection).toEqual(expect.objectContaining({
                id: expect.any(String),
                title: expect.any(String),
                type: expect.any(String)
            }));
            // クイズセクションの検証
            const quizSection = material.sections.find((section)=>section.type === "quiz");
            if (quizSection && "questions" in quizSection) {
                expect(quizSection.questions).toBeInstanceOf(Array);
                if (quizSection.questions.length > 0) {
                    const firstQuestion = quizSection.questions[0];
                    expect(firstQuestion).toEqual(expect.objectContaining({
                        id: expect.any(String),
                        question: expect.any(String),
                        options: expect.arrayContaining([
                            expect.objectContaining({
                                id: expect.any(String),
                                text: expect.any(String)
                            })
                        ]),
                        correctAnswer: expect.any(String)
                    }));
                }
            }
        });
    });
    describe("getMaterials", ()=>{
        it("教材一覧を取得できる", async ()=>{
            const materials = await (0, _materials.getMaterials)();
            // 戻り値が配列であることを検証
            expect(materials).toBeInstanceOf(Array);
            expect(materials.length).toBeGreaterThan(0);
            // 各教材のフォーマットを検証
            materials.forEach((material)=>{
                expect(material).toEqual(expect.objectContaining({
                    id: expect.any(String),
                    title: expect.any(String),
                    difficulty: expect.any(String)
                }));
            });
        });
        it("フィルターオプションを指定して教材を取得できる", async ()=>{
            // 特定の難易度で絞り込み
            const materials = await (0, _materials.getMaterials)({
                difficulty: "beginner"
            });
            // 結果の検証
            expect(materials).toBeInstanceOf(Array);
        // 実際のフィルタリングはモックデータのため機能しませんが、
        // 引数が正しく渡されることだけを検証
        // 実際のAPIでは、返されるデータがフィルター条件に合致することを検証するテストを追加
        });
        it("ページネーションオプションを指定して教材を取得できる", async ()=>{
            // ページ指定で取得
            const materials = await (0, _materials.getMaterials)({
                page: 1,
                limit: 10
            });
            // 結果の検証
            expect(materials).toBeInstanceOf(Array);
        // 実際のページネーションはモックデータのため機能しませんが、
        // 引数が正しく渡されることだけを検証
        // 実際のAPIでは、返されるデータ数が制限に合致することを検証するテストを追加
        });
        it("ソートオプションを指定して教材を取得できる", async ()=>{
            // 新着順で取得
            const materials = await (0, _materials.getMaterials)({
                sort: "newest"
            });
            // 結果の検証
            expect(materials).toBeInstanceOf(Array);
        // 実際のソートはモックデータのため機能しませんが、
        // 引数が正しく渡されることだけを検証
        // 実際のAPIでは、返されるデータが適切にソートされていることを検証するテストを追加
        });
    });
});

//# sourceMappingURL=data:application/json;base64,