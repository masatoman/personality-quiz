67ea9b054afcfc369817d5005704083b
/// <reference types="@testing-library/jest-dom" />
"use strict";
// useRouterのモック
jest.mock("next/navigation", ()=>({
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn()
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _testutils = require("react-dom/test-utils");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
const _navigation = require("next/navigation");
const _test = require("@playwright/test");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// window.openのモック
const mockOpen = jest.fn();
window.open = mockOpen;
// fetchのモック
const mockFetch = jest.fn(()=>Promise.resolve({
        ok: true,
        status: 200,
        headers: new Headers(),
        json: ()=>Promise.resolve({
                stats: {
                    giver: {
                        count: 4,
                        percentage: 23.5
                    },
                    taker: {
                        count: 6,
                        percentage: 35.3
                    },
                    matcher: {
                        count: 7,
                        percentage: 41.2
                    }
                }
            })
    }));
global.fetch = mockFetch;
describe("Home", ()=>{
    const mockRouter = {
        push: jest.fn(),
        replace: jest.fn()
    };
    beforeEach(()=>{
        _navigation.useRouter.mockReturnValue(mockRouter);
        jest.spyOn(window, "open").mockImplementation(jest.fn());
        // 各テストの前にモックをリセット
        jest.clearAllMocks();
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    const startDiagnosis = async ()=>{
        const startButton = _react.screen.getByText("診断を始める");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(startButton);
        });
    };
    it("最初の質問が表示される", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        const questionText = _react.screen.getByText((content, element)=>{
            return element?.textContent === "質問 1 / 10";
        });
        (0, _test.expect)(questionText).toBeInTheDocument();
        (0, _test.expect)(_react.screen.getByText("英語の授業で新しい単語を覚えるとき、どの方法が最も自然に感じますか？")).toBeInTheDocument();
    });
    it("質問に回答すると次の質問に進む", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        const firstOption = _react.screen.getByText("単語の意味を他の人に説明しながら覚える");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(firstOption);
        });
        // 選択後すぐには次の質問に進まないことを確認
        (0, _test.expect)(_react.screen.getByText("質問 1 / 10")).toBeInTheDocument();
        // 次へボタンをクリック
        const nextButton = _react.screen.getByText("次へ");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(nextButton);
        });
        const questionText = _react.screen.getByText((content, element)=>{
            return element?.textContent === "質問 2 / 10";
        });
        (0, _test.expect)(questionText).toBeInTheDocument();
    });
    it("すべての質問に回答すると結果が表示される", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        // すべての質問に回答
        for(let i = 0; i < 10; i++){
            const options = _react.screen.getAllByRole("button").filter((button)=>!button.textContent?.includes("診断を始める") && !button.textContent?.includes("もう一度テストを受ける") && !button.textContent?.includes("次へ"));
            await (0, _testutils.act)(async ()=>{
                await _userevent.default.click(options[0]);
            });
            // 次へボタンをクリック（最後の質問以外）
            if (i < 9) {
                const nextButton = _react.screen.getByText("次へ");
                await (0, _testutils.act)(async ()=>{
                    await _userevent.default.click(nextButton);
                });
            }
        }
        // 結果が表示されることを確認
        (0, _test.expect)(_react.screen.getByText("あなたの結果")).toBeInTheDocument();
        (0, _test.expect)(_react.screen.getByText("あなたへのアドバイス")).toBeInTheDocument();
    });
    it("「もう一度テストを受ける」ボタンをクリックすると最初に戻る", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        // すべての質問に回答
        for(let i = 0; i < 10; i++){
            const options = _react.screen.getAllByRole("button").filter((button)=>!button.textContent?.includes("診断を始める") && !button.textContent?.includes("もう一度テストを受ける") && !button.textContent?.includes("次へ"));
            await (0, _testutils.act)(async ()=>{
                await _userevent.default.click(options[0]);
            });
            // 次へボタンをクリック（最後の質問以外）
            if (i < 9) {
                const nextButton = _react.screen.getByText("次へ");
                await (0, _testutils.act)(async ()=>{
                    await _userevent.default.click(nextButton);
                });
            }
        }
        // もう一度テストを受けるボタンをクリック
        const resetButton = _react.screen.getByText("もう一度テストを受ける");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(resetButton);
        });
        // 最初の画面が表示されることを確認
        (0, _test.expect)(_react.screen.getByText("英語学習スタイル診断")).toBeInTheDocument();
        (0, _test.expect)(_react.screen.getByText("診断を始める")).toBeInTheDocument();
    });
    it("進捗バーが正しく更新される", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        const progressBar = _react.screen.getByRole("progressbar");
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuenow", "10");
        // 最初の質問に回答
        const firstOption = _react.screen.getByText("単語の意味を他の人に説明しながら覚える");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(firstOption);
        });
        // 次へボタンをクリック
        const nextButton = _react.screen.getByText("次へ");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(nextButton);
        });
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuenow", "20");
    });
    it("SNSシェアボタンが正しく機能する", async ()=>{
        mockOpen.mockClear();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        // すべての質問に回答
        for(let i = 0; i < 10; i++){
            const options = _react.screen.getAllByRole("button").filter((button)=>!button.textContent?.includes("診断を始める") && !button.textContent?.includes("もう一度テストを受ける") && !button.textContent?.includes("次へ"));
            await (0, _testutils.act)(async ()=>{
                await _userevent.default.click(options[0]);
            });
            // 次へボタンをクリック（最後の質問以外）
            if (i < 9) {
                const nextButton = _react.screen.getByText("次へ");
                await (0, _testutils.act)(async ()=>{
                    await _userevent.default.click(nextButton);
                });
            }
        }
        // SNSシェアボタンをクリック
        const twitterButton = _react.screen.getByText("X (Twitter)");
        await _userevent.default.click(twitterButton);
        (0, _test.expect)(mockOpen).toHaveBeenCalledTimes(1);
        (0, _test.expect)(mockOpen).toHaveBeenCalledWith(_test.expect.stringContaining("twitter.com/intent/tweet"), "_blank");
    });
    it("選択したオプションに正しいスタイルが適用される", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        await startDiagnosis();
        const firstOption = _react.screen.getByText("単語の意味を他の人に説明しながら覚える");
        await (0, _testutils.act)(async ()=>{
            await _userevent.default.click(firstOption);
        });
        (0, _test.expect)(firstOption.closest("button")).toHaveClass("selected-option");
    });
    it("renders progress bar with correct accessibility attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const progressBar = _react.screen.getByRole("progressbar");
        (0, _test.expect)(progressBar).toBeInTheDocument();
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuemin", "0");
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuemax", "100");
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuenow", "10"); // 最初の質問は10%
    });
    it("プログレスバーが適切なアクセシビリティ属性を持っている", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const progressBar = _react.screen.getByRole("progressbar");
        (0, _test.expect)(progressBar).toBeInTheDocument();
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuemin", "0");
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuemax", "100");
        (0, _test.expect)(progressBar).toHaveAttribute("aria-valuenow");
    });
});

//# sourceMappingURL=data:application/json;base64,