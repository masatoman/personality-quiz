{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/features/dashboard/GiverScoreChart.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  Legend, \n  ResponsiveContainer \n} from 'recharts';\nimport { GiverScoreHistoryItem } from '@/types/quiz';\n\n// 表示スパンの型定義\ntype TimeSpan = '1週間' | '1ヶ月' | '3ヶ月' | '6ヶ月' | '1年';\n\n// コンポーネントのプロパティ\ninterface GiverScoreChartProps {\n  userId: string;\n}\n\n// ギバースコア推移グラフコンポーネント\nconst GiverScoreChart: React.FC<GiverScoreChartProps> = ({ userId }) => {\n  const [scoreHistory, setScoreHistory] = useState<GiverScoreHistoryItem[]>([]);\n  const [timeSpan, setTimeSpan] = useState<TimeSpan>('1ヶ月');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 現在の日付から指定された期間分の過去の日付を取得\n  const getDateBefore = (span: TimeSpan): Date => {\n    const now = new Date();\n    switch (span) {\n      case '1週間':\n        return new Date(now.setDate(now.getDate() - 7));\n      case '1ヶ月':\n        return new Date(now.setMonth(now.getMonth() - 1));\n      case '3ヶ月':\n        return new Date(now.setMonth(now.getMonth() - 3));\n      case '6ヶ月':\n        return new Date(now.setMonth(now.getMonth() - 6));\n      case '1年':\n        return new Date(now.setFullYear(now.getFullYear() - 1));\n      default:\n        return new Date(now.setMonth(now.getMonth() - 1));\n    }\n  };\n\n  // データ取得\n  useEffect(() => {\n    const fetchScoreHistory = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const startDate = getDateBefore(timeSpan);\n        \n        const response = await fetch(`/api/user/giver-score-history?userId=${userId}&startDate=${startDate.toISOString()}`);\n        \n        if (!response.ok) {\n          throw new Error(`データの取得に失敗しました: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        \n        // データの形式を整える（日付でソート）\n        const sortedData = data.history.sort((a: GiverScoreHistoryItem, b: GiverScoreHistoryItem) => {\n          return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();\n        });\n        \n        setScoreHistory(sortedData);\n      } catch (error) {\n        console.error('スコア履歴の取得に失敗しました:', error);\n        setError('スコア履歴の取得中にエラーが発生しました。');\n        \n        // 開発用のモックデータ\n        setScoreHistory(generateMockData(timeSpan));\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchScoreHistory();\n  }, [userId, timeSpan]);\n\n  // モックデータ生成関数（開発用）\n  const generateMockData = (span: TimeSpan): GiverScoreHistoryItem[] => {\n    const data: GiverScoreHistoryItem[] = [];\n    const now = new Date();\n    const startDate = getDateBefore(span);\n    let currentDate = new Date(startDate);\n    \n    // 基準となるスコア値\n    let baseScore = 65;\n    \n    // 日付の間隔を決定\n    let interval = 1; // デフォルトは1日ごと\n    if (span === '3ヶ月' || span === '6ヶ月') {\n      interval = 3; // 3日ごと\n    } else if (span === '1年') {\n      interval = 7; // 1週間ごと\n    }\n    \n    // データ生成\n    while (currentDate <= now) {\n      // ランダムな変動を加える（-3〜+5の範囲）\n      const randomChange = Math.floor(Math.random() * 9) - 3;\n      \n      // 全体的に右肩上がりになるように調整\n      const daysPassed = Math.floor((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n      const trendIncrease = daysPassed * 0.05; // 日数が経つほどわずかに上昇\n      \n      // 最終スコアを計算（0〜100の範囲内に収める）\n      baseScore = Math.min(100, Math.max(0, baseScore + randomChange + trendIncrease));\n      \n      data.push({\n        userId,\n        score: Math.round(baseScore),\n        timestamp: new Date(currentDate)\n      });\n      \n      // 次の日付に進む\n      currentDate.setDate(currentDate.getDate() + interval);\n    }\n    \n    return data;\n  };\n\n  // グラフ用にデータをフォーマット\n  const formatDataForChart = () => {\n    return scoreHistory.map(item => ({\n      date: new Date(item.timestamp).toLocaleDateString('ja-JP', {\n        month: 'short',\n        day: 'numeric'\n      }),\n      score: item.score\n    }));\n  };\n\n  // 期間選択ハンドラ\n  const handleTimeSpanChange = (span: TimeSpan) => {\n    setTimeSpan(span);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-xl font-bold\">ギバースコア推移</h2>\n        <div className=\"flex space-x-2\">\n          {(['1週間', '1ヶ月', '3ヶ月', '6ヶ月', '1年'] as TimeSpan[]).map((span) => (\n            <button\n              key={span}\n              onClick={() => handleTimeSpanChange(span)}\n              className={`px-3 py-1 text-sm rounded-full transition-colors ${\n                timeSpan === span\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {span}\n            </button>\n          ))}\n        </div>\n      </div>\n      \n      {loading ? (\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      ) : error ? (\n        <div className=\"flex justify-center items-center h-64 text-red-500\">\n          <p>{error}</p>\n        </div>\n      ) : (\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={formatDataForChart()}\n              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"date\" \n                padding={{ left: 10, right: 10 }} \n              />\n              <YAxis \n                domain={[0, 100]} \n                ticks={[0, 25, 50, 75, 100]} \n                label={{ value: 'スコア', angle: -90, position: 'insideLeft' }} \n              />\n              <Tooltip \n                formatter={(value) => [`${value}ポイント`, 'ギバースコア']}\n                labelFormatter={(label) => `日付: ${label}`}\n              />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"score\"\n                name=\"ギバースコア\"\n                stroke=\"#6246EA\"\n                strokeWidth={2}\n                activeDot={{ r: 8 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n      \n      <div className=\"mt-4 text-sm text-gray-500\">\n        <p>※ ギバースコアはギバー行動（教材作成、フィードバック提供など）に基づいて計算されます。</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GiverScoreChart; "],"names":["GiverScoreChart","userId","scoreHistory","setScoreHistory","useState","timeSpan","setTimeSpan","loading","setLoading","error","setError","getDateBefore","span","now","Date","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","useEffect","fetchScoreHistory","startDate","response","fetch","toISOString","ok","Error","status","data","json","sortedData","history","sort","a","b","timestamp","getTime","console","generateMockData","currentDate","baseScore","interval","randomChange","Math","floor","random","daysPassed","trendIncrease","min","max","push","score","round","formatDataForChart","map","item","date","toLocaleDateString","month","day","handleTimeSpanChange","div","className","h2","button","onClick","p","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","padding","YAxis","domain","ticks","label","value","angle","position","Tooltip","formatter","labelFormatter","Legend","Line","type","name","stroke","strokeWidth","activeDot","r"],"mappings":"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"}