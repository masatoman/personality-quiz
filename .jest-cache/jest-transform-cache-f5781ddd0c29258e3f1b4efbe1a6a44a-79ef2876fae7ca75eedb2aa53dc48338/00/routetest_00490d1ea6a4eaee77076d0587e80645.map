{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/api/rankings/weekly/__tests__/route.test.ts"],"sourcesContent":["import { GET } from '../route';\nimport { pool, initPool } from '@/lib/db';\nimport { NextResponse } from 'next/server';\nimport { unstable_cache } from 'next/cache';\n\n// テスト環境のセットアップ\nconst mockResponse = {\n  json: jest.fn(),\n  status: 200,\n  headers: new Map(),\n};\n\nglobal.Response = jest.fn(() => mockResponse) as any;\nglobal.Headers = jest.fn() as any;\nglobal.Request = jest.fn() as any;\n\n// モックの設定\njest.mock('@/lib/db', () => ({\n  pool: {\n    query: jest.fn(),\n  },\n  initPool: jest.fn(),\n}));\n\njest.mock('next/cache', () => ({\n  unstable_cache: jest.fn((fn) => fn),\n}));\n\ndescribe('週間ランキングAPI', () => {\n  beforeEach(() => {\n    // モックをリセット\n    jest.clearAllMocks();\n  });\n\n  describe('初期化テスト', () => {\n    it('データベース接続の初期化が行われる', async () => {\n      // API呼び出し\n      await GET();\n      \n      // initPoolが呼び出されたことを確認\n      expect(initPool).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('正常系テスト', () => {\n    it('ランキングデータを正しい形式で取得できる', async () => {\n      // モックデータの設定\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: [\n          { user_id: '1', username: 'user1', total_score: 100 },\n          { user_id: '2', username: 'user2', total_score: 90 },\n        ],\n        rowCount: 2,\n      };\n\n      // モックの実装\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      // API呼び出し\n      const response = await GET();\n      const data = await response.json();\n\n      // アサーション\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(data).toEqual({\n        data: [\n          { id: '1', username: 'user1', score: 100, rank: 1 },\n          { id: '2', username: 'user2', score: 90, rank: 2 },\n        ],\n        timestamp: expect.any(String)\n      });\n    });\n\n    it('空のランキングデータを正しく処理できる', async () => {\n      // モックデータの設定\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: [],\n        rowCount: 0,\n      };\n\n      // モックの実装\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      // API呼び出し\n      const response = await GET();\n      const data = await response.json();\n\n      // アサーション\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(response.status).toBe(204);\n      expect(data).toEqual({\n        data: [],\n        message: 'ランキングデータが存在しません',\n        timestamp: expect.any(String)\n      });\n    });\n  });\n\n  describe('異常系テスト', () => {\n    it('テーブルが存在しない場合、適切な日本語エラーメッセージを返す', async () => {\n      // モックデータの設定\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: false }] };\n\n      // モックの実装\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck);\n\n      // API呼び出し\n      const response = await GET();\n      const data = await response.json();\n\n      // アサーション\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('ランキングの取得に失敗しました');\n      expect(data.details).toBe('quiz_resultsテーブルが存在しません');\n      expect(data.timestamp).toBeDefined();\n    });\n\n    it('データベース接続エラー時、適切な日本語エラーメッセージを返す', async () => {\n      // モックの実装\n      (pool.query as jest.Mock).mockRejectedValue(new Error('データベース接続エラー'));\n\n      // API呼び出し\n      const response = await GET();\n      const data = await response.json();\n\n      // アサーション\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('ランキングの取得に失敗しました');\n      expect(data.details).toBe('データベース接続エラー');\n      expect(data.timestamp).toBeDefined();\n    });\n  });\n\n  describe('キャッシュ機能テスト', () => {\n    it('キャッシュが正しく設定される', async () => {\n      // API呼び出し\n      await GET();\n      \n      // キャッシュ設定の確認\n      expect(unstable_cache).toHaveBeenCalledWith(\n        expect.any(Function),\n        ['weekly-rankings'],\n        { revalidate: 300, tags: ['rankings'] }\n      );\n    });\n\n    it('キャッシュ期間内は再クエリが実行されない', async () => {\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: [{ user_id: '1', username: 'user1', total_score: 100 }],\n        rowCount: 1,\n      };\n\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      // 1回目の呼び出し\n      await GET();\n      \n      // 2回目の呼び出し\n      await GET();\n\n      // クエリは1回目の呼び出しでのみ実行される\n      expect(pool.query).toHaveBeenCalledTimes(4);\n    });\n  });\n\n  describe('パフォーマンステスト', () => {\n    it('大量のランキングデータを処理できる', async () => {\n      // 1000件のモックデータを生成\n      const mockRows = Array.from({ length: 1000 }, (_, i) => ({\n        user_id: `${i}`,\n        username: `user${i}`,\n        total_score: 1000 - i,\n      }));\n\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: mockRows,\n        rowCount: 1000,\n      };\n\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      const startTime = Date.now();\n      const response = await GET();\n      const endTime = Date.now();\n      const data = await response.json();\n\n      // 処理時間が1秒未満であることを確認\n      expect(endTime - startTime).toBeLessThan(1000);\n      expect(data.data.length).toBe(1000);\n      expect(data.data[0].rank).toBe(1);\n      expect(data.data[999].rank).toBe(1000);\n    });\n  });\n\n  describe('エッジケーステスト', () => {\n    it('スコアが0の場合も正しく処理できる', async () => {\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: [{ user_id: '1', username: 'user1', total_score: 0 }],\n        rowCount: 1,\n      };\n\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      const response = await GET();\n      const data = await response.json();\n\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(data.data[0].score).toBe(0);\n    });\n\n    it('同点の場合、同じランクが割り当てられる', async () => {\n      const mockTestResult = { rows: [{ now: new Date() }] };\n      const mockTableCheck = { rows: [{ exists: true }] };\n      const mockIndexCheck = { rows: [{ exists: true }] };\n      const mockRankingResult = {\n        rows: [\n          { user_id: '1', username: 'user1', total_score: 100 },\n          { user_id: '2', username: 'user2', total_score: 100 },\n          { user_id: '3', username: 'user3', total_score: 90 },\n        ],\n        rowCount: 3,\n      };\n\n      (pool.query as jest.Mock)\n        .mockResolvedValueOnce(mockTestResult)\n        .mockResolvedValueOnce(mockTableCheck)\n        .mockResolvedValueOnce(mockIndexCheck)\n        .mockResolvedValueOnce(mockRankingResult);\n\n      const response = await GET();\n      const data = await response.json();\n\n      expect(response).toBeInstanceOf(NextResponse);\n      expect(data.data[0].rank).toBe(1);\n      expect(data.data[1].rank).toBe(1);\n      expect(data.data[2].rank).toBe(3);\n    });\n  });\n}); "],"names":["jest","mock","pool","query","fn","initPool","unstable_cache","mockResponse","json","status","headers","Map","global","Response","Headers","Request","describe","beforeEach","clearAllMocks","it","GET","expect","toHaveBeenCalledTimes","mockTestResult","rows","now","Date","mockTableCheck","exists","mockIndexCheck","mockRankingResult","user_id","username","total_score","rowCount","mockResolvedValueOnce","response","data","toBeInstanceOf","NextResponse","toEqual","id","score","rank","timestamp","any","String","toBe","message","error","details","toBeDefined","mockRejectedValue","Error","toHaveBeenCalledWith","Function","revalidate","tags","mockRows","Array","from","length","_","i","startTime","endTime","toBeLessThan"],"mappings":"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"}