{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/__tests__/PointsSystem.e2e-user.test.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\n\n/**\n * ユーザー操作を模倣したポイントシステムE2Eテスト\n * モックを使わず実際のAPIエンドポイントにアクセスするテスト\n */\ntest.describe('ポイントシステム 実ユーザーフロー', () => {\n  // 前提条件: テスト用のユーザーアカウントが存在し、テスト用のデータが準備されていること\n  \n  test.beforeEach(async ({ page }) => {\n    // テスト用ユーザーでログイン\n    await page.goto('/login');\n    await page.getByLabel('メールアドレス').fill('testuser@example.com');\n    await page.getByLabel('パスワード').fill('password123');\n    await page.getByRole('button', { name: 'ログイン' }).click();\n    \n    // ログインできていることを確認\n    await page.waitForURL('**/dashboard');\n  });\n  \n  test('E2E: ログイン後のポイント残高確認 → 教材完了 → ポイント履歴確認のフロー', async ({ page }) => {\n    // 1. ダッシュボードでポイント残高を確認\n    await page.goto('/dashboard');\n    const initialPointsElement = page.getByTestId('points-balance');\n    await expect(initialPointsElement).toBeVisible();\n    \n    // 初期ポイント残高を記録\n    const initialPointsText = await initialPointsElement.textContent() || '0';\n    const initialPoints = parseInt(initialPointsText.replace(/[^0-9]/g, ''));\n    console.log(`初期ポイント残高: ${initialPoints}`);\n    \n    // 2. 教材一覧ページに移動\n    await page.goto('/resources');\n    \n    // 3. 未完了の教材を探す\n    const incompleteResourcesLocator = page.locator('.resource-item:not(.completed)');\n    const incompleteCount = await incompleteResourcesLocator.count();\n    \n    if (incompleteCount === 0) {\n      test.skip();\n      console.log('未完了の教材がないためテストをスキップします');\n      return;\n    }\n    \n    // 最初の未完了教材をクリック\n    await incompleteResourcesLocator.first().click();\n    \n    // 4. 教材の詳細を確認\n    const resourceTitle = page.getByTestId('resource-title');\n    await expect(resourceTitle).toBeVisible();\n    const titleText = await resourceTitle.textContent();\n    console.log(`選択した教材: ${titleText}`);\n    \n    // 5. 教材を完了としてマーク\n    const completeButton = page.getByRole('button', { name: '完了' });\n    await expect(completeButton).toBeVisible();\n    await completeButton.click();\n    \n    // 6. 完了メッセージを確認\n    const completionMessage = page.getByText(/ポイントを獲得しました/);\n    await expect(completionMessage).toBeVisible();\n    \n    // 7. ポイント履歴ページに移動\n    await page.goto('/points/history');\n    \n    // 8. 履歴が表示されていることを確認\n    const historyList = page.getByTestId('points-history-list');\n    await expect(historyList).toBeVisible();\n    \n    // 9. 最新の履歴項目を確認\n    const latestHistoryItem = page.getByTestId('points-history-item').first();\n    await expect(latestHistoryItem).toBeVisible();\n    \n    // 直前の教材完了が履歴に反映されているか確認\n    if (titleText) {\n      await expect(latestHistoryItem).toContainText(titleText);\n    }\n    \n    // 10. ダッシュボードに戻ってポイントが増えていることを確認\n    await page.goto('/dashboard');\n    \n    const updatedPointsElement = page.getByTestId('points-balance');\n    await expect(updatedPointsElement).toBeVisible();\n    const updatedPointsText = await updatedPointsElement.textContent() || '0';\n    const updatedPoints = parseInt(updatedPointsText.replace(/[^0-9]/g, ''));\n    \n    console.log(`更新後のポイント残高: ${updatedPoints}`);\n    expect(updatedPoints).toBeGreaterThan(initialPoints);\n  });\n  \n  test('E2E: ギバースコアの変動確認フロー', async ({ page }) => {\n    // 1. ダッシュボードでギバースコアを確認\n    await page.goto('/dashboard');\n    const initialScoreElement = page.getByTestId('giver-score');\n    \n    if (await initialScoreElement.count() === 0) {\n      test.skip();\n      console.log('ギバースコア表示がないためテストをスキップします');\n      return;\n    }\n    \n    await expect(initialScoreElement).toBeVisible();\n    const initialScoreText = await initialScoreElement.textContent() || '0';\n    const initialScore = parseFloat(initialScoreText.replace(/[^0-9.]/g, ''));\n    console.log(`初期ギバースコア: ${initialScore}`);\n    \n    // 2. ギバー行動を行う（教材投稿）\n    await page.goto('/resources/create');\n    \n    // 教材投稿フォームに入力\n    await page.getByLabel('タイトル').fill(`テスト教材 ${Date.now()}`);\n    await page.getByLabel('説明').fill('これはE2Eテスト用の教材です');\n    await page.locator('select[name=\"type\"]').selectOption('article');\n    await page.getByLabel('内容').fill('教材のコンテンツをここに入力します。テスト用のテキストです。');\n    \n    // 投稿ボタンをクリック\n    await page.getByRole('button', { name: '投稿する' }).click();\n    \n    // 投稿成功メッセージを確認\n    const successMessage = page.getByText('教材が投稿されました');\n    await expect(successMessage).toBeVisible();\n    \n    // 3. ダッシュボードに戻ってギバースコアが上昇していることを確認\n    await page.goto('/dashboard');\n    \n    // 少し待機（スコア計算に時間がかかる場合）\n    await page.waitForTimeout(2000);\n    \n    const updatedScoreElement = page.getByTestId('giver-score');\n    await expect(updatedScoreElement).toBeVisible();\n    const updatedScoreText = await updatedScoreElement.textContent() || '0';\n    const updatedScore = parseFloat(updatedScoreText.replace(/[^0-9.]/g, ''));\n    \n    console.log(`更新後のギバースコア: ${updatedScore}`);\n    expect(updatedScore).toBeGreaterThanOrEqual(initialScore);\n  });\n  \n  test('E2E: 報酬交換と在庫確認フロー', async ({ page }) => {\n    // 1. ダッシュボードでポイント残高を確認\n    await page.goto('/dashboard');\n    const pointsElement = page.getByTestId('points-balance');\n    await expect(pointsElement).toBeVisible();\n    const pointsText = await pointsElement.textContent() || '0';\n    const currentPoints = parseInt(pointsText.replace(/[^0-9]/g, ''));\n    console.log(`現在のポイント残高: ${currentPoints}`);\n    \n    // 2. 報酬ページに移動\n    await page.goto('/rewards');\n    \n    // 3. 報酬一覧を取得\n    const rewardItems = page.getByTestId('reward-item');\n    const rewardsCount = await rewardItems.count();\n    \n    if (rewardsCount === 0) {\n      test.skip();\n      console.log('利用可能な報酬がないためテストをスキップします');\n      return;\n    }\n    \n    // 4. 購入可能な報酬を探す（ポイントが足りるもの）\n    let purchasableRewardFound = false;\n    let selectedRewardPrice = 0;\n    \n    for (let i = 0; i < rewardsCount; i++) {\n      const reward = rewardItems.nth(i);\n      const priceElement = reward.locator('.reward-price');\n      const priceText = await priceElement.textContent() || '0';\n      const price = parseInt(priceText.replace(/[^0-9]/g, ''));\n      \n      if (price <= currentPoints) {\n        purchasableRewardFound = true;\n        selectedRewardPrice = price;\n        await reward.click();\n        break;\n      }\n    }\n    \n    if (!purchasableRewardFound) {\n      test.skip();\n      console.log('購入可能な報酬がないためテストをスキップします');\n      return;\n    }\n    \n    // 5. 報酬詳細ページで購入ボタンをクリック\n    const purchaseButton = page.getByRole('button', { name: '購入する' });\n    await expect(purchaseButton).toBeVisible();\n    await purchaseButton.click();\n    \n    // 6. 確認ダイアログで確定をクリック\n    const confirmButton = page.getByRole('button', { name: '確定' });\n    await expect(confirmButton).toBeVisible();\n    await confirmButton.click();\n    \n    // 7. 購入完了メッセージを確認\n    const successMessage = page.getByText('報酬を購入しました');\n    await expect(successMessage).toBeVisible();\n    \n    // 8. ダッシュボードに戻ってポイントが減っていることを確認\n    await page.goto('/dashboard');\n    \n    const updatedPointsElement = page.getByTestId('points-balance');\n    await expect(updatedPointsElement).toBeVisible();\n    const updatedPointsText = await updatedPointsElement.textContent() || '0';\n    const updatedPoints = parseInt(updatedPointsText.replace(/[^0-9]/g, ''));\n    \n    console.log(`更新後のポイント残高: ${updatedPoints}`);\n    console.log(`報酬価格: ${selectedRewardPrice}`);\n    expect(updatedPoints).toBe(currentPoints - selectedRewardPrice);\n  });\n}); "],"names":["test","describe","beforeEach","page","goto","getByLabel","fill","getByRole","name","click","waitForURL","initialPointsElement","getByTestId","expect","toBeVisible","initialPointsText","textContent","initialPoints","parseInt","replace","console","log","incompleteResourcesLocator","locator","incompleteCount","count","skip","first","resourceTitle","titleText","completeButton","completionMessage","getByText","historyList","latestHistoryItem","toContainText","updatedPointsElement","updatedPointsText","updatedPoints","toBeGreaterThan","initialScoreElement","initialScoreText","initialScore","parseFloat","Date","now","selectOption","successMessage","waitForTimeout","updatedScoreElement","updatedScoreText","updatedScore","toBeGreaterThanOrEqual","pointsElement","pointsText","currentPoints","rewardItems","rewardsCount","purchasableRewardFound","selectedRewardPrice","i","reward","nth","priceElement","priceText","price","purchaseButton","confirmButton","toBe"],"mappings":"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"}