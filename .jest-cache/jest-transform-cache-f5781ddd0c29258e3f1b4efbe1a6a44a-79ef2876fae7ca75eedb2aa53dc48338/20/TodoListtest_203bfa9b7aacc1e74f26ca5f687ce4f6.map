{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/components/__tests__/TodoList.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport TodoList from '../TodoList';\nimport { act } from 'react-dom/test-utils';\n\n// モックデータ\nconst mockGiverScore = 15;\nconst mockGiverType = 'matcher';\nconst mockActivityCounts = {\n  CREATE_CONTENT: 1,\n  PROVIDE_FEEDBACK: 2,\n  CONSUME_CONTENT: 5,\n  COMPLETE_QUIZ: 3\n};\n\n// localStorage のモック\nconst localStorageMock = (() => {\n  let store: Record<string, string> = {};\n  return {\n    getItem: jest.fn((key: string) => store[key] || null),\n    setItem: jest.fn((key: string, value: string) => {\n      store[key] = value.toString();\n    }),\n    clear: jest.fn(() => {\n      store = {};\n    }),\n    removeItem: jest.fn((key: string) => {\n      delete store[key];\n    }),\n  };\n})();\n\n// uuidv4のモック\njest.mock('uuid', () => ({\n  v4: () => 'test-uuid',\n}));\n\ndescribe('TodoList Component', () => {\n  beforeAll(() => {\n    Object.defineProperty(window, 'localStorage', { value: localStorageMock });\n  });\n\n  beforeEach(() => {\n    localStorageMock.clear();\n    jest.clearAllMocks();\n  });\n\n  test('コンポーネントが正しくレンダリングされる', () => {\n    render(\n      <TodoList\n        giverScore={mockGiverScore}\n        giverType={mockGiverType}\n        activityCounts={mockActivityCounts}\n      />\n    );\n    \n    // ヘッダーが表示されていることを確認\n    expect(screen.getByText('今日のタスク')).toBeInTheDocument();\n    \n    // 「タスク追加」ボタンが表示されていることを確認\n    expect(screen.getByText('タスク追加')).toBeInTheDocument();\n    \n    // 初回表示時に推奨タスクが生成されていることを確認\n    expect(localStorageMock.setItem).toHaveBeenCalled();\n  });\n\n  test('タスク追加フォームを表示/非表示できる', () => {\n    render(<TodoList />);\n    \n    // 初期状態ではフォームは非表示\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // フォームが表示される\n    expect(screen.getByPlaceholderText('新しいタスクを入力...')).toBeInTheDocument();\n    \n    // 「キャンセル」ボタンをクリック\n    fireEvent.click(screen.getByText('キャンセル'));\n    \n    // フォームが非表示になる\n    expect(screen.queryByPlaceholderText('新しいタスクを入力...')).not.toBeInTheDocument();\n  });\n\n  test('新しいタスクを追加できる', async () => {\n    render(<TodoList />);\n    \n    // 「タスク追加」ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    \n    // 新しいタスクを入力\n    const taskInput = screen.getByPlaceholderText('新しいタスクを入力...');\n    fireEvent.change(taskInput, { target: { value: '新しいテストタスク' } });\n    \n    // 「追加」ボタンをクリック\n    fireEvent.click(screen.getByText('追加'));\n    \n    // タスクが追加されたことを確認\n    expect(screen.getByText('新しいテストタスク')).toBeInTheDocument();\n    \n    // localStorage に保存されたことを確認\n    expect(localStorageMock.setItem).toHaveBeenCalled();\n  });\n\n  test('タスクの完了状態を切り替えられる', async () => {\n    // localStorage にタスクデータをセット\n    const mockTask = {\n      id: '123',\n      title: 'テストタスク',\n      completed: false,\n      points: 5,\n      type: 'daily',\n      createdAt: new Date().toISOString()\n    };\n    localStorageMock.setItem('shiftWithTasks', JSON.stringify([mockTask]));\n    \n    render(<TodoList />);\n    \n    // 未完了状態のタスクが表示される\n    const taskTitle = screen.getByText('テストタスク');\n    expect(taskTitle).toBeInTheDocument();\n    expect(taskTitle).not.toHaveClass('line-through');\n    \n    // 完了ボタンをクリック\n    const completeButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(completeButton);\n    \n    // タスクが完了状態になることを確認\n    await waitFor(() => {\n      expect(screen.getByText('テストタスク')).toHaveClass('line-through');\n    });\n    \n    // localStorage が更新されたことを確認\n    expect(localStorageMock.setItem).toHaveBeenCalledTimes(2); // 初期化と更新\n  });\n\n  test('カスタムタスクを削除できる', async () => {\n    // localStorage にカスタムタスクデータをセット\n    const mockTask = {\n      id: '123',\n      title: 'カスタムタスク',\n      completed: false,\n      points: 0,\n      type: 'custom',\n      createdAt: new Date().toISOString()\n    };\n    localStorageMock.setItem('shiftWithTasks', JSON.stringify([mockTask]));\n    \n    render(<TodoList />);\n    \n    // カスタムタスクが表示される\n    expect(screen.getByText('カスタムタスク')).toBeInTheDocument();\n    \n    // 削除ボタンをクリック\n    const deleteButton = screen.getByRole('button', { name: '' });\n    fireEvent.click(deleteButton);\n    \n    // タスクが削除されることを確認\n    await waitFor(() => {\n      expect(screen.queryByText('カスタムタスク')).not.toBeInTheDocument();\n    });\n    \n    // localStorage が更新されたことを確認\n    expect(localStorageMock.setItem).toHaveBeenCalledTimes(2); // 初期化と更新\n  });\n\n  test('ユーザータイプに応じた推奨タスクが表示される', () => {\n    // giverタイプのユーザー\n    const { rerender } = render(\n      <TodoList \n        giverScore={70} \n        giverType=\"giver\" \n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // giverタイプ向けの推奨タスク\n    expect(screen.getByText('教材を作成してみよう')).toBeInTheDocument();\n    \n    // matcherタイプのユーザーに変更\n    rerender(\n      <TodoList \n        giverScore={50} \n        giverType=\"matcher\" \n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // matcherタイプ向けの推奨タスク\n    expect(screen.getByText('教材にフィードバックを提供する')).toBeInTheDocument();\n    \n    // takerタイプのユーザーに変更\n    rerender(\n      <TodoList \n        giverScore={20} \n        giverType=\"taker\" \n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // takerタイプ向けの推奨タスク\n    expect(screen.getByText('クイズに挑戦する')).toBeInTheDocument();\n  });\n  \n  test('ギバースコアに応じた推奨タスクが表示される', () => {\n    // 低スコアのユーザー\n    const { rerender } = render(\n      <TodoList \n        giverScore={5} \n        giverType=\"matcher\" \n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // 初心者向けの推奨タスク\n    expect(screen.getByText('ギバー診断を完了する')).toBeInTheDocument();\n    \n    // 中級者スコアのユーザー\n    rerender(\n      <TodoList \n        giverScore={20} \n        giverType=\"matcher\" \n        activityCounts={{\n          CREATE_CONTENT: 0,\n          PROVIDE_FEEDBACK: 0,\n          CONSUME_CONTENT: 0,\n          COMPLETE_QUIZ: 0\n        }}\n      />\n    );\n    \n    // 中級者向けの推奨タスク\n    expect(screen.getByText('週間学習目標を設定する')).toBeInTheDocument();\n  });\n  \n  test('タスクの追加・完了・削除機能が正しく動作する', async () => {\n    render(<TodoList giverScore={20} giverType=\"matcher\" />);\n    \n    // タスク追加ボタンをクリック\n    fireEvent.click(screen.getByText('タスク追加'));\n    expect(screen.getByPlaceholderText('新しいタスクを入力...')).toBeInTheDocument();\n    \n    // 新しいタスクを入力\n    fireEvent.change(screen.getByPlaceholderText('新しいタスクを入力...'), {\n      target: { value: 'テスト用タスク' },\n    });\n    \n    // 追加ボタンをクリック\n    fireEvent.click(screen.getByText('追加'));\n    \n    // 追加されたタスクが表示される\n    expect(screen.getByText('テスト用タスク')).toBeInTheDocument();\n    \n    // ローカルストレージにタスクが保存される\n    expect(localStorageMock.setItem).toHaveBeenCalledWith(\n      'shiftWithTasks',\n      expect.stringContaining('テスト用タスク')\n    );\n    \n    // タスクを完了状態に変更\n    const taskCheckboxes = screen.getAllByRole('button');\n    const taskCheckbox = Array.from(taskCheckboxes).find(\n      button => button.parentElement?.textContent?.includes('テスト用タスク')\n    );\n    \n    if (taskCheckbox) {\n      fireEvent.click(taskCheckbox);\n      \n      // 完了状態が保存される\n      expect(localStorageMock.setItem).toHaveBeenCalledWith(\n        'shiftWithTasks',\n        expect.stringMatching(/\"completed\":true/)\n      );\n    }\n    \n    // 削除ボタンを探して削除する\n    // 注意: 最新のReact Testing Libraryの更新により、SVGアイコンの検出方法が変わっている可能性があります\n    const deleteButtons = screen.getAllByRole('button');\n    const deleteButton = Array.from(deleteButtons).find(\n      button => button.closest('li')?.textContent?.includes('テスト用タスク')\n    );\n    \n    if (deleteButton) {\n      fireEvent.click(deleteButton);\n      \n      // タスクが削除されたことを確認\n      await waitFor(() => {\n        expect(screen.queryByText('テスト用タスク')).not.toBeInTheDocument();\n      });\n    }\n  });\n  \n  test('ローカルストレージからタスクが読み込まれる', () => {\n    // ローカルストレージにタスクを設定\n    const mockTasks = [\n      {\n        id: 'task1',\n        title: '保存済みタスク',\n        completed: false,\n        points: 0,\n        type: 'custom',\n        createdAt: new Date().toISOString()\n      }\n    ];\n    \n    // モックの返り値を設定\n    jest.spyOn(localStorageMock, 'getItem').mockImplementation(() => JSON.stringify(mockTasks));\n    \n    render(<TodoList giverScore={20} giverType=\"matcher\" />);\n    \n    // ローカルストレージから読み込まれたタスクが表示される\n    expect(screen.getByText('保存済みタスク')).toBeInTheDocument();\n  });\n}); "],"names":["jest","mock","v4","mockGiverScore","mockGiverType","mockActivityCounts","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","COMPLETE_QUIZ","localStorageMock","store","getItem","fn","key","setItem","value","toString","clear","removeItem","describe","beforeAll","Object","defineProperty","window","beforeEach","clearAllMocks","test","render","TodoList","giverScore","giverType","activityCounts","expect","screen","getByText","toBeInTheDocument","toHaveBeenCalled","queryByPlaceholderText","not","fireEvent","click","getByPlaceholderText","taskInput","change","target","mockTask","id","title","completed","points","type","createdAt","Date","toISOString","JSON","stringify","taskTitle","toHaveClass","completeButton","getByRole","name","waitFor","toHaveBeenCalledTimes","deleteButton","queryByText","rerender","toHaveBeenCalledWith","stringContaining","taskCheckboxes","getAllByRole","taskCheckbox","Array","from","find","button","parentElement","textContent","includes","stringMatching","deleteButtons","closest","mockTasks","spyOn","mockImplementation"],"mappings":"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"}