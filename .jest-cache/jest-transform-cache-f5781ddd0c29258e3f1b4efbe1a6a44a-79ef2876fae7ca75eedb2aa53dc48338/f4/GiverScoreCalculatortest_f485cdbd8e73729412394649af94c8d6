00f40ce7e4e61ffdd9a4dfdb1f3ade95
"use strict";
// UserActivityTrackerのモック
jest.mock("@/utils/activity/UserActivityTracker");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _score = require("../../../../src/utils/score");
const _UserActivityTracker = require("../../../../src/utils/activity/UserActivityTracker");
const _activityscore = require("../../../../src/types/activity-score");
describe("GiverScoreCalculator", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe("ユーザー活動に基づくスコア計算", ()=>{
        it("活動履歴からギバースコアを計算できる", async ()=>{
            // モックの活動履歴を設定
            const mockActivities = [
                {
                    userId: "user123",
                    activityType: "create_material",
                    timestamp: new Date("2023-01-01"),
                    details: {
                        materialType: "ARTICLE"
                    }
                },
                {
                    userId: "user123",
                    activityType: "provide_feedback",
                    timestamp: new Date("2023-01-02"),
                    details: {
                        materialType: "VIDEO"
                    }
                },
                {
                    userId: "user123",
                    activityType: "complete_resource",
                    timestamp: new Date("2023-01-03"),
                    details: {
                        materialType: "QUIZ"
                    }
                }
            ];
            // UserActivityTrackerのgetUserActivitiesをモック
            _UserActivityTracker.UserActivityTracker.getUserActivities.mockResolvedValue(mockActivities);
            // 活動履歴を取得
            const userId = "user123";
            const activities = await _UserActivityTracker.UserActivityTracker.getUserActivities(userId);
            // スコア計算用の活動データに変換
            const scoreActivities = activities.map((activity)=>({
                    activityType: (0, _activityscore.convertActivityType)(activity.activityType, "quiz"),
                    materialType: activity.details?.materialType || "OTHER",
                    timestamp: activity.timestamp
                }));
            // スコアを計算
            const scores = (0, _score.recalculateScores)(scoreActivities);
            // 計算結果が期待どおりか検証
            expect(scores.giver).toBeGreaterThan(0);
            expect(scores.taker).toBeGreaterThan(0);
            expect(scores.matcher).toBeGreaterThan(0);
            // パーソナリティタイプを決定
            const personalityType = (0, _score.determinePersonalityType)(scores.giver, scores.taker, scores.matcher);
            // タイプが有効な値か確認
            expect([
                "giver",
                "taker",
                "matcher"
            ]).toContain(personalityType);
        });
        it("活動タイプごとに適切なスコア変化が計算される", ()=>{
            // 各活動タイプのスコア変化をテスト
            const createMaterialScore = (0, _score.calculateScoreChange)("CREATE_CONTENT");
            const provideFeedbackScore = (0, _score.calculateScoreChange)("PROVIDE_FEEDBACK");
            const completeResourceScore = (0, _score.calculateScoreChange)("CONSUME_CONTENT");
            // 教材作成はギバースコアが高い
            expect(createMaterialScore.giver).toBeGreaterThan(createMaterialScore.taker);
            expect(createMaterialScore.giver).toBeGreaterThan(createMaterialScore.matcher);
            // フィードバック提供はマッチャースコアより高いギバースコア
            expect(provideFeedbackScore.giver).toBeGreaterThan(provideFeedbackScore.matcher);
            // リソース完了はテイカースコアが最も高い
            expect(completeResourceScore.taker).toBeGreaterThan(completeResourceScore.giver);
        });
        it("活動カウントからユーザーのタイプを予測できる", async ()=>{
            // 活動カウントのモック
            const mockSummary = {
                create_material_count: 10,
                provide_feedback_count: 8,
                complete_resource_count: 5,
                daily_login_count: 20
            };
            // UserActivityTrackerのgetActivitySummaryをモック
            _UserActivityTracker.UserActivityTracker.getActivitySummary.mockResolvedValue(mockSummary);
            // 活動サマリーを取得
            const userId = "user123";
            const summary = await _UserActivityTracker.UserActivityTracker.getActivitySummary(userId);
            // 活動カウントからスコアを推定
            let giverScore = summary.create_material_count * 5 + summary.provide_feedback_count * 3;
            let takerScore = summary.complete_resource_count * 2;
            let matcherScore = summary.create_material_count * 2 + summary.provide_feedback_count + summary.complete_resource_count;
            // 推定されたスコアに基づいてパーソナリティタイプを決定
            const personalityType = (0, _score.determinePersonalityType)(giverScore, takerScore, matcherScore);
            // この活動パターンではギバータイプが予測される
            expect(personalityType).toBe("giver");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,