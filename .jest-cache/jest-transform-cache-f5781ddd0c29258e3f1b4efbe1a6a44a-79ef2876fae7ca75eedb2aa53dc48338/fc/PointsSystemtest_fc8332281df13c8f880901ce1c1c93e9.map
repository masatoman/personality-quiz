{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/app/__tests__/PointsSystem.test.ts"],"sourcesContent":["import { consumePoints, fetchPointsBalance, PURCHASABLE_ITEMS } from '../../utils/points';\nimport { ACTIVITY_POINTS } from '../../lib/api';\nimport { ActivityType } from '../../types/activity';\n\n// APIをモック\nglobal.fetch = jest.fn();\n\n// テスト用にポイント計算機能を単純化した実装\nconst calculatePointsForActivity = (activityType: ActivityType): number => {\n  return ACTIVITY_POINTS[activityType] || 0;\n};\n\n// ポイント使用処理のシミュレーション\nconst simulatePointsUsage = (\n  availablePoints: number, \n  pointCost: number\n): { success: boolean; remainingPoints: number } => {\n  if (availablePoints < pointCost) {\n    return { success: false, remainingPoints: availablePoints };\n  }\n  return { success: true, remainingPoints: availablePoints - pointCost };\n};\n\ndescribe('ポイントシステム', () => {\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n  \n  describe('ポイント消費関数', () => {\n    it('ポイント消費に成功した場合、成功レスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          success: true,\n          consumedPoints: 100,\n          remainingPoints: 400\n        })\n      });\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item', {\n        referenceId: 'item_1',\n        referenceType: 'item',\n        description: 'アイテム購入'\n      });\n      \n      // 正しいエンドポイントとパラメータでAPIが呼び出されているか検証\n      expect(global.fetch).toHaveBeenCalledWith('/api/points/consume', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          points: 100,\n          actionType: 'purchase_item',\n          referenceId: 'item_1',\n          referenceType: 'item',\n          description: 'アイテム購入'\n        }),\n      });\n      \n      // 成功レスポンスが返されるか検証\n      expect(result).toEqual({\n        success: true,\n        consumedPoints: 100,\n        remainingPoints: 400\n      });\n    });\n    \n    it('ポイント不足の場合、エラーレスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          error: 'ポイントが不足しています',\n          currentPoints: 50,\n          requiredPoints: 100\n        })\n      });\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item');\n      \n      // エラーレスポンスが返されるか検証\n      expect(result).toEqual({\n        success: false,\n        error: 'ポイントが不足しています',\n        currentPoints: 50,\n        requiredPoints: 100\n      });\n    });\n    \n    it('通信エラーの場合、エラーレスポンスを返す', async () => {\n      // フェッチ関数がエラーをスローする場合\n      (global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n      \n      // ポイント消費関数を実行\n      const result = await consumePoints(100, 'purchase_item');\n      \n      // エラーレスポンスが返されるか検証\n      expect(result).toEqual({\n        success: false,\n        error: '通信エラーが発生しました'\n      });\n    });\n  });\n  \n  describe('ポイント残高取得関数', () => {\n    it('ポイント残高取得に成功した場合、成功レスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          points: 500\n        })\n      });\n      \n      // ポイント残高取得関数を実行\n      const result = await fetchPointsBalance();\n      \n      // 正しいエンドポイントでAPIが呼び出されているか検証\n      expect(global.fetch).toHaveBeenCalledWith('/api/points/balance');\n      \n      // 成功レスポンスが返されるか検証\n      expect(result).toEqual({\n        success: true,\n        points: 500\n      });\n    });\n    \n    it('認証エラーの場合、エラーレスポンスを返す', async () => {\n      // モックレスポンスを設定\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        json: async () => ({\n          error: '認証が必要です'\n        })\n      });\n      \n      // ポイント残高取得関数を実行\n      const result = await fetchPointsBalance();\n      \n      // エラーレスポンスが返されるか検証\n      expect(result).toEqual({\n        success: false,\n        error: '認証が必要です'\n      });\n    });\n  });\n  \n  describe('購入可能アイテム', () => {\n    it('購入可能アイテムのリストが正しく定義されている', () => {\n      // 購入可能アイテムリストが配列として存在するか検証\n      expect(Array.isArray(PURCHASABLE_ITEMS)).toBe(true);\n      \n      // 少なくとも1つのアイテムが存在するか検証\n      expect(PURCHASABLE_ITEMS.length).toBeGreaterThan(0);\n      \n      // 各アイテムが必要なプロパティを持っているか検証\n      PURCHASABLE_ITEMS.forEach(item => {\n        expect(item).toHaveProperty('id');\n        expect(item).toHaveProperty('name');\n        expect(item).toHaveProperty('description');\n        expect(item).toHaveProperty('points');\n        expect(item).toHaveProperty('category');\n        \n        // ポイントは数値であるか検証\n        expect(typeof item.points).toBe('number');\n        expect(item.points).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  // PointSystem.test.tsから統合\n  describe('ポイント獲得機能', () => {\n    it('教材作成では10ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('CREATE_CONTENT');\n      expect(points).toBe(10);\n    });\n\n    it('フィードバック提供では3ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('PROVIDE_FEEDBACK');\n      expect(points).toBe(3);\n    });\n\n    it('コンテンツ消費では1ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('CONSUME_CONTENT');\n      expect(points).toBe(1);\n    });\n\n    it('質問投稿では1ポイント獲得できる', () => {\n      const points = calculatePointsForActivity('ASK_QUESTION');\n      expect(points).toBe(1);\n    });\n\n    it('複数のアクティビティによる累積ポイントが正しく計算される', () => {\n      const activityTypes: ActivityType[] = [\n        'CREATE_CONTENT',\n        'PROVIDE_FEEDBACK',\n        'CONSUME_CONTENT',\n        'ASK_QUESTION'\n      ];\n      \n      const totalPoints = activityTypes.reduce((sum, type) => {\n        return sum + calculatePointsForActivity(type);\n      }, 0);\n      \n      // 手動計算: 10 + 3 + 1 + 1 = 15\n      expect(totalPoints).toBe(15);\n    });\n\n    it('未定義のアクティビティでは0ポイント獲得となる', () => {\n      // @ts-ignore - テスト用に意図的に不正な値を使用\n      const points = calculatePointsForActivity('INVALID_ACTIVITY');\n      expect(points).toBe(0);\n    });\n  });\n\n  describe('ポイント使用機能', () => {\n    it('十分なポイントがある場合は使用に成功する', () => {\n      const availablePoints = 100;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(true);\n      expect(result.remainingPoints).toBe(50);\n    });\n\n    it('ポイントが不足している場合は使用に失敗する', () => {\n      const availablePoints = 30;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(false);\n      expect(result.remainingPoints).toBe(30); // 変化なし\n    });\n\n    it('ちょうどのポイント数でも使用に成功する', () => {\n      const availablePoints = 50;\n      const pointCost = 50;\n      \n      const result = simulatePointsUsage(availablePoints, pointCost);\n      \n      expect(result.success).toBe(true);\n      expect(result.remainingPoints).toBe(0);\n    });\n\n    it('連続使用の場合、残りポイントが正確に計算される', () => {\n      let currentPoints = 100;\n      \n      // 1回目の使用: 30ポイント\n      const firstUsage = simulatePointsUsage(currentPoints, 30);\n      expect(firstUsage.success).toBe(true);\n      currentPoints = firstUsage.remainingPoints;\n      expect(currentPoints).toBe(70);\n      \n      // 2回目の使用: 50ポイント\n      const secondUsage = simulatePointsUsage(currentPoints, 50);\n      expect(secondUsage.success).toBe(true);\n      currentPoints = secondUsage.remainingPoints;\n      expect(currentPoints).toBe(20);\n      \n      // 3回目の使用: 30ポイント（失敗するはず）\n      const thirdUsage = simulatePointsUsage(currentPoints, 30);\n      expect(thirdUsage.success).toBe(false);\n      currentPoints = thirdUsage.remainingPoints;\n      expect(currentPoints).toBe(20); // 変化なし\n    });\n  });\n}); "],"names":["global","fetch","jest","fn","calculatePointsForActivity","activityType","ACTIVITY_POINTS","simulatePointsUsage","availablePoints","pointCost","success","remainingPoints","describe","beforeEach","resetAllMocks","it","mockResolvedValueOnce","ok","json","consumedPoints","result","consumePoints","referenceId","referenceType","description","expect","toHaveBeenCalledWith","method","headers","body","JSON","stringify","points","actionType","toEqual","error","currentPoints","requiredPoints","mockRejectedValueOnce","Error","fetchPointsBalance","Array","isArray","PURCHASABLE_ITEMS","toBe","length","toBeGreaterThan","forEach","item","toHaveProperty","activityTypes","totalPoints","reduce","sum","type","firstUsage","secondUsage","thirdUsage"],"mappings":"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"}