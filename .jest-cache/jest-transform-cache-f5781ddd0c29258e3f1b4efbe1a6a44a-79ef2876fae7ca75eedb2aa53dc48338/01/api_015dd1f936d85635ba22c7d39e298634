762f4ef44644c15a28ef13d11208f0f7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ACTIVITY_POINTS: function() {
        return ACTIVITY_POINTS;
    },
    API_BASE: function() {
        return API_BASE;
    },
    getProfile: function() {
        return getProfile;
    },
    getUserActivities: function() {
        return getUserActivities;
    },
    logActivity: function() {
        return logActivity;
    },
    upsertProfile: function() {
        return upsertProfile;
    }
});
const _supabase = /*#__PURE__*/ _interop_require_default(require("./supabase"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const API_BASE = "/api";
const ACTIVITY_POINTS = {
    CREATE_CONTENT: 10,
    PROVIDE_FEEDBACK: 3,
    CONSUME_CONTENT: 1,
    RECEIVE_FEEDBACK: 0,
    SHARE_RESOURCE: 2,
    ASK_QUESTION: 1
};
async function getProfile(userId) {
    try {
        // プロファイル情報を取得
        const { data: profileData, error: profileError } = await _supabase.default.from("profiles").select("*").eq("user_id", userId).single();
        if (profileError) {
            console.error("プロファイル取得エラー:", profileError);
            return null;
        }
        // ユーザー情報を取得
        const { data: userData, error: userError } = await _supabase.default.from("users").select("personality_type, giver_score, points").eq("id", userId).single();
        if (userError) {
            console.error("ユーザー情報取得エラー:", userError);
            return null;
        }
        // プロファイル情報とユーザー情報を結合
        return {
            ...profileData,
            personality_type: userData.personality_type,
            giver_score: userData.giver_score,
            points: userData.points
        };
    } catch (error) {
        console.error("プロファイル取得中にエラーが発生しました:", error);
        return null;
    }
}
async function upsertProfile(userId, data) {
    try {
        // プロファイル情報を更新
        const { error: profileError } = await _supabase.default.from("profiles").upsert({
            user_id: userId,
            display_name: data.display_name,
            avatar_url: data.avatar_url || null,
            bio: data.bio || null
        });
        if (profileError) {
            console.error("プロファイル更新エラー:", profileError);
            return false;
        }
        // パーソナリティタイプが指定されている場合は、ユーザー情報も更新
        if (data.personality_type) {
            const { error: userError } = await _supabase.default.from("users").update({
                personality_type: data.personality_type
            }).eq("id", userId);
            if (userError) {
                console.error("ユーザー情報更新エラー:", userError);
                return false;
            }
        }
        return true;
    } catch (error) {
        console.error("プロファイル更新中にエラーが発生しました:", error);
        return false;
    }
}
async function logActivity(userId, activityType, referenceId) {
    try {
        const points = ACTIVITY_POINTS[activityType];
        // 活動ログを記録
        const { error: activityError } = await _supabase.default.from("activities").insert({
            user_id: userId,
            activity_type: activityType,
            reference_id: referenceId || null,
            points
        });
        if (activityError) {
            console.error("活動ログ記録エラー:", activityError);
            return false;
        }
        // ユーザーのポイントを更新
        const { error: pointsError } = await _supabase.default.rpc("increment_user_points", {
            user_id: userId,
            points_to_add: points
        });
        if (pointsError) {
            console.error("ポイント更新エラー:", pointsError);
            return false;
        }
        // ギバースコアの更新（特定のアクティビティタイプの場合）
        if ([
            "CREATE_CONTENT",
            "PROVIDE_FEEDBACK",
            "SHARE_RESOURCE"
        ].includes(activityType)) {
            // ギバースコアを更新する仕組み（将来実装）
            // 今はポイントの10%をギバースコアに加算する簡易的な実装
            const giverScoreIncrement = Math.round(points * 0.1);
            const { error: giverScoreError } = await _supabase.default.rpc("increment_giver_score", {
                user_id: userId,
                score_to_add: giverScoreIncrement
            });
            if (giverScoreError) {
                console.error("ギバースコア更新エラー:", giverScoreError);
            // ギバースコアの更新に失敗しても、活動ログとポイントの記録は成功とみなす
            }
        }
        return true;
    } catch (error) {
        console.error("活動ログ記録中にエラーが発生しました:", error);
        return false;
    }
}
async function getUserActivities(userId, limit = 10) {
    try {
        const { data, error } = await _supabase.default.from("activities").select("*").eq("user_id", userId).order("created_at", {
            ascending: false
        }).limit(limit);
        if (error) {
            console.error("活動ログ取得エラー:", error);
            return [];
        }
        return data;
    } catch (error) {
        console.error("活動ログ取得中にエラーが発生しました:", error);
        return [];
    }
}

//# sourceMappingURL=data:application/json;base64,