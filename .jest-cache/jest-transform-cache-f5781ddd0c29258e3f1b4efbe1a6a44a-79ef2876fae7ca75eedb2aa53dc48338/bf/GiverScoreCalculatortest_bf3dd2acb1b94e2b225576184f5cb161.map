{"version":3,"sources":["/Users/master/Local Sites/testcursor/backup/src/app/__tests__/GiverScoreCalculator.test.ts"],"sourcesContent":["import { GIVER_IMPACT } from '../../types/activity';\nimport { ActivityType } from '../../types/activity';\n\n// ギバースコア計算テスト用に単純化した実装\nfunction calculateGiverScoreIncrement(activityType: ActivityType, basePoints: number): number {\n  const impact = GIVER_IMPACT[activityType] || 0;\n  return Math.round(basePoints * impact);\n}\n\ndescribe('ギバースコア計算', () => {\n  // ポイントの基本設定（仮定）\n  const ACTIVITY_POINTS = {\n    CREATE_CONTENT: 10,\n    PROVIDE_FEEDBACK: 5,\n    CONSUME_CONTENT: 1,\n    SHARE_RESOURCE: 3,\n    ASK_QUESTION: 2,\n    COMPLETE_QUIZ: 5\n  };\n\n  it('コンテンツ作成は100%のギバースコアインパクトを持つ', () => {\n    const activityType: ActivityType = 'CREATE_CONTENT';\n    const basePoints = ACTIVITY_POINTS[activityType];\n    const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n    \n    // 100%反映なので、ベースポイントと同じ値になるはず\n    expect(scoreIncrement).toBe(basePoints);\n    expect(GIVER_IMPACT[activityType]).toBe(1.0);\n  });\n\n  it('フィードバック提供は80%のギバースコアインパクトを持つ', () => {\n    const activityType: ActivityType = 'PROVIDE_FEEDBACK';\n    const basePoints = ACTIVITY_POINTS[activityType];\n    const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n    \n    // 80%反映なので、ベースポイント×0.8の値に近くなるはず\n    expect(scoreIncrement).toBe(Math.round(basePoints * 0.8));\n    expect(GIVER_IMPACT[activityType]).toBe(0.8);\n  });\n\n  it('コンテンツ消費は10%のギバースコアインパクトを持つ', () => {\n    const activityType: ActivityType = 'CONSUME_CONTENT';\n    const basePoints = ACTIVITY_POINTS[activityType];\n    const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n    \n    // 10%反映なので、ベースポイント×0.1の値に近くなるはず\n    expect(scoreIncrement).toBe(Math.round(basePoints * 0.1));\n    expect(GIVER_IMPACT[activityType]).toBe(0.1);\n  });\n\n  it('リソース共有は60%のギバースコアインパクトを持つ', () => {\n    const activityType: ActivityType = 'SHARE_RESOURCE';\n    const basePoints = ACTIVITY_POINTS[activityType];\n    const scoreIncrement = calculateGiverScoreIncrement(activityType, basePoints);\n    \n    // 60%反映なので、ベースポイント×0.6の値に近くなるはず\n    expect(scoreIncrement).toBe(Math.round(basePoints * 0.6));\n    expect(GIVER_IMPACT[activityType]).toBe(0.6);\n  });\n\n  it('全てのアクティビティタイプがギバーインパクト設定を持つ', () => {\n    // 全ての活動タイプに対して設定があるか確認\n    const activityTypes: ActivityType[] = [\n      'CREATE_CONTENT',\n      'PROVIDE_FEEDBACK',\n      'CONSUME_CONTENT',\n      'SHARE_RESOURCE',\n      'ASK_QUESTION',\n      'COMPLETE_QUIZ'\n    ];\n    \n    activityTypes.forEach(type => {\n      expect(GIVER_IMPACT[type]).toBeDefined();\n      expect(typeof GIVER_IMPACT[type]).toBe('number');\n      expect(GIVER_IMPACT[type]).toBeGreaterThanOrEqual(0);\n      expect(GIVER_IMPACT[type]).toBeLessThanOrEqual(1);\n    });\n  });\n\n  it('複数アクティビティの累積スコアが正しく計算される', () => {\n    const activities: ActivityType[] = [\n      'CREATE_CONTENT',\n      'PROVIDE_FEEDBACK',\n      'CONSUME_CONTENT',\n      'SHARE_RESOURCE'\n    ];\n    \n    let totalScore = 0;\n    \n    activities.forEach(activity => {\n      const basePoints = ACTIVITY_POINTS[activity];\n      const increment = calculateGiverScoreIncrement(activity, basePoints);\n      totalScore += increment;\n    });\n    \n    // 手動計算での期待値\n    const expectedScore = \n      10 * 1.0 + // CREATE_CONTENT: 10ポイント × 100%\n      5 * 0.8 +  // PROVIDE_FEEDBACK: 5ポイント × 80%\n      1 * 0.1 +  // CONSUME_CONTENT: 1ポイント × 10%\n      3 * 0.6;   // SHARE_RESOURCE: 3ポイント × 60%\n    \n    expect(totalScore).toBe(Math.round(expectedScore));\n  });\n}); "],"names":["calculateGiverScoreIncrement","activityType","basePoints","impact","GIVER_IMPACT","Math","round","describe","ACTIVITY_POINTS","CREATE_CONTENT","PROVIDE_FEEDBACK","CONSUME_CONTENT","SHARE_RESOURCE","ASK_QUESTION","COMPLETE_QUIZ","it","scoreIncrement","expect","toBe","activityTypes","forEach","type","toBeDefined","toBeGreaterThanOrEqual","toBeLessThanOrEqual","activities","totalScore","activity","increment","expectedScore"],"mappings":";;;;0BAA6B;AAG7B,uBAAuB;AACvB,SAASA,6BAA6BC,YAA0B,EAAEC,UAAkB;IAClF,MAAMC,SAASC,sBAAY,CAACH,aAAa,IAAI;IAC7C,OAAOI,KAAKC,KAAK,CAACJ,aAAaC;AACjC;AAEAI,SAAS,YAAY;IACnB,gBAAgB;IAChB,MAAMC,kBAAkB;QACtBC,gBAAgB;QAChBC,kBAAkB;QAClBC,iBAAiB;QACjBC,gBAAgB;QAChBC,cAAc;QACdC,eAAe;IACjB;IAEAC,GAAG,+BAA+B;QAChC,MAAMd,eAA6B;QACnC,MAAMC,aAAaM,eAAe,CAACP,aAAa;QAChD,MAAMe,iBAAiBhB,6BAA6BC,cAAcC;QAElE,6BAA6B;QAC7Be,OAAOD,gBAAgBE,IAAI,CAAChB;QAC5Be,OAAOb,sBAAY,CAACH,aAAa,EAAEiB,IAAI,CAAC;IAC1C;IAEAH,GAAG,gCAAgC;QACjC,MAAMd,eAA6B;QACnC,MAAMC,aAAaM,eAAe,CAACP,aAAa;QAChD,MAAMe,iBAAiBhB,6BAA6BC,cAAcC;QAElE,gCAAgC;QAChCe,OAAOD,gBAAgBE,IAAI,CAACb,KAAKC,KAAK,CAACJ,aAAa;QACpDe,OAAOb,sBAAY,CAACH,aAAa,EAAEiB,IAAI,CAAC;IAC1C;IAEAH,GAAG,8BAA8B;QAC/B,MAAMd,eAA6B;QACnC,MAAMC,aAAaM,eAAe,CAACP,aAAa;QAChD,MAAMe,iBAAiBhB,6BAA6BC,cAAcC;QAElE,gCAAgC;QAChCe,OAAOD,gBAAgBE,IAAI,CAACb,KAAKC,KAAK,CAACJ,aAAa;QACpDe,OAAOb,sBAAY,CAACH,aAAa,EAAEiB,IAAI,CAAC;IAC1C;IAEAH,GAAG,6BAA6B;QAC9B,MAAMd,eAA6B;QACnC,MAAMC,aAAaM,eAAe,CAACP,aAAa;QAChD,MAAMe,iBAAiBhB,6BAA6BC,cAAcC;QAElE,gCAAgC;QAChCe,OAAOD,gBAAgBE,IAAI,CAACb,KAAKC,KAAK,CAACJ,aAAa;QACpDe,OAAOb,sBAAY,CAACH,aAAa,EAAEiB,IAAI,CAAC;IAC1C;IAEAH,GAAG,+BAA+B;QAChC,uBAAuB;QACvB,MAAMI,gBAAgC;YACpC;YACA;YACA;YACA;YACA;YACA;SACD;QAEDA,cAAcC,OAAO,CAACC,CAAAA;YACpBJ,OAAOb,sBAAY,CAACiB,KAAK,EAAEC,WAAW;YACtCL,OAAO,OAAOb,sBAAY,CAACiB,KAAK,EAAEH,IAAI,CAAC;YACvCD,OAAOb,sBAAY,CAACiB,KAAK,EAAEE,sBAAsB,CAAC;YAClDN,OAAOb,sBAAY,CAACiB,KAAK,EAAEG,mBAAmB,CAAC;QACjD;IACF;IAEAT,GAAG,4BAA4B;QAC7B,MAAMU,aAA6B;YACjC;YACA;YACA;YACA;SACD;QAED,IAAIC,aAAa;QAEjBD,WAAWL,OAAO,CAACO,CAAAA;YACjB,MAAMzB,aAAaM,eAAe,CAACmB,SAAS;YAC5C,MAAMC,YAAY5B,6BAA6B2B,UAAUzB;YACzDwB,cAAcE;QAChB;QAEA,YAAY;QACZ,MAAMC,gBACJ,KAAK,MAAM,gCAAgC;QAC3C,IAAI,MAAO,gCAAgC;QAC3C,IAAI,MAAO,+BAA+B;QAC1C,IAAI,KAAO,8BAA8B;QAE3CZ,OAAOS,YAAYR,IAAI,CAACb,KAAKC,KAAK,CAACuB;IACrC;AACF"}