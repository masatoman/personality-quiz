20c3ed283e4aa14a3cd4d5e1178f83d9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useProgress", {
    enumerable: true,
    get: function() {
        return useProgress;
    }
});
const _react = require("react");
const _badges = require("../data/badges");
const _levels = require("../data/levels");
const useProgress = (userId)=>{
    const [userProgress, setUserProgress] = (0, _react.useState)({
        userId,
        level: 1,
        totalScore: 0,
        badges: [],
        streakDays: 0,
        lastActivityDate: new Date()
    });
    // 進捗データの取得
    const fetchProgress = (0, _react.useCallback)(async ()=>{
        try {
            const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080";
            const response = await fetch(`${apiUrl}/get_progress.php?userId=${userId}`);
            if (!response.ok) {
                throw new Error("進捗データの取得に失敗しました");
            }
            const data = await response.json();
            setUserProgress(data);
        } catch (error) {
            console.error("進捗データの取得中にエラーが発生しました:", error);
            throw error;
        }
    }, [
        userId
    ]);
    // バッジの進捗確認
    const checkBadgeProgress = (0, _react.useCallback)((activityType)=>{
        const newBadges = [];
        Object.entries(_badges.BADGE_DEFINITIONS).forEach(([_, badgeDef])=>{
            const existingBadge = userProgress.badges.find((b)=>b.type === badgeDef.type);
            if (existingBadge) return;
            const relevantRequirements = badgeDef.requirements.filter((req)=>req.activityType === activityType);
            if (relevantRequirements.length === 0) return;
            // 進捗の計算（仮実装）
            const progress = Math.min(relevantRequirements.reduce((acc, req)=>acc + req.count * 10, 0), 100);
            if (progress >= 100) {
                const newBadge = {
                    ...badgeDef,
                    acquiredAt: new Date(),
                    progress: 100
                };
                newBadges.push(newBadge);
            }
        });
        return newBadges;
    }, [
        userProgress.badges
    ]);
    // レベルの確認
    const checkLevel = (0, _react.useCallback)((totalScore)=>{
        let newLevel = _levels.LEVELS[0];
        for (const level of _levels.LEVELS){
            if (totalScore >= level.requiredScore) {
                newLevel = level;
            } else {
                break;
            }
        }
        return newLevel;
    }, []);
    // 進捗の更新
    const updateProgress = (0, _react.useCallback)(async (activityType, scoreChange)=>{
        try {
            const newBadges = checkBadgeProgress(activityType);
            const newTotalScore = userProgress.totalScore + scoreChange;
            const newLevel = checkLevel(newTotalScore);
            const updatedProgress = {
                ...userProgress,
                level: newLevel.number,
                totalScore: newTotalScore,
                badges: [
                    ...userProgress.badges,
                    ...newBadges
                ],
                lastActivityDate: new Date()
            };
            const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080";
            const response = await fetch(`${apiUrl}/update_progress.php`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(updatedProgress)
            });
            if (!response.ok) {
                throw new Error("進捗の更新に失敗しました");
            }
            setUserProgress(updatedProgress);
            return {
                newBadges,
                levelUp: newLevel.number > userProgress.level
            };
        } catch (error) {
            console.error("進捗の更新中にエラーが発生しました:", error);
            throw error;
        }
    }, [
        userProgress,
        checkBadgeProgress,
        checkLevel
    ]);
    // 初期データの取得
    (0, _react.useEffect)(()=>{
        fetchProgress();
    }, [
        fetchProgress
    ]);
    return {
        progress: userProgress,
        updateProgress,
        fetchProgress
    };
};

//# sourceMappingURL=data:application/json;base64,