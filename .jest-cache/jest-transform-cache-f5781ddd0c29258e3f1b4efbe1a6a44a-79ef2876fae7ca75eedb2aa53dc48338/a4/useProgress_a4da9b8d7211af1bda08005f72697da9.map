{"version":3,"sources":["/Users/master/Local Sites/testcursor/src/hooks/useProgress.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { UserProgress, Badge, ActivityType, Level, BadgeType } from '@/types/quiz';\nimport { BADGE_DEFINITIONS } from '@/data/badges';\nimport { LEVELS } from '@/data/levels';\n\nexport const useProgress = (userId: number) => {\n  const [userProgress, setUserProgress] = useState<UserProgress>({\n    userId,\n    level: 1,\n    totalScore: 0,\n    badges: [],\n    streakDays: 0,\n    lastActivityDate: new Date()\n  });\n\n  // 進捗データの取得\n  const fetchProgress = useCallback(async () => {\n    try {\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';\n      const response = await fetch(`${apiUrl}/get_progress.php?userId=${userId}`);\n      \n      if (!response.ok) {\n        throw new Error('進捗データの取得に失敗しました');\n      }\n\n      const data = await response.json();\n      setUserProgress(data);\n    } catch (error) {\n      console.error('進捗データの取得中にエラーが発生しました:', error);\n      throw error;\n    }\n  }, [userId]);\n\n  // バッジの進捗確認\n  const checkBadgeProgress = useCallback((activityType: ActivityType): Badge[] => {\n    const newBadges: Badge[] = [];\n    \n    (Object.entries(BADGE_DEFINITIONS) as [BadgeType, Omit<Badge, 'acquiredAt' | 'progress'>][]).forEach(([_, badgeDef]) => {\n      const existingBadge = userProgress.badges.find(b => b.type === badgeDef.type);\n      if (existingBadge) return;\n\n      const relevantRequirements = badgeDef.requirements.filter(\n        (req: { activityType: ActivityType; count: number }) => req.activityType === activityType\n      );\n\n      if (relevantRequirements.length === 0) return;\n\n      // 進捗の計算（仮実装）\n      const progress = Math.min(\n        relevantRequirements.reduce((acc: number, req: { count: number }) => acc + (req.count * 10), 0),\n        100\n      );\n\n      if (progress >= 100) {\n        const newBadge: Badge = {\n          ...badgeDef,\n          acquiredAt: new Date(),\n          progress: 100\n        };\n        newBadges.push(newBadge);\n      }\n    });\n\n    return newBadges;\n  }, [userProgress.badges]);\n\n  // レベルの確認\n  const checkLevel = useCallback((totalScore: number): Level => {\n    let newLevel = LEVELS[0];\n    \n    for (const level of LEVELS) {\n      if (totalScore >= level.requiredScore) {\n        newLevel = level;\n      } else {\n        break;\n      }\n    }\n\n    return newLevel;\n  }, []);\n\n  // 進捗の更新\n  const updateProgress = useCallback(async (\n    activityType: ActivityType,\n    scoreChange: number\n  ) => {\n    try {\n      const newBadges = checkBadgeProgress(activityType);\n      const newTotalScore = userProgress.totalScore + scoreChange;\n      const newLevel = checkLevel(newTotalScore);\n\n      const updatedProgress: UserProgress = {\n        ...userProgress,\n        level: newLevel.number,\n        totalScore: newTotalScore,\n        badges: [...userProgress.badges, ...newBadges],\n        lastActivityDate: new Date()\n      };\n\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';\n      const response = await fetch(`${apiUrl}/update_progress.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedProgress),\n      });\n\n      if (!response.ok) {\n        throw new Error('進捗の更新に失敗しました');\n      }\n\n      setUserProgress(updatedProgress);\n      return { newBadges, levelUp: newLevel.number > userProgress.level };\n    } catch (error) {\n      console.error('進捗の更新中にエラーが発生しました:', error);\n      throw error;\n    }\n  }, [userProgress, checkBadgeProgress, checkLevel]);\n\n  // 初期データの取得\n  useEffect(() => {\n    fetchProgress();\n  }, [fetchProgress]);\n\n  return {\n    progress: userProgress,\n    updateProgress,\n    fetchProgress\n  };\n}; "],"names":["useProgress","userId","userProgress","setUserProgress","useState","level","totalScore","badges","streakDays","lastActivityDate","Date","fetchProgress","useCallback","apiUrl","process","env","NEXT_PUBLIC_API_URL","response","fetch","ok","Error","data","json","error","console","checkBadgeProgress","activityType","newBadges","Object","entries","BADGE_DEFINITIONS","forEach","_","badgeDef","existingBadge","find","b","type","relevantRequirements","requirements","filter","req","length","progress","Math","min","reduce","acc","count","newBadge","acquiredAt","push","checkLevel","newLevel","LEVELS","requiredScore","updateProgress","scoreChange","newTotalScore","updatedProgress","number","method","headers","body","JSON","stringify","levelUp","useEffect"],"mappings":"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"}