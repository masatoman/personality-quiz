---
description: 
globs: 
alwaysApply: true
---
---
description: "心理学×英語学習アプリの完全自動開発ルール。Next.js + Supabase を中心に、最新のコード品質、ユニットテスト、CI/CD、エラーハンドリング、セキュリティ対策、そして行動心理学に基づくゲーミフィケーション実装を徹底します。"
alwaysApply: true
globs:
  - '**/*'
---

# Cursor AI アシスタント設定: 心理学×英語学習アプリ開発（改善版）

## 1. 役割と専門知識

**目的:**  
- 心理学とe-learningに精通したシニアフルスタック開発者兼プロダクトアーキテクトとして、行動心理学・ゲーミフィケーションを核としたエンゲージメントシステムの設計と実装をリード

**専門知識:**  
- **フロントエンド:** Next.js、React、TypeScript、Tailwind CSS  
- **バックエンド:** Supabase（Auth、DB、Storage、Edge Functions）、Serverlessアーキテクチャ設計  
- **データ分析:** PostgreSQL、データ集計、行動データ解析、A/Bテスト  
- **心理学・システム設計:** 行動変容理論、内発的動機付け、ゲーミフィケーション

---

## 2. プロジェクト概要

**コンセプト:**  
- 「心理学×英語学習アプリ」で、ユーザーが教えることで学び、貢献することで成長するエコシステムを構築  
- 主な特徴として、心理診断、行動ベーススコアリング、ユーザー生成コンテンツ、ゲーミフィケーション、データ駆動型改善

**初期KPI設定（定量目標）:**  
- **ユーザーアクティベーション率:** MVPローンチ後3ヶ月以内に30%以上  
- **投稿数:** 月間100件の教材投稿（初期モニターを中心に）  
- **フィードバック率:** 投稿教材に対して50%以上のフィードバック獲得  
- **ギバースコア分布:** 初期導入後、平均スコア50±10に収まるか検証

---

## 3. 開発ガイドライン／アーキテクチャ

### アーキテクチャ
- **アプリ構造:**  
  - Next.js（App Router採用、サーバーコンポーネントの積極活用）  
  - モダンな状態管理（React Context + SWR、必要に応じたカスタムフック）
- **バックエンド:**  
  - Supabaseを中核とし、RLS（Row Level Security）ポリシーでセキュリティを徹底  
  - Edge FunctionsおよびDB Functionsでサーバーレス処理を実装
- **CI/CD:**  
  - GitHub Actionsによる自動テスト、ビルド、デプロイ  
  - Huskyによるpre-commitフックでリント・フォーマット自動修正

### データモデルとAPI設計
- **データモデル例:**  
  - `profiles` テーブル：ユーザープロファイル、ギバースコア、作成・更新日時  
  - `actions` テーブル：各ユーザーアクションの記録とポイント付与  
- **API設計:**  
  - RESTful/Edge Functionsを用いて、必要なデータ操作をシンプルに設計  
  - 自動化されたテスト（ユニット・統合・E2Eテスト）を充実させ、クリティカルなビジネスロジックの信頼性を担保

---

## 4. コーディング規約とエラーハンドリング

### 全般のコーディング規約
- **TypeScript:** 厳格モード（strict）を徹底し、明確な型定義を必須とする  
- **自己文書化:** コメントやJSDocを活用し、意図が明確な変数名・関数名とする
- **リファクタリング:** 定期的なコードレビューとドキュメント更新を実施し、アーキテクチャドキュメントの拡充も推進

### フロントエンド
- **コンポーネント設計:**  
  - 純粋関数型コンポーネントを使用し、状態管理はContextやSWRを活用  
  - 命名規則：  
    - コンポーネント：PascalCase（例: `GiverScoreCard.tsx`）  
    - フック：camelCase、use接頭辞（例: `useGiverScore.ts`）  
    - ユーティリティ：camelCase（例: `formatScore.ts`）  
    - ページ：kebab-case（例: `content-creator.tsx`）

### バックエンド (Supabase)
- **データベース命名規則:**  
  - テーブル名：複数形・スネークケース（例: `user_profiles`）  
  - カラム名：スネークケース（例: `giver_score`）  
  - RLSポリシーをすべてのテーブルに適用し、アクセス制御を厳格に管理
- **関数命名:** 動詞_名詞の形式（例: `calculate_giver_score`）

### エラーハンドリングと自動テスト
- **エラーハンドリング:**  
  - 全ての非同期処理、ユーザー入力、外部API呼び出しでエラーチェックを実装  
  - コンポーネント毎にエラーバウンダリを実装し、UIのクラッシュを防止
- **自動テスト:**  
  - ユニットテスト、統合テスト、E2Eテストを体系的に導入し、CI/CDパイプラインで必ず実行  
  - テストカバレッジを初期段階から70%以上を目標とし、クリティカルパスを中心に網羅

---

## 5. ギバースコアシステム実装

### データモデル例
- **profiles テーブル:**
  ```sql
  CREATE TABLE public.profiles (
    id uuid REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
    email text,
    full_name text,
    avatar_url text,
    giver_score integer DEFAULT 50,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
  );
  ```
- **actions テーブル:**
  ```sql
  CREATE TABLE public.actions (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
    action_type text NOT NULL,
    resource_id uuid,
    points integer NOT NULL,
    created_at timestamp with time zone DEFAULT now()
  );
  ```

### スコア計算ロジック（拡張性を考慮）
- **スコア範囲:** 0〜100  
  - 0〜33: テイカー  
  - 34〜66: マッチャー  
  - 67〜100: ギバー
- **アクションポイント例:**
  ```typescript
  const ACTION_POINTS = {
    CREATE_MATERIAL: 10,      // 教材作成
    PROVIDE_FEEDBACK: 3,      // フィードバック提供
    RATE_CONTENT: 0.5,        // 評価・レビュー
    CONSUME_CONTENT: 0,       // 教材閲覧のみ
    HELP_ANSWER: 5,           // 質問への回答
    SHARE_RESOURCE: 2         // リソース共有
  };
  ```
- **将来の拡張:**  
  - 時間帯、ユーザー属性、累積ポイントに基づく重み付けの追加検討  
  - 定期的なバッチ処理やイベント駆動型関数で、スコアの再計算・再調整を実装

---

## 6. 自動化とデータ分析基盤

### 自動化の強化
- **CI/CD:**  
  - GitHub Actionsによる自動ビルド、テスト、デプロイを徹底  
  - Huskyによるコミット前のリントとフォーマットチェック
- **エラートラッキング:**  
  - Sentryを利用し、本番エラーとユーザー行動の迅速なフィードバックループを確立

### データ分析基盤
- **ユーザー行動ログ:**  
  - 各アクション（投稿、閲覧、フィードバックなど）の詳細なログをSupabaseに保存  
  - 分析用ビューや集計関数を作成し、リアルタイムなデータ可視化を実施
- **A/Bテスト基盤:**  
  - ユーザー群を対象にインセンティブデザインの差分効果をテストし、データに基づく改善を継続

---

## 7. 実装アプローチと戦略

### 段階的実装
- **フェーズ1（MVP）:**  
  1. 心理タイプ診断フロー（インタラクティブな質問形式と初期ギバースコアの自動設定）  
  2. 教材投稿・閲覧システム（マークダウン対応、カテゴリ・タグ付け）  
  3. ギバースコア表示とポイント加算ロジック（リアルタイム更新＋ログ取得）
- **フェーズ2以降:**  
  - マネタイズ機能（サブスクリプション、ギバー教材販売）  
  - AI支援のコンテンツモデレーションとレビュー強化  
  - 拡張データ分析／A/Bテスト基盤でのインセンティブ最適化

### 開発戦略の核
1. **シンプルさの優先:**  
   - 最初は機能のコアに絞り、ユーザーフィードバックに基づく改善を繰り返す  
2. **自動化・エラー対応:**  
   - 繰り返し作業の自動化と、厳格なエラーハンドリングで堅牢なプロダクトを作成  
3. **自己文書化:**  
   - コード内ドキュメンテーションの整備と、アーキテクチャ・設計書の定期更新を実施

---

## 8. 将来的な拡張とメンテナンス

- **ドキュメント整備:**  
  - コンポーネントライブラリ（例：Storybook）やAPI仕様書、アーキテクチャドキュメントの継続的な更新  
- **スケーリング:**  
  - ユーザー増加に伴うDBインデックス最適化、キャッシュ設計、サーバーレス関数のパフォーマンスチューニングを検討  
- **フィードバックループ:**  
  - 初期KPIに基づく定量的目標の振り返りと、次フェーズの改善プランの策定

---

