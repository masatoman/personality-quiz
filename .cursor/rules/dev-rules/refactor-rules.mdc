---
description: リファクタリングタスクに適用されるルール
globs: 
alwaysApply: false
---
---
description: リファクタリングタスクに適用されるルール
globs: "**/*.{ts,tsx}"
alwaysApply: false
tags:
  - refactor
  - quality
  - maintenance
  - typescript
---

# リファクタリングルール #refactor-rules

## 参照すべきドキュメント #reference-docs
- @docs/基本設計.md - コード品質と設計原則
- @docs/GLOSSARY.md - 用語定義と命名規則

## 重要な確認ポイント #check-points

1. **コード品質の指標** #code-quality
   ```typescript
   // ✅ 関数の単一責任 #single-responsibility
   // Before
   function handleUserData(data: any) {
     validateData(data)
     saveToDatabase(data)
     notifyUser(data)
   }

   // After
   function processUserData(data: UserData) {
     const validatedData = validateUserData(data)
     return {
       dbResult: await saveUserToDatabase(validatedData),
       notificationResult: await sendUserNotification(validatedData)
     }
   }
   ```

2. **パフォーマンス最適化** #performance
   ```typescript
   // ✅ メモ化の適切な使用 #memoization
   const memoizedValue = useMemo(() => 
     expensiveCalculation(props.data),
     [props.data]
   )

   // ✅ 不要なレンダリングの防止 #render-optimization
   const MemoizedComponent = memo(MyComponent, (prev, next) => {
     return prev.id === next.id
   })
   ```

3. **テスト維持と拡充** #testing
   ```typescript
   // ✅ テストの改善例 #test-improvement
   describe('UserService', () => {
     it('should handle user data processing', async () => {
       const mockData = createMockUserData()
       const result = await processUserData(mockData)
       
       expect(result.dbResult).toBeDefined()
       expect(result.notificationResult).toBeDefined()
     })
   })
   ```

4. **型安全性の向上** #type-safety
   ```typescript
   // ✅ 型定義の改善 #type-definition
   interface UserData {
     id: string
     name: string
     email: string
     preferences: UserPreferences
   }

   type UserPreferences = {
     theme: 'light' | 'dark'
     notifications: boolean
     language: string
   }
   ```

## リファクタリング手順 #refactoring-steps

### 1. 事前分析 #pre-analysis
- [ ] 変更対象の特定と影響範囲の評価
- [ ] 既存テストの確認
- [ ] パフォーマンスメトリクスの計測

### 2. 実装計画 #implementation-plan
- [ ] 小規模な変更単位への分割
- [ ] テスト戦略の立案
- [ ] ロールバック計画の策定

### 3. 品質確認 #quality-check
- [ ] コードレビューの実施
- [ ] パフォーマンステスト
- [ ] 型チェックの完全性確認
