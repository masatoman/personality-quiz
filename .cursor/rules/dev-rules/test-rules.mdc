---
description: 
globs: 
alwaysApply: true
---
---
description: テスト関連タスクに適用されるルール
globs: "**/*.test.{ts,tsx,js,jsx}"
alwaysApply: false
tags:
  - testing
  - quality
  - jest
  - playwright
  - cypress
---

# テスト作成ルール #test-rules

## 参照すべきドキュメント #reference-docs
- @docs/README-TEST-ERRORS.md - テストエラー対応ガイド
- @docs/README-UNIT-TESTS.md - ユニットテストガイド
- @docs/テスト実装計画.md - テスト計画と方針

## 重要な確認ポイント #check-points

1. **テストファイルの配置と命名規則** #test-structure
   ```plaintext
   tests/
   ├── unit/          # ユニットテスト
   ├── integration/   # 統合テスト
   ├── e2e/          # E2Eテスト
   └── __mocks__/    # モックデータ
   ```

2. **テストカバレッジ要件** #coverage
   - ユニットテスト: 80%以上
   - 統合テスト: 主要フロー網羅
   - E2Eテスト: クリティカルパス網羅

3. **テスト実装アプローチ** #implementation
   ```typescript
   describe('機能名 #feature-name', () => {
     beforeEach(() => {
       // #test-setup
       ...
     })

     test('テストケース説明 #test-case', () => {
       // #test-implementation
       ...
     })
   })
   ```

4. **モックとスタブの使用** #mocking
   - 外部APIは必ずモック化
   - データベースはテスト用DBを使用
   - 時間依存の処理はスタブ化

## テスト実行コマンド #test-commands
```bash
# ユニットテスト
npm run test:unit

# 統合テスト
npm run test:integration

# E2Eテスト
npm run test:e2e

```

# Playwright特定のテスト
playwrihgt-mct を利用
