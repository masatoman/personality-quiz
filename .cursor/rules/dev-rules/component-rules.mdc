---
description: Reactコンポーネント実装タスクに適用されるルール
globs: 
alwaysApply: false
---
---
description: Reactコンポーネント実装タスクに適用されるルール
globs: "**/*.{tsx,jsx}"
alwaysApply: false
tags:
  - component
  - react
  - typescript
  - frontend
---

# コンポーネント実装ルール #component-rules

## 参照すべきドキュメント #reference-docs
- @docs/基本設計.md - アーキテクチャとコンポーネント設計原則
- @docs/GLOSSARY.md - 用語定義と命名規則

## 重要な確認ポイント #check-points

1. **コンポーネントの配置場所** #component-structure
   ```plaintext
   components/
   ├── common/       # 共通コンポーネント
   │   ├── Button/
   │   ├── Input/
   │   └── Card/
   ├── features/     # 機能別コンポーネント
   │   ├── Auth/
   │   └── Dashboard/
   └── layouts/      # レイアウトコンポーネント
       ├── Header/
       └── Footer/
   ```

2. **コンポーネント設計原則** #component-design
   ```typescript
   // ✅ 単一責任の原則 #single-responsibility
   const UserAvatar: FC<{user: User}> = ({user}) => (
     <Avatar src={user.avatarUrl} alt={user.name} />
   )

   // ✅ 再利用性 #reusability
   const Button: FC<ButtonProps> = ({
     variant = 'primary',
     size = 'medium',
     children,
     ...props
   }) => (
     <button className={clsx(styles[variant], styles[size])} {...props}>
       {children}
     </button>
   )
   ```

3. **状態管理アプローチ** #state-management
   ```typescript
   // ✅ ローカル状態 #local-state
   const [isOpen, setIsOpen] = useState(false)

   // ✅ グローバル状態 #global-state
   const { data: user } = useQuery({
     queryKey: ['user'],
     queryFn: fetchUser
   })
   ```

4. **コーディングスタイル** #coding-style
   ```typescript
   // ✅ インポート順序 #import-order
   import { FC } from 'react'
   import { useQuery } from '@tanstack/react-query'
   import clsx from 'clsx'
   
   import { Button } from '@/components/common'
   import { useUser } from '@/hooks'
   import styles from './styles.module.css'
   ```

## 実装前の確認事項 #pre-implementation
- [ ] 類似コンポーネントの有無を確認 #duplicate-check
- [ ] 共通化の可能性を検討 #reuse-check
- [ ] テストケースの計画 #test-planning

## パフォーマンス考慮事項 #performance
- メモ化の適切な使用（useMemo, useCallback）
- 不要なレンダリングの防止
- 画像の最適化
- コード分割の検討