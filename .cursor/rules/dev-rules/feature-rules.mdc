---
description: 新機能実装タスクに適用されるルール
globs: 
alwaysApply: false
---
---
description: 新機能実装タスクに適用されるルール
globs: "**/*.{ts,tsx}"
alwaysApply: false
tags:
  - feature
  - implementation
  - development
---

# 機能追加ルール #feature-rules

## 参照すべきドキュメント #reference-docs
- @docs/基本設計.md - 機能設計の基本方針
- @docs/GLOSSARY.md - 用語定義と命名規則

## 重要な確認ポイント #check-points

1. **機能要件と優先度** #requirements
   ```markdown
   ## 機能仕様 #specification
   - 目的: [機能の目的]
   - 優先度: [高/中/低]
   - 影響範囲: [影響を受けるコンポーネント/機能]
   ```

2. **ギバー行動促進の原則** #giver-behavior
   - ユーザーの貢献を可視化
   - 相互支援を促進
   - コミュニティ価値の向上

3. **データモデルとの整合性** #data-model
   ```typescript
   // ✅ Prismaモデルとの整合性 #prisma-model
   interface UserContribution {
     id: string
     userId: string
     type: ContributionType
     points: number
     createdAt: Date
   }
   ```

4. **エラー処理とフィードバック** #error-handling
   ```typescript
   // ✅ エラー処理の例 #error-example
   try {
     const result = await submitContribution(data)
     showSuccess('貢献が記録されました')
   } catch (error) {
     showError('エラーが発生しました', error)
     captureException(error) // エラー監視
   }
   ```

## 実装計画 #implementation-plan

### タスク分解 #task-breakdown
1. 基本実装 #basic-implementation
   - [ ] データモデルの作成/更新
   - [ ] APIエンドポイントの実装
   - [ ] フロントエンド実装

2. テスト計画 #test-plan
   - [ ] ユニットテスト
   - [ ] 統合テスト
   - [ ] E2Eテスト

3. デプロイ計画 #deployment-plan
   - [ ] マイグレーション
   - [ ] 環境変数の更新
   - [ ] デプロイ手順の文書化
